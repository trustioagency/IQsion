{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a modern full-stack web application built as a marketing intelligence platform for SMEs (Small-Medium Enterprises), specifically targeting e-commerce businesses. The platform provides AI-powered analytics, market analysis, competitor tracking, and automated marketing recommendations through an intuitive dashboard interface.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nKredi tasarrufu: AI özelliklerini minimal kullan, sadece gerekli düzeltmeleri yap.\n\n## System Architecture\n\nThe application follows a clean full-stack architecture with the following key design decisions:\n\n**Frontend**: React with TypeScript using Vite for build tooling and development server. The UI is built with shadcn/ui components (Radix primitives + Tailwind CSS) for a modern, accessible interface.\n\n**Backend**: Express.js server with TypeScript providing RESTful APIs and authentication.\n\n**Database**: PostgreSQL with Drizzle ORM for type-safe database operations and migrations.\n\n**Authentication**: Replit-based OAuth integration with session management using connect-pg-simple.\n\n**AI Integration**: Google Gemini AI for market analysis, performance insights, and chat functionality.\n\n## Key Components\n\n### Frontend Architecture\n- **Component Library**: shadcn/ui with Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **State Management**: TanStack Query for server state and React hooks for local state  \n- **Routing**: Wouter for lightweight client-side routing\n- **Build Tool**: Vite with React plugin and TypeScript support\n\n### Backend Architecture\n- **API Framework**: Express.js with TypeScript\n- **Database Layer**: Drizzle ORM with PostgreSQL\n- **Authentication**: Passport.js with OpenID Connect (Replit OAuth)\n- **Session Storage**: PostgreSQL-backed sessions with connect-pg-simple\n- **AI Services**: Google Gemini integration for analytics and chat\n\n### Database Schema\n- **Users**: User profiles and authentication data\n- **Brand Profiles**: Business information and onboarding data\n- **Platform Connections**: Integration status with marketing platforms\n- **Marketing Metrics**: Performance data from connected platforms\n- **AI Analysis**: Cached AI-generated insights and recommendations\n- **Tasks**: User action items and recommendations\n- **Sessions**: Authentication session storage\n\n## Data Flow\n\n1. **Authentication Flow**: Users authenticate via Replit OAuth, sessions stored in PostgreSQL\n2. **Onboarding**: Brand profile creation with business model, industry, and goals\n3. **Platform Integration**: Connect marketing platforms (Google Ads, Meta, TikTok)\n4. **Data Collection**: Fetch and store marketing metrics from connected platforms\n5. **AI Analysis**: Process data through Gemini AI for insights and recommendations\n6. **Dashboard Display**: Present analytics through interactive widgets and charts\n7. **Real-time Chat**: AI assistant powered by Gemini for contextual help\n\n## External Dependencies\n\n### Core Dependencies\n- **Database**: PostgreSQL via Neon serverless connection\n- **AI Service**: Google Gemini API for analysis and chat\n- **Authentication**: Replit OAuth provider\n- **UI Components**: Radix UI primitives via shadcn/ui\n\n### Platform Integrations\n- Google Ads API (planned)\n- Meta Marketing API (planned) \n- TikTok Ads API (planned)\n- Shopify API (planned)\n\n### Development Tools\n- Vite for frontend development and building\n- Drizzle Kit for database migrations\n- TypeScript for type safety\n- ESBuild for server bundling\n\n## Deployment Strategy\n\n**Development**: \n- Frontend served by Vite dev server with HMR\n- Backend runs with tsx for TypeScript execution\n- Database migrations via Drizzle Kit\n\n**Production**:\n- Frontend built with Vite and served statically\n- Backend compiled with ESBuild to single JS bundle\n- PostgreSQL database with connection pooling\n- Environment variables for API keys and database URL\n\nThe application is designed to be deployed on Replit with automatic environment provisioning and OAuth integration. The build process creates optimized bundles for both client and server code.","size_bytes":4148},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/AIAssistant_1753609863036.tsx":{"content":"import React, { useState, useEffect, useRef } from 'react';\nimport { Page, ChatMessage } from '../types';\nimport { getPageContext } from '../utils/pageContext';\nimport { generateChatResponse } from '../services/geminiService';\nimport { XMarkIcon, PaperAirplaneIcon, LightBulbIcon } from './icons';\nimport { translations } from '../translations';\n\nconst AIAssistant: React.FC<{\n  isOpen: boolean;\n  onClose: () => void;\n  activePage: Page;\n  language: 'tr' | 'en';\n}> = ({ isOpen, onClose, activePage, language }) => {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const t = translations[language].pageContent.aiAssistant;\n  const t_pages = translations[language].pages;\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n  \n  useEffect(() => {\n    if (isOpen) {\n        setMessages([\n          {\n            role: 'model',\n            content: `${t.greeting} **${t_pages[activePage] || activePage}** ${t.greeting_cont}`,\n          },\n        ]);\n    }\n  }, [isOpen, activePage, language]);\n\n  const handleSend = async (e?: React.FormEvent) => {\n    if (e) e.preventDefault();\n    if (!input.trim() || isLoading) return;\n\n    const userMessage: ChatMessage = { role: 'user', content: input };\n    setMessages((prev) => [...prev, userMessage]);\n    setInput('');\n    setIsLoading(true);\n\n    try {\n      const context = getPageContext(activePage);\n      const responseText = await generateChatResponse(input, context, language);\n      const modelMessage: ChatMessage = { role: 'model', content: responseText };\n      setMessages((prev) => [...prev, modelMessage]);\n    } catch (error) {\n      const errorMessage: ChatMessage = {\n        role: 'model',\n        content: t.error,\n      };\n      setMessages((prev) => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  if (!isOpen) {\n    return null;\n  }\n\n  return (\n    <div \n        className=\"fixed bottom-24 right-6 z-50 w-[90vw] max-w-md h-[70vh] max-h-[600px] flex flex-col bg-slate-800/80 backdrop-blur-xl rounded-2xl shadow-2xl border border-slate-700 animate-fade-in\"\n        aria-modal=\"true\"\n        role=\"dialog\"\n    >\n        <header className=\"flex items-center justify-between p-4 border-b border-slate-700 flex-shrink-0\">\n            <div className=\"flex items-center gap-3\">\n                <div className=\"relative\">\n                    <LightBulbIcon className=\"w-8 h-8 text-sky-400\" />\n                    <span className=\"absolute -top-1 -right-1 flex h-3 w-3\">\n                        <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-sky-400 opacity-75\"></span>\n                        <span className=\"relative inline-flex rounded-full h-3 w-3 bg-sky-500\"></span>\n                    </span>\n                </div>\n                <h2 className=\"text-lg font-bold text-white\">{t.title}</h2>\n            </div>\n            <button onClick={onClose} className=\"text-slate-400 hover:text-white transition-colors\">\n                <XMarkIcon className=\"w-7 h-7\" />\n                <span className=\"sr-only\">{t.close}</span>\n            </button>\n        </header>\n\n        <div className=\"flex-grow p-4 overflow-y-auto space-y-4\">\n            {messages.map((msg, index) => (\n                <div key={index} className={`flex gap-3 ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>\n                    {msg.role === 'model' && <div className=\"w-8 h-8 rounded-full bg-sky-500 flex items-center justify-center flex-shrink-0\"><LightBulbIcon className=\"w-5 h-5 text-white\"/></div>}\n                    <div className={`max-w-[85%] p-3 rounded-xl shadow-md ${msg.role === 'user' ? 'bg-sky-600 text-white rounded-br-none' : 'bg-slate-700 text-slate-200 rounded-bl-none'}`}>\n                        <p className=\"text-sm selection:bg-sky-200 selection:text-sky-900\" dangerouslySetInnerHTML={{ __html: msg.content.replace(/\\*\\*(.*?)\\*\\*/g, '<strong class=\"font-bold text-slate-100\">$1</strong>') }}></p>\n                    </div>\n                </div>\n            ))}\n            {isLoading && (\n                 <div className=\"flex gap-3 justify-start\">\n                    <div className=\"w-8 h-8 rounded-full bg-sky-500 flex items-center justify-center flex-shrink-0\"><LightBulbIcon className=\"w-5 h-5 text-white\"/></div>\n                    <div className=\"max-w-[80%] p-3 rounded-xl bg-slate-700 text-slate-200 rounded-bl-none flex items-center gap-2\">\n                        <span className=\"w-2 h-2 bg-slate-400 rounded-full animate-pulse [animation-delay:0s]\"></span>\n                        <span className=\"w-2 h-2 bg-slate-400 rounded-full animate-pulse [animation-delay:0.15s]\"></span>\n                        <span className=\"w-2 h-2 bg-slate-400 rounded-full animate-pulse [animation-delay:0.3s]\"></span>\n                    </div>\n                </div>\n            )}\n            <div ref={messagesEndRef} />\n        </div>\n\n        <footer className=\"p-4 border-t border-slate-700 flex-shrink-0\">\n            <form onSubmit={handleSend} className=\"flex items-center gap-3\">\n                <input\n                    type=\"text\"\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                    placeholder={t.placeholder}\n                    className=\"flex-grow bg-slate-900 border border-slate-600 rounded-lg px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-sky-500 transition-shadow\"\n                    disabled={isLoading}\n                />\n                <button type=\"submit\" disabled={isLoading || !input.trim()} className=\"bg-sky-600 text-white p-3 rounded-full hover:bg-sky-500 disabled:bg-slate-600 disabled:cursor-not-allowed transition-transform active:scale-95\">\n                    <PaperAirplaneIcon className=\"w-6 h-6\" />\n                </button>\n            </form>\n        </footer>\n    </div>\n  );\n};\n\nexport default AIAssistant;","size_bytes":6138},"attached_assets/AddWidgetModal_1753609863036.tsx":{"content":"\nimport React from 'react';\nimport { translations } from '../translations';\nimport { WidgetKey } from '../types';\nimport { XMarkIcon, PlusIcon } from './icons';\n\ninterface AddWidgetModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n    availableWidgets: WidgetKey[];\n    onAddWidget: (widgetKey: WidgetKey) => void;\n    language: 'tr' | 'en';\n}\n\nconst AddWidgetModal: React.FC<AddWidgetModalProps> = ({ isOpen, onClose, availableWidgets, onAddWidget, language }) => {\n    if (!isOpen) return null;\n\n    const t = translations[language].pageContent.dashboard;\n\n    return (\n        <div\n            className=\"fixed inset-0 bg-slate-900/60 backdrop-blur-sm z-50 flex items-center justify-center p-4 animate-fade-in\"\n            onClick={onClose}\n            role=\"dialog\"\n            aria-modal=\"true\"\n        >\n            <div\n                className=\"bg-slate-800 w-full max-w-md rounded-2xl shadow-2xl border border-slate-700 flex flex-col\"\n                onClick={e => e.stopPropagation()}\n            >\n                <header className=\"p-4 sm:p-6 border-b border-slate-700 flex items-center justify-between\">\n                    <h2 className=\"text-xl font-bold text-white\">{t.add_widget_modal_title}</h2>\n                    <button onClick={onClose} className=\"text-slate-400 hover:text-white transition-colors\">\n                        <XMarkIcon className=\"w-7 h-7\" />\n                    </button>\n                </header>\n                <main className=\"p-4 sm:p-6\">\n                    {availableWidgets.length > 0 ? (\n                        <ul className=\"space-y-3\">\n                            {availableWidgets.map(widgetKey => (\n                                <li key={widgetKey}>\n                                    <button\n                                        onClick={() => onAddWidget(widgetKey)}\n                                        className=\"w-full flex justify-between items-center p-4 bg-slate-900/50 rounded-lg border border-slate-700 hover:bg-slate-700 hover:border-sky-500 transition-all\"\n                                    >\n                                        <span className=\"font-semibold text-slate-200\">{t.widget_titles[widgetKey]}</span>\n                                        <PlusIcon className=\"w-6 h-6 text-sky-400\" />\n                                    </button>\n                                </li>\n                            ))}\n                        </ul>\n                    ) : (\n                        <p className=\"text-slate-400 text-center py-8\">{t.all_widgets_on_dashboard}</p>\n                    )}\n                </main>\n            </div>\n        </div>\n    );\n};\n\nexport default AddWidgetModal;\n","size_bytes":2687},"attached_assets/App_1753609852222.tsx":{"content":"\n\nimport React, { useState, useEffect } from 'react';\nimport { Page } from './types';\nimport Sidebar from './components/Sidebar';\nimport Header from './components/Header';\nimport Dashboard from './Dashboard';\nimport MarketAnalysis from './pages/MarketAnalysis';\nimport Settings from './pages/Settings';\nimport Strategy from './pages/Strategy';\nimport Creative from './pages/Creative';\nimport Audiences from './pages/Audiences';\nimport Customers from './pages/Customers';\nimport Connections from './pages/Connections';\nimport Actions from './pages/Actions';\nimport Tasks from './pages/Tasks';\nimport Automations from './pages/Automations';\nimport Reports from './pages/Reports';\nimport CompetitorAnalysis from './pages/CompetitorAnalysis';\nimport Onboarding from './pages/Onboarding';\nimport ImpactAnalysis from './pages/ImpactAnalysis';\nimport Products from './pages/Products';\nimport Loyalty from './pages/Loyalty';\nimport Opportunities from './pages/Opportunities';\nimport Autopilot from './pages/Autopilot';\nimport Scenarios from './pages/Scenarios';\nimport GooglePerformance from './pages/GooglePerformance';\nimport MetaPerformance from './pages/MetaPerformance';\nimport TikTokPerformance from './pages/TikTokPerformance';\nimport Ekip from './pages/Ekip';\nimport AIAssistant from './components/AIAssistant';\nimport { ChatBubbleBottomCenterTextIcon } from './components/icons';\nimport AudienceProfitability from './pages/AudienceProfitability';\nimport { translations } from './translations';\nimport Profitability from './pages/Profitability';\nimport Collaborations from './pages/Collaborations';\nimport TouchpointAnalysis from './pages/TouchpointAnalysis';\nimport ConversionWizard from './pages/ConversionWizard';\nimport KpiAnalysis from './pages/KpiAnalysis';\nimport GemiAI from './pages/GemiAI';\nimport MediaPlan from './pages/MediaPlan';\n\nconst App: React.FC = () => {\n  const [activePage, setActivePage] = useState<Page>(Page.Dashboard);\n  const [isOnboardingComplete, setIsOnboardingComplete] = useState(false);\n  const [isAssistantOpen, setIsAssistantOpen] = useState(false);\n  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\n  \n  const [language, setLanguage] = useState<'tr' | 'en'>(() => {\n    const storedLang = localStorage.getItem('language');\n    return (storedLang === 'tr' || storedLang === 'en') ? storedLang : 'tr';\n  });\n\n  useEffect(() => {\n      localStorage.setItem('language', language);\n      document.documentElement.lang = language;\n  }, [language]);\n\n\n  const handleOnboardingComplete = () => {\n    setIsOnboardingComplete(true);\n  };\n\n  if (!isOnboardingComplete) {\n    return <Onboarding onComplete={handleOnboardingComplete} language={language} />;\n  }\n\n  const renderPage = () => {\n    switch (activePage) {\n      case Page.Dashboard:\n        return <Dashboard setActivePage={setActivePage} language={language} />;\n      case Page.MarketAnalysis:\n        return <MarketAnalysis language={language} />;\n      case Page.CompetitorAnalysis:\n        return <CompetitorAnalysis language={language} />;\n      case Page.ImpactAnalysis:\n        return <ImpactAnalysis language={language} />;\n      case Page.Strategy:\n        return <Strategy language={language} />;\n      case Page.Creative:\n        return <Creative language={language} />;\n      case Page.Reports:\n        return <Reports language={language} />;\n      case Page.Opportunities:\n        return <Opportunities language={language} />;\n      case Page.Scenarios:\n        return <Scenarios language={language} />;\n      case Page.Google:\n        return <GooglePerformance language={language} />;\n      case Page.Meta:\n        return <MetaPerformance language={language} />;\n      case Page.TikTok:\n        return <TikTokPerformance language={language} />;\n      case Page.MediaPlan:\n        return <MediaPlan language={language} />;\n      case Page.Audiences:\n        return <Audiences language={language} />;\n      case Page.Customers:\n        return <Customers language={language} />;\n      case Page.Products:\n        return <Products language={language} />;\n      case Page.Loyalty:\n        return <Loyalty language={language} />;\n      case Page.TouchpointAnalysis:\n        return <TouchpointAnalysis language={language} />;\n      case Page.ConversionWizard:\n        return <ConversionWizard language={language} />;\n      case Page.KpiAnalysis:\n        return <KpiAnalysis language={language} />;\n      case Page.GemiAI:\n        return <GemiAI language={language} />;\n      case Page.Autopilot:\n        return <Autopilot language={language} />;\n      case Page.Actions:\n        return <Actions language={language} />;\n      case Page.Tasks:\n        return <Tasks language={language} />;\n      case Page.Ekip:\n        return <Ekip language={language} />;\n      case Page.AudienceProfitability:\n        return <AudienceProfitability language={language} />;\n      case Page.Profitability:\n        return <Profitability language={language} />;\n      case Page.Collaborations:\n        return <Collaborations language={language} />;\n      case Page.Automations:\n        return <Automations language={language} />;\n      case Page.Connections:\n        return <Connections language={language} />;\n      case Page.Settings:\n        return <Settings language={language} />;\n      default:\n        return <Dashboard setActivePage={setActivePage} language={language} />;\n    }\n  };\n  \n  const translatedPageTitle = translations[language].pages[activePage] || activePage;\n\n  return (\n    <div className=\"flex h-screen bg-slate-900 text-slate-300 overflow-hidden\">\n      <Sidebar \n        activePage={activePage} \n        setActivePage={setActivePage} \n        language={language}\n        isCollapsed={isSidebarCollapsed}\n        setIsCollapsed={setIsSidebarCollapsed}\n      />\n      <div className=\"flex flex-col flex-1 w-full min-w-0\">\n        <Header \n          currentPage={translatedPageTitle} \n          language={language} \n          setLanguage={setLanguage} \n        />\n        <main className=\"h-full overflow-y-auto bg-slate-800/50 p-4 sm:p-6 lg:p-8\">\n          {renderPage()}\n        </main>\n      </div>\n\n       <button\n          onClick={() => setIsAssistantOpen(!isAssistantOpen)}\n          className=\"fixed bottom-6 right-6 z-40 bg-sky-600 text-white rounded-full p-4 shadow-lg hover:bg-sky-500 transition-transform hover:scale-110\"\n          aria-label={translations[language].pageContent.aiAssistant.title}\n        >\n          <ChatBubbleBottomCenterTextIcon className=\"w-8 h-8\"/>\n        </button>\n\n      <AIAssistant\n          isOpen={isAssistantOpen}\n          onClose={() => setIsAssistantOpen(false)}\n          activePage={activePage}\n          language={language}\n      />\n    </div>\n  );\n};\n\nexport default App;","size_bytes":6736},"attached_assets/Card_1753609863036.tsx":{"content":"\nimport React from 'react';\n\ninterface CardProps {\n  title: string;\n  children: React.ReactNode;\n  className?: string;\n  icon?: React.ReactNode;\n}\n\nconst Card: React.FC<CardProps> = ({ title, children, className = '', icon }) => {\n  return (\n    <div className={`bg-slate-800/70 backdrop-blur-sm rounded-xl shadow-lg p-6 border border-slate-700 ${className}`}>\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-slate-200\">{title}</h3>\n        {icon && <div className=\"text-slate-400\">{icon}</div>}\n      </div>\n      <div>{children}</div>\n    </div>\n  );\n};\n\nexport default Card;\n","size_bytes":643},"attached_assets/Dashboard_1753609852222.tsx":{"content":"\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { Page, WidgetKey, DateRangeKey, PlatformKey } from './types';\nimport { translations } from './translations';\nimport StatCardsWidget from './components/dashboard/StatCardsWidget';\nimport TrafficChartWidget from './components/dashboard/TrafficChartWidget';\nimport AlertsWidget from './components/dashboard/AlertsWidget';\nimport ConversionChartWidget from './components/dashboard/ConversionChartWidget';\nimport AudienceProfitabilityWidget from './components/dashboard/AudienceProfitabilityWidget';\nimport AddWidgetModal from './components/AddWidgetModal';\nimport { WrenchScrewdriverIcon, PlusIcon, CheckBadgeIcon, GoogleIcon, MetaIcon, TikTokIcon } from './components/icons';\n\nconst ALL_WIDGETS: WidgetKey[] = ['statCards', 'trafficChart', 'alerts', 'conversionChart', 'audienceProfitability'];\n\nconst widgetComponentMap: { [key in WidgetKey]: React.FC<any> } = {\n    statCards: StatCardsWidget,\n    trafficChart: TrafficChartWidget,\n    alerts: AlertsWidget,\n    conversionChart: ConversionChartWidget,\n    audienceProfitability: AudienceProfitabilityWidget,\n};\n\ninterface DashboardProps {\n    setActivePage: (page: Page) => void;\n    language: 'tr' | 'en';\n}\n\nconst Dashboard: React.FC<DashboardProps> = ({ setActivePage, language }) => {\n    const t = translations[language].pageContent.dashboard;\n\n    const [isCustomizing, setIsCustomizing] = useState(false);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const dragItem = React.useRef<number | null>(null);\n    const dragOverItem = React.useRef<number | null>(null);\n\n    const [layout, setLayout] = useState<WidgetKey[]>(() => {\n        try {\n            const savedLayout = localStorage.getItem('dashboardLayout');\n            return savedLayout ? JSON.parse(savedLayout) : ALL_WIDGETS;\n        } catch (error) {\n            return ALL_WIDGETS;\n        }\n    });\n\n    const [dateRange, setDateRange] = useState<DateRangeKey>(() => {\n        return (localStorage.getItem('dashboardDateRange') as DateRangeKey) || '30d';\n    });\n\n    const [platform, setPlatform] = useState<PlatformKey>(() => {\n        return (localStorage.getItem('dashboardPlatform') as PlatformKey) || 'all';\n    });\n\n    useEffect(() => {\n        localStorage.setItem('dashboardLayout', JSON.stringify(layout));\n    }, [layout]);\n\n    useEffect(() => {\n        localStorage.setItem('dashboardDateRange', dateRange);\n    }, [dateRange]);\n\n    useEffect(() => {\n        localStorage.setItem('dashboardPlatform', platform);\n    }, [platform]);\n\n    const handleRemoveWidget = useCallback((keyToRemove: WidgetKey) => {\n        setLayout(prev => prev.filter(key => key !== keyToRemove));\n    }, []);\n\n    const handleAddWidget = useCallback((keyToAdd: WidgetKey) => {\n        setLayout(prev => [...prev, keyToAdd]);\n        setIsModalOpen(false);\n    }, []);\n\n    const availableWidgetsToAdd = useMemo(() => {\n        return ALL_WIDGETS.filter(key => !layout.includes(key));\n    }, [layout]);\n\n    const handleDragSort = () => {\n        if (dragItem.current === null || dragOverItem.current === null) return;\n        const newLayout = [...layout];\n        const [reorderedItem] = newLayout.splice(dragItem.current, 1);\n        newLayout.splice(dragOverItem.current, 0, reorderedItem);\n        dragItem.current = null;\n        dragOverItem.current = null;\n        setLayout(newLayout);\n    };\n\n    const platformIcons: Record<PlatformKey, React.ReactNode> = {\n        all: <div className=\"w-5 h-5 bg-slate-500 rounded-sm\" />,\n        google: <GoogleIcon className=\"w-5 h-5\" />,\n        meta: <MetaIcon className=\"w-5 h-5\" />,\n        tiktok: <TikTokIcon className=\"w-5 h-5 bg-white rounded-sm p-0.5\" />,\n    }\n\n    const FilterButton: React.FC<{\n        onClick: () => void;\n        isActive: boolean;\n        children: React.ReactNode;\n        icon?: React.ReactNode;\n    }> = ({ onClick, isActive, children, icon }) => (\n        <button\n            onClick={onClick}\n            className={`flex items-center gap-2 px-4 py-2 text-sm font-semibold rounded-full transition-colors ${\n                isActive ? 'bg-sky-600 text-white' : 'bg-slate-800 text-slate-300 hover:bg-slate-700'\n            }`}\n        >\n            {icon}\n            {children}\n        </button>\n    );\n\n    return (\n        <div className=\"space-y-6\">\n            <AddWidgetModal\n                isOpen={isModalOpen}\n                onClose={() => setIsModalOpen(false)}\n                availableWidgets={availableWidgetsToAdd}\n                onAddWidget={handleAddWidget}\n                language={language}\n            />\n            \n            <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4\">\n                <div className=\"flex items-center gap-4 flex-wrap\">\n                    <div className=\"flex items-center gap-2\">\n                        {Object.keys(t.date_filters).map(key => (\n                           <FilterButton key={key} onClick={() => setDateRange(key as DateRangeKey)} isActive={dateRange === key}>\n                                {t.date_filters[key]}\n                            </FilterButton>\n                        ))}\n                    </div>\n                     <div className=\"flex items-center gap-2\">\n                         {Object.keys(t.platform_filters).map(key => (\n                           <FilterButton key={key} onClick={() => setPlatform(key as PlatformKey)} isActive={platform === key} icon={platformIcons[key as PlatformKey]}>\n                                {t.platform_filters[key]}\n                            </FilterButton>\n                        ))}\n                    </div>\n                </div>\n\n                <div className=\"flex items-center gap-3\">\n                    {isCustomizing && (\n                         <button onClick={() => setIsModalOpen(true)} className=\"flex items-center gap-2 bg-emerald-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-emerald-500 transition-colors\">\n                            <PlusIcon className=\"w-5 h-5\"/>\n                            {t.add_widget}\n                        </button>\n                    )}\n                    <button onClick={() => setIsCustomizing(!isCustomizing)} className={`flex items-center gap-2 font-bold py-2 px-4 rounded-lg transition-colors ${isCustomizing ? 'bg-sky-600 text-white' : 'bg-slate-700 text-slate-200 hover:bg-slate-600'}`}>\n                        {isCustomizing ? <CheckBadgeIcon className=\"w-5 h-5\"/> : <WrenchScrewdriverIcon className=\"w-5 h-5\"/>}\n                        {isCustomizing ? t.save_layout : t.customize_dashboard}\n                    </button>\n                </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n                {layout.map((widgetKey, index) => {\n                    const WidgetComponent = widgetComponentMap[widgetKey];\n                    const props = {\n                        key: widgetKey,\n                        language,\n                        dateRange,\n                        platform,\n                        setActivePage,\n                        isCustomizing,\n                        onRemove: () => handleRemoveWidget(widgetKey),\n                        dragHandleProps: {\n                            draggable: isCustomizing,\n                            onDragStart: () => (dragItem.current = index),\n                            onDragEnter: () => (dragOverItem.current = index),\n                            onDragEnd: handleDragSort,\n                            onDragOver: (e: React.DragEvent) => e.preventDefault(),\n                        }\n                    };\n                    return <WidgetComponent {...props} />;\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default Dashboard;\n","size_bytes":7800},"attached_assets/Header_1753609863036.tsx":{"content":"\nimport React, { useState, useEffect, useRef } from 'react';\nimport { GlobeAltIcon } from './icons';\nimport { translations } from '../translations';\n\ninterface HeaderProps {\n    currentPage: string;\n    language: 'tr' | 'en';\n    setLanguage: (lang: 'tr' | 'en') => void;\n}\n\nconst Header: React.FC<HeaderProps> = ({ currentPage, language, setLanguage }) => {\n  const [isLangMenuOpen, setIsLangMenuOpen] = useState(false);\n  const langMenuRef = useRef<HTMLDivElement>(null);\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (langMenuRef.current && !langMenuRef.current.contains(event.target as Node)) {\n        setIsLangMenuOpen(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  const handleLangChange = (lang: 'tr' | 'en') => {\n    setLanguage(lang);\n    setIsLangMenuOpen(false);\n  }\n\n  return (\n    <header className=\"flex items-center justify-between h-16 bg-slate-900 border-b border-slate-700/50 px-4 sm:px-6 lg:px-8 flex-shrink-0\">\n      <h2 className=\"text-xl font-semibold text-slate-200\">{currentPage}</h2>\n      <div className=\"flex items-center space-x-4\">\n        \n        {/* Language Selector */}\n        <div className=\"relative\" ref={langMenuRef}>\n          <button\n            onClick={() => setIsLangMenuOpen(!isLangMenuOpen)}\n            className=\"flex items-center text-slate-400 hover:text-white transition-colors p-2 rounded-md hover:bg-slate-700/50\"\n            aria-label={translations[language].header.selectLanguage}\n            aria-haspopup=\"true\"\n            aria-expanded={isLangMenuOpen}\n          >\n            <GlobeAltIcon className=\"w-6 h-6\" />\n          </button>\n          {isLangMenuOpen && (\n            <div \n              className=\"absolute right-0 mt-2 w-48 bg-slate-800 border border-slate-700 rounded-lg shadow-xl z-20 animate-fade-in\"\n            >\n              <ul className=\"p-1\">\n                <li>\n                  <button \n                    type=\"button\" \n                    onClick={() => handleLangChange('tr')}\n                    className={`w-full text-left flex items-center px-3 py-2 text-sm rounded-md transition-colors ${language === 'tr' ? 'bg-sky-600/20 text-slate-200 font-semibold' : 'text-slate-300 hover:bg-slate-700'}`}\n                  >\n                    <span className=\"flex-grow\">Türkçe</span>\n                    <span className=\"text-xs text-slate-400\">TR</span>\n                  </button>\n                </li>\n                <li className=\"mt-1\">\n                  <button \n                    type=\"button\" \n                    onClick={() => handleLangChange('en')}\n                    className={`w-full text-left flex items-center px-3 py-2 text-sm rounded-md transition-colors ${language === 'en' ? 'bg-sky-600/20 text-slate-200 font-semibold' : 'text-slate-300 hover:bg-slate-700'}`}\n                  >\n                    <span className=\"flex-grow\">English</span>\n                    <span className=\"text-xs text-slate-500\">EN</span>\n                  </button>\n                </li>\n              </ul>\n            </div>\n          )}\n        </div>\n\n        <div className=\"relative\">\n          <span className=\"absolute -top-1 -right-1 flex h-3 w-3\">\n            <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-sky-400 opacity-75\"></span>\n            <span className=\"relative inline-flex rounded-full h-3 w-3 bg-sky-500\"></span>\n          </span>\n        </div>\n        <img\n          className=\"h-10 w-10 rounded-full object-cover\"\n          src=\"https://picsum.photos/100/100\"\n          alt=\"User Avatar\"\n        />\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","size_bytes":3839},"attached_assets/README_1753609852222.md":{"content":"# Run and deploy your AI Studio app\n\nThis contains everything you need to run your app locally.\n\n## Run Locally\n\n**Prerequisites:**  Node.js\n\n\n1. Install dependencies:\n   `npm install`\n2. Set the `GEMINI_API_KEY` in [.env.local](.env.local) to your Gemini API key\n3. Run the app:\n   `npm run dev`\n","size_bytes":297},"attached_assets/Sidebar_1753609863036.tsx":{"content":"\n\nimport React from 'react';\nimport { Page } from '../types';\nimport { ChartBarIcon, CogIcon, LightBulbIcon, BuildingStorefrontIcon, UserGroupIcon, UsersIcon, SparklesIcon, DocumentChartBarIcon, SquaresPlusIcon, BoltIcon, RocketLaunchIcon, ClipboardDocumentListIcon, EyeIcon, ScaleIcon, ShoppingBagIcon, StarIcon, CalendarDaysIcon, BrainIcon, MapPinIcon, GoogleIcon, MetaIcon, TikTokIcon, BriefcaseIcon, ClipboardDocumentCheckIcon, TreasureChestIcon, CurrencyDollarIcon, ShareIcon, ChevronDoubleLeftIcon, ChevronDoubleRightIcon, CursorArrowRaysIcon, WandIcon, ChartBarSquareIcon, CubeTransparentIcon, PresentationChartBarIcon } from './icons';\nimport { translations } from '../translations';\n\ninterface SidebarProps {\n  activePage: Page;\n  setActivePage: (page: Page) => void;\n  language: 'tr' | 'en';\n  isCollapsed: boolean;\n  setIsCollapsed: (collapsed: boolean) => void;\n}\n\nconst NavItem: React.FC<{\n  page: Page;\n  activePage: Page;\n  setActivePage: (page: Page) => void;\n  icon: React.ReactNode;\n  label: string;\n  isCollapsed: boolean;\n}> = ({ page, activePage, setActivePage, icon, label, isCollapsed }) => {\n  const isActive = activePage === page;\n  return (\n    <li\n      onClick={() => setActivePage(page)}\n      className={`flex items-center p-3 my-1 rounded-lg cursor-pointer transition-colors duration-200 ${isCollapsed ? 'justify-center' : ''} ${\n        isActive\n          ? 'bg-sky-500 text-white shadow-lg'\n          : 'text-slate-400 hover:bg-slate-700 hover:text-slate-200'\n      }`}\n      title={isCollapsed ? label : undefined}\n    >\n      {icon}\n      {!isCollapsed && <span className=\"ml-4 font-medium whitespace-nowrap\">{label}</span>}\n    </li>\n  );\n};\n\nconst NavHeader: React.FC<{ children: React.ReactNode; isCollapsed: boolean }> = ({ children, isCollapsed }) => (\n    isCollapsed\n    ? <hr className=\"my-4 mx-2 border-t border-slate-700/50\" />\n    : <h3 className=\"px-3 mt-6 mb-2 text-xs font-semibold tracking-wider text-slate-500 uppercase whitespace-nowrap\">{children}</h3>\n);\n\n\nconst Sidebar: React.FC<SidebarProps> = ({ activePage, setActivePage, language, isCollapsed, setIsCollapsed }) => {\n  const t = translations[language];\n\n  return (\n    <aside className={`transition-all duration-300 ease-in-out ${isCollapsed ? 'w-24' : 'w-64'} bg-slate-900 text-white flex-shrink-0 p-4 border-r border-slate-700/50 flex flex-col`}>\n      <div className={`flex items-center mb-8 ${isCollapsed ? 'justify-center' : 'px-0'}`}>\n        <BuildingStorefrontIcon className=\"w-8 h-8 text-sky-400 flex-shrink-0\" />\n        {!isCollapsed && <h1 className=\"text-xl font-bold ml-3 whitespace-nowrap\">{t.appName}</h1>}\n      </div>\n      <nav className=\"flex-grow overflow-y-auto overflow-x-hidden pb-4\">\n        <NavHeader isCollapsed={isCollapsed}>{t.navHeaders.general}</NavHeader>\n        <ul>\n          <NavItem\n            page={Page.Dashboard}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<ChartBarIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.Dashboard]}\n            isCollapsed={isCollapsed}\n          />\n        </ul>\n        <NavHeader isCollapsed={isCollapsed}>{t.navHeaders.analysis}</NavHeader>\n        <ul>\n           <NavItem\n            page={Page.MarketAnalysis}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<LightBulbIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.MarketAnalysis]}\n            isCollapsed={isCollapsed}\n          />\n          <NavItem\n            page={Page.CompetitorAnalysis}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<EyeIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.CompetitorAnalysis]}\n            isCollapsed={isCollapsed}\n          />\n          <NavItem\n            page={Page.ImpactAnalysis}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<ScaleIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.ImpactAnalysis]}\n            isCollapsed={isCollapsed}\n          />\n           <NavItem\n            page={Page.Profitability}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<CurrencyDollarIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.Profitability]}\n            isCollapsed={isCollapsed}\n          />\n           <NavItem\n            page={Page.AudienceProfitability}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<TreasureChestIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.AudienceProfitability]}\n            isCollapsed={isCollapsed}\n          />\n           <NavItem\n            page={Page.Strategy}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<DocumentChartBarIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.Strategy]}\n            isCollapsed={isCollapsed}\n          />\n           <NavItem\n            page={Page.Creative}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<SparklesIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.Creative]}\n            isCollapsed={isCollapsed}\n          />\n           <NavItem\n            page={Page.Reports}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<ClipboardDocumentListIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.Reports]}\n            isCollapsed={isCollapsed}\n          />\n          <NavItem\n            page={Page.Opportunities}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<CalendarDaysIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.Opportunities]}\n            isCollapsed={isCollapsed}\n          />\n          <NavItem\n            page={Page.Scenarios}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<MapPinIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.Scenarios]}\n            isCollapsed={isCollapsed}\n          />\n           <NavItem\n            page={Page.KpiAnalysis}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<ChartBarSquareIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.KpiAnalysis]}\n            isCollapsed={isCollapsed}\n          />\n          <NavItem\n            page={Page.GemiAI}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<CubeTransparentIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.GemiAI]}\n            isCollapsed={isCollapsed}\n          />\n        </ul>\n\n         <NavHeader isCollapsed={isCollapsed}>{t.navHeaders.cro}</NavHeader>\n        <ul>\n          <NavItem\n            page={Page.ConversionWizard}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<WandIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.ConversionWizard]}\n            isCollapsed={isCollapsed}\n          />\n          <NavItem\n            page={Page.TouchpointAnalysis}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<CursorArrowRaysIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.TouchpointAnalysis]}\n            isCollapsed={isCollapsed}\n          />\n        </ul>\n\n        <NavHeader isCollapsed={isCollapsed}>{t.navHeaders.channels}</NavHeader>\n        <ul>\n          <NavItem\n            page={Page.Google}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<GoogleIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.Google]}\n            isCollapsed={isCollapsed}\n          />\n          <NavItem\n            page={Page.Meta}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<MetaIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.Meta]}\n            isCollapsed={isCollapsed}\n          />\n          <NavItem\n            page={Page.TikTok}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<TikTokIcon className=\"w-6 h-6 p-0.5 rounded-sm bg-white\" />}\n            label={t.pages[Page.TikTok]}\n            isCollapsed={isCollapsed}\n          />\n        </ul>\n\n        <NavHeader isCollapsed={isCollapsed}>{t.navHeaders.management}</NavHeader>\n         <ul>\n           <NavItem\n            page={Page.MediaPlan}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<PresentationChartBarIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.MediaPlan]}\n            isCollapsed={isCollapsed}\n          />\n           <NavItem\n            page={Page.Audiences}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<UserGroupIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.Audiences]}\n            isCollapsed={isCollapsed}\n          />\n           <NavItem\n            page={Page.Customers}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<UsersIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.Customers]}\n            isCollapsed={isCollapsed}\n          />\n           <NavItem\n            page={Page.Products}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<ShoppingBagIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.Products]}\n            isCollapsed={isCollapsed}\n          />\n           <NavItem\n            page={Page.Loyalty}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<StarIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.Loyalty]}\n            isCollapsed={isCollapsed}\n          />\n           <NavItem\n            page={Page.Collaborations}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<ShareIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.Collaborations]}\n            isCollapsed={isCollapsed}\n          />\n           <NavItem\n            page={Page.Autopilot}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<BrainIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.Autopilot]}\n            isCollapsed={isCollapsed}\n          />\n           <NavItem\n            page={Page.Actions}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<BoltIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.Actions]}\n            isCollapsed={isCollapsed}\n          />\n           <NavItem\n            page={Page.Tasks}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<ClipboardDocumentCheckIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.Tasks]}\n            isCollapsed={isCollapsed}\n          />\n          <NavItem\n            page={Page.Ekip}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<BriefcaseIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.Ekip]}\n            isCollapsed={isCollapsed}\n          />\n           <NavItem\n            page={Page.Automations}\n            activePage={activePage}\n            setActivePage={setActivePage}\n            icon={<RocketLaunchIcon className=\"w-6 h-6\" />}\n            label={t.pages[Page.Automations]}\n            isCollapsed={isCollapsed}\n          />\n        </ul>\n      </nav>\n      <div className=\"mt-auto\">\n         <NavHeader isCollapsed={isCollapsed}>{t.navHeaders.configuration}</NavHeader>\n         <ul>\n            <NavItem\n                page={Page.Connections}\n                activePage={activePage}\n                setActivePage={setActivePage}\n                icon={<SquaresPlusIcon className=\"w-6 h-6\" />}\n                label={t.pages[Page.Connections]}\n                isCollapsed={isCollapsed}\n            />\n            <NavItem\n                page={Page.Settings}\n                activePage={activePage}\n                setActivePage={setActivePage}\n                icon={<CogIcon className=\"w-6 h-6\" />}\n                label={t.pages[Page.Settings]}\n                isCollapsed={isCollapsed}\n            />\n         </ul>\n         <div className=\"border-t border-slate-700/50 mt-4 pt-4\">\n             <button\n                onClick={() => setIsCollapsed(!isCollapsed)}\n                className=\"flex items-center w-full p-3 rounded-lg text-slate-400 hover:bg-slate-700 hover:text-slate-200\"\n                aria-label={isCollapsed ? t.sidebar.expandMenu : t.sidebar.collapseMenu}\n             >\n                {isCollapsed ? (\n                    <ChevronDoubleRightIcon className=\"w-6 h-6 mx-auto\" />\n                ) : (\n                    <div className=\"flex items-center justify-between w-full\">\n                        <span className=\"font-medium whitespace-nowrap\">{t.sidebar.collapseMenu}</span>\n                        <ChevronDoubleLeftIcon className=\"w-6 h-6\" />\n                    </div>\n                )}\n            </button>\n         </div>\n      </div>\n    </aside>\n  );\n};\n\nexport default Sidebar;","size_bytes":13279},"attached_assets/icons_1753609863036.tsx":{"content":"\n\nimport React from 'react';\n\n// Generic Icon Props\ntype IconProps = React.SVGProps<SVGSVGElement>;\n\nexport const ChartBarIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 013 19.875v-6.75zM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V8.625zM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25C20.496 3 21 3.504 21 4.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V4.125z\" />\n  </svg>\n);\n\nexport const CogIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M4.5 12a7.5 7.5 0 0015 0m-15 0a7.5 7.5 0 1115 0m-15 0H3m18 0h-1.5m-15 0a7.5 7.5 0 1115 0m-15 0H3m15 0h1.5m-1.5-1.5l-1.5-1.5m0 0l-1.5-1.5m1.5 1.5l1.5 1.5m1.5-1.5l1.5-1.5m-1.5-1.5l-1.5-1.5m0 0l-1.5-1.5m1.5 1.5l1.5 1.5M12 6.75v-1.5m0 15v-1.5m-6.75-11.25H3.75m16.5 0h-1.5M12 12.75a.75.75 0 100-1.5.75.75 0 000 1.5z\" />\n  </svg>\n);\n\nexport const LightBulbIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 18v-5.25m0 0a6.01 6.01 0 001.5-1.254m-1.5 1.254a6.01 6.01 0 01-1.5-1.254m0 0A2.25 2.25 0 0113.5 9.75V7.5a2.25 2.25 0 00-4.5 0v2.25m4.5 0a2.25 2.25 0 01-2.25 2.25\" />\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 18a3 3 0 11-6 0 3 3 0 016 0z\" />\n  </svg>\n);\n\nexport const BuildingStorefrontIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M13.5 21v-7.5c0-.75.6-1.35 1.35-1.35h1.5c.75 0 1.35.6 1.35 1.35V21\" />\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3 7.5v10.5a2.25 2.25 0 002.25 2.25h13.5a2.25 2.25 0 002.25-2.25V7.5\" />\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3 7.5c0-1.5 1.5-2.5 3-2.5h12c1.5 0 3 1 3 2.5\" />\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v3\" />\n  </svg>\n);\n\nexport const UserGroupIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M18 18.72a9.094 9.094 0 003.741-.479 3 3 0 00-4.682-2.72m-7.282 2.72a3 3 0 01-4.682-2.72 9.094 9.094 0 013.741-.479m-4.26 1.84a5.98 5.98 0 00-.28-1.123m11.28 1.123c-.092-.372-.19-.73-.3-1.075m-6.623-1.075a5.982 5.982 0 00-.28-1.123m0 0a3 3 0 10-6 0m0 0a3 3 0 10-6 0m6 0a3 3 0 106 0m-6 0a3 3 0 106 0\" />\n  </svg>\n);\n\nexport const UsersIcon: React.FC<IconProps> = (props) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 19.128a9.38 9.38 0 002.625.372 9.337 9.337 0 004.121-8.037 9.337 9.337 0 00-1.879-5.183c-.378-.495-.826-.95-1.328-1.358a9.337 9.337 0 00-6.816-2.53c-1.636 0-3.21.439-4.578 1.258a9.337 9.337 0 00-4.578 6.223 9.337 9.337 0 001.879 5.183 9.337 9.337 0 006.816 2.53c.883 0 1.734-.132 2.54-.372M15 12.75a3 3 0 11-6 0 3 3 0 016 0z\" />\n    </svg>\n);\n\nexport const SparklesIcon: React.FC<IconProps> = (props) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.25 12l.813-2.846a4.5 4.5 0 00-3.09-3.09L13.125 5.25l-.813 2.846a4.5 4.5 0 00-3.09 3.09L6.375 12l2.846.813a4.5 4.5 0 003.09 3.09L13.125 18.75l.813-2.846a4.5 4.5 0 003.09-3.09L21.25 12l-2.846-.813a4.5 4.5 0 00-3.09-3.09L14.25 5.25\" />\n    </svg>\n);\n\nexport const DocumentChartBarIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 17.25v.001M12 17.25v.001M15 17.25v.001M18 17.25v.001M5.25 6H3v15h18V6h-2.25M5.25 6V3h13.5v3M12 3V1.5\" />\n  </svg>\n);\n\nexport const SquaresPlusIcon: React.FC<IconProps> = (props) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12.75 9.75v6.75m-6.75-3h13.5M3.75 3.75c0-1.036.84-1.875 1.875-1.875h13.5c1.036 0 1.875.84 1.875 1.875v13.5c0 1.036-.84 1.875-1.875-1.875h-13.5c-1.036 0-1.875-.84-1.875-1.875V3.75z\" />\n    </svg>\n);\n\nexport const BoltIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3.75 13.5l10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75z\" />\n  </svg>\n);\n\nexport const RocketLaunchIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15.59 14.37a6 6 0 01-5.84 7.38v-4.82m5.84-2.56a6 6 0 01-2.56 5.84m-2.28 2.28l-2.09-2.09a6 6 0 01-7.38-5.84c.1-.4.23-.78.39-1.15l2.09 2.09a3 3 0 004.24-4.24l-2.09-2.09c.37-.16.75-.29 1.15-.39a6 6 0 017.38 5.84c0 .8-.13 1.57-.37 2.28z\" />\n  </svg>\n);\n\nexport const ClipboardDocumentListIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n  </svg>\n);\n\nexport const EyeIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z\" />\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n  </svg>\n);\n\nexport const ScaleIcon: React.FC<IconProps> = (props) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 3v17.25m0 0c-1.472 0-2.882.265-4.185.75M12 20.25c1.472 0 2.882.265 4.185.75M18.75 4.97A48.416 48.416 0 0012 4.5c-2.291 0-4.545.16-6.75.47m13.5 0c1.01.143 2.01.317 3 .52m-3-.52c2.621.356 5.242.868 7.5 1.5m-7.5-1.5c-1.01-.143-2.01-.317-3-.52m0 0c-2.621-.356-5.242-.868-7.5-1.5m7.5 1.5c-1.472 0-2.882.265-4.185.75m16.5 0a48.416 48.416 0 01-16.5 0m16.5 0c-1.01.143-2.01.317-3 .52m-3-.52c-2.621.356-5.242.868-7.5 1.5m7.5-1.5c-1.472 0-2.882.265-4.185.75m0 0a48.416 48.416 0 01-16.5 0\" />\n    </svg>\n);\n\nexport const ShoppingBagIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15.75 10.5V6a3.75 3.75 0 10-7.5 0v4.5m11.356-1.993l1.263 12c.07.658-.463 1.243-1.119 1.243H4.25a1.125 1.125 0 01-1.12-1.243l1.264-12A1.125 1.125 0 015.513 7.5h12.974c.576 0 1.059.435 1.119 1.007zM8.625 10.5a.375.375 0 11-.75 0 .375.375 0 01.75 0zm7.5 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z\" />\n  </svg>\n);\n\nexport const StarIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M11.48 3.499a.562.562 0 011.04 0l2.125 5.111a.563.563 0 00.475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 00-.182.557l1.285 5.385a.562.562 0 01-.84.61l-4.725-2.885a.563.563 0 00-.586 0L6.982 21.54a.562.562 0 01-.84-.61l1.285-5.386a.562.562 0 00-.182-.557l-4.204-3.602a.563.563 0 01.321-.988l5.518-.442a.563.563 0 00.475-.345L11.48 3.5z\" />\n  </svg>\n);\n\nexport const CalendarDaysIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0h18M12 12.75h.008v.008H12v-.008z\" />\n  </svg>\n);\n\nexport const BrainIcon: React.FC<IconProps> = (props) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9.528 1.718a.75.75 0 01.162.819A8.97 8.97 0 009 6a9 9 0 009 9 8.97 8.97 0 003.463-.976.75.75 0 01.819.162l4.22 4.22a.75.75 0 01-.256 1.285l-8.5 3.036a.75.75 0 01-.623-.052L5.05 16.085a.75.75 0 01-.052-.623l3.036-8.5a.75.75 0 011.285-.256l4.22 4.22zM15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n    </svg>\n);\n\nexport const MapPinIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 10.5a3 3 0 11-6 0 3 3 0 016 0z\" />\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1115 0z\" />\n  </svg>\n);\n\nexport const GoogleIcon: React.FC<IconProps> = (props) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" {...props}>\n        <path fill=\"#4285F4\" d=\"M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12s5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24s8.955,20,20,20s20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z\" />\n        <path fill=\"#34A853\" d=\"M43.611,20.083H42V20H24v8h11.303c-0.792,2.447-2.233,4.562-4.087,6.098l5.657,5.657C42.848,36.236,44,32.135,44,28C44,25.341,43.862,22.65,43.611,20.083z\" />\n        <path fill=\"#FBBC05\" d=\"M16.039,30.098c-1.854-1.536-3-3.818-3-6.398s1.146-4.862,3-6.398V12.03C12.333,14.542,10,18.961,10,24s2.333,9.458,6.039,11.97V30.098z\" />\n        <path fill=\"#EA4335\" d=\"M24,44c5.166,0,9.86-1.977,13.409-5.192l-5.657-5.657C30.033,34.723,27.218,36,24,36c-5.223,0-9.649-3.341-11.303-8h-8.078C7.152,36.568,14.9,44,24,44z\" />\n    </svg>\n);\n\nexport const MetaIcon: React.FC<IconProps> = (props) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"url(#grad)\" {...props}>\n        <defs>\n            <linearGradient id=\"grad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                <stop offset=\"0%\" style={{stopColor: '#8a2be2', stopOpacity:1}} />\n                <stop offset=\"100%\" style={{stopColor: '#0000ff', stopOpacity:1}} />\n            </linearGradient>\n        </defs>\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10c2.76 0 5.26-1.12 7.07-2.93.39-.39.39-1.02 0-1.41l-1.41-1.41c-.39-.39-1.02-.39-1.41 0C14.98 17.54 13.56 18 12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6c1.56 0 2.98.46 4.24 1.27l-2.65 2.65c-.97.97-.29 2.58 1.09 2.58h6.25c.28 0 .5-.22.5-.5V6.07c0-1.38-1.61-2.07-2.58-1.09L16.2 6.76C14.74 5.09 12.87 4 11 4c-2.76 0-5.26 1.12-7.07 2.93-.39.39-.39-1.02 0 1.41l1.41 1.41c.39.39 1.02.39 1.41 0C8.02 8.46 9.44 8 11 8c3.31 0 6 2.69 6 6s-2.69 6-6 6z\" />\n        <path d=\"M12,2A10,10,0,1,0,22,12,10,10,0,0,0,12,2Zm6.2,14.8a.5.5,0,0,1-.71.71L12,12.71,6.51,18.2a.5.5,0,0,1-.71-.71L11.29,12,5.8,6.51a.5.5,0,0,1,.71-.71L12,11.29l5.49-5.49a.5.5,0,0,1,.71.71L12.71,12Z\" transform=\"translate(-1.1 -0.5) scale(1.15)\"/>\n    </svg>\n);\n\nexport const TikTokIcon: React.FC<IconProps> = (props) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\" {...props}>\n        <path d=\"M21.32,6.55,19.2,12.18a1.5,1.5,0,0,1-1.44,1.13h-4a1.5,1.5,0,0,1-1.5-1.5V3a1.5,1.5,0,0,1,1.5-1.5h4A1.5,1.5,0,0,1,19.2,2.68l2.12,5.63A1.5,1.5,0,0,1,21.32,6.55Zm-8.82-5a1.5,1.5,0,0,0-1.5,1.5V17.2a3.33,3.33,0,1,1-3.33-3.33h0a1.5,1.5,0,1,0-1.5-1.5A6.33,6.33,0,1,0,12.5,18.75V3A1.5,1.5,0,0,0,11,1.5Z\" fill=\"#25F4EE\"/>\n        <path d=\"M12.5,1.5a1.5,1.5,0,0,0-1.5,1.5V17.2a3.33,3.33,0,1,1-3.33-3.33h0a1.5,1.5,0,1,0-1.5-1.5A6.33,6.33,0,1,0,12.5,18.75V3A1.5,1.5,0,0,0,12.5,1.5Z\" fill=\"#FF0050\"/>\n        <path d=\"M21.32,6.55,19.2,12.18a1.5,1.5,0,0,1-1.44,1.13h-4a1.5,1.5,0,0,1-1.5-1.5V3a1.5,1.5,0,0,1,1.5-1.5h4A1.5,1.5,0,0,1,19.2,2.68l2.12,5.63A1.5,1.5,0,0,1,21.32,6.55Z\" fill=\"#000000\"/>\n    </svg>\n);\n\nexport const BriefcaseIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M20.25 14.15v4.02a2.25 2.25 0 01-2.25 2.25H6a2.25 2.25 0 01-2.25-2.25v-4.02m16.5 0M21 8.625v-1.925a2.25 2.25 0 00-2.25-2.25H5.25A2.25 2.25 0 003 6.7v1.925m18 0a2.25 2.25 0 01-2.25 2.25H5.25A2.25 2.25 0 013 8.625m18 0v-1.925a2.25 2.25 0 00-2.25-2.25H5.25A2.25 2.25 0 003 6.7v1.925M12 14.15V4.875\" />\n  </svg>\n);\n\nexport const ClipboardDocumentCheckIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n  </svg>\n);\n\nexport const TreasureChestIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M20.25 7.5l-.625 10.632a2.25 2.25 0 01-2.247 2.118H6.622a2.25 2.25 0 01-2.247-2.118L3.75 7.5M10 11.25h4M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125z\" />\n  </svg>\n);\n\nexport const CurrencyDollarIcon: React.FC<IconProps> = (props) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 6v12m-3-2.818l.879.659c1.171.879 3.07.879 4.242 0 1.172-.879 1.172-2.303 0-3.182C13.536 12.219 12.768 12 12 12c-.725 0-1.45-.22-2.003-.659-1.106-.879-1.106-2.303 0-3.182.79-.623 1.728-.946 2.697-.946 1.076 0 2.087.394 2.846 1.082l.879.659m0 0c-.015.01-.03.02-.046.03l-2.252 1.689a.75.75 0 01-.976 0l-2.252-1.689a.75.75 0 01.976-.03z\" />\n    </svg>\n);\n\nexport const ShareIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M7.217 10.907a2.25 2.25 0 100 2.186m0-2.186c.195.047.39.094.588.142m-1.172 2.044a2.25 2.25 0 01-1.172-2.044m1.172 2.044c.195-.047.39-.094.588-.142m0 0a2.25 2.25 0 100 2.186m0-2.186c1.135 0 2.196.39 3.018 1.043m-3.018-1.043c-1.135 0-2.196-.39-3.018-1.043m3.018 1.043a2.25 2.25 0 100-2.186m-3.018-1.043c1.135 0 2.196.39 3.018 1.043m3.018 1.043c.195.047.39.094.588.142\" />\n  </svg>\n);\n\nexport const ChevronDoubleLeftIcon: React.FC<IconProps> = (props) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M11.25 4.5l7.5 7.5-7.5 7.5m-6-15l7.5 7.5-7.5 7.5\" />\n    </svg>\n);\n\nexport const ChevronDoubleRightIcon: React.FC<IconProps> = (props) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12.75 19.5l-7.5-7.5 7.5-7.5m6 15l-7.5-7.5 7.5-7.5\" />\n    </svg>\n);\n\nexport const CursorArrowRaysIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.25 12l.813-2.846a4.5 4.5 0 00-3.09-3.09L13.125 5.25l-.813 2.846a4.5 4.5 0 00-3.09 3.09L6.375 12l2.846.813a4.5 4.5 0 003.09 3.09L13.125 18.75l.813-2.846a4.5 4.5 0 003.09-3.09L21.25 12l-2.846-.813a4.5 4.5 0 00-3.09-3.09z\" />\n  </svg>\n);\n\nexport const WandIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9.528 1.718a.75.75 0 01.162.819A8.97 8.97 0 009 6a9 9 0 009 9 8.97 8.97 0 003.463-.976.75.75 0 01.819.162l4.22 4.22a.75.75 0 01-.256 1.285l-8.5 3.036a.75.75 0 01-.623-.052L5.05 16.085a.75.75 0 01-.052-.623l3.036-8.5a.75.75 0 011.285-.256l4.22 4.22zM15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n  </svg>\n);\n\nexport const ChartBarSquareIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M7.5 8.25h9m-9 3H12m-9.75 1.51c0 1.6 1.123 2.994 2.707 3.227 1.129.166 2.27.293 3.423.379.35.026.67.21.865.501L12 21l2.755-4.133a1.14 1.14 0 01.865-.501 48.172 48.172 0 003.423-.379c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0012 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018z\" />\n  </svg>\n);\n\nexport const CubeTransparentIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M21 7.5l-9-5.25L3 7.5m18 0l-9 5.25m9-5.25v9l-9 5.25M3 7.5l9 5.25M3 7.5v9l9 5.25m0-9v9\" />\n  </svg>\n);\n\nexport const PaperAirplaneIcon: React.FC<IconProps> = (props) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5\" />\n    </svg>\n);\n\nexport const ChatBubbleBottomCenterTextIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M8.625 12a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0H8.25m4.125 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0H12m4.125 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0h-.375M21 12c0 4.556-4.03 8.25-9 8.25a9.764 9.764 0 01-2.555-.337A5.972 5.972 0 015.41 20.97a5.969 5.969 0 01-.474-.065 4.48 4.48 0 00.978-2.025c.09-.457-.133-.901-.467-1.226C3.93 16.178 3 14.189 3 12c0-4.556 4.03-8.25 9-8.25s9 3.694 9 8.25z\" />\n  </svg>\n);\n\nexport const GlobeAltIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 21a9.004 9.004 0 008.716-6.747M12 21a9.004 9.004 0 01-8.716-6.747M12 21c2.485 0 4.5-4.03 4.5-9S14.485 3 12 3m0 18c-2.485 0-4.5-4.03-4.5-9S9.515 3 12 3m0 0a8.997 8.997 0 017.843 4.582M12 3a8.997 8.997 0 00-7.843 4.582m15.686 0A11.953 11.953 0 0112 10.5c-2.998 0-5.74-1.1-7.843-2.918m15.686 0A8.959 8.959 0 0121 12c0 .778-.099 1.533-.284 2.253m0 0A11.953 11.953 0 0112 16.5c-2.998 0-5.74-1.1-7.843-2.918m15.686 0A8.959 8.959 0 0121 12c0 .778-.099 1.533-.284 2.253M18.716 14.253A8.959 8.959 0 0112 12c-1.344 0-2.612.231-3.798.654\" />\n  </svg>\n);\n\nexport const TrendUpIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M2.25 18L9 11.25l4.306 4.307a11.95 11.95 0 015.814-5.519l2.74-1.22m0 0l-3.182 3.182m3.182-3.182v3.182\" />\n  </svg>\n);\n\nexport const ExclamationTriangleIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z\" />\n  </svg>\n);\n\nexport const TrophyIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M16.5 18.75h-9m9 0a3 3 0 013 3h-15a3 3 0 013-3m9 0v-3.375c0-.621-.503-1.125-1.125-1.125h-.871M7.5 18.75v-3.375c0-.621.504-1.125 1.125-1.125h.872m5.007 0H9.497m5.007 0a7.5 7.5 0 10-10.015 0m5.007 0a3.375 3.375 0 11-6.75 0m6.75 0a3.375 3.375 0 10-6.75 0\" />\n  </svg>\n);\n\nexport const SkullIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 6.75a5.25 5.25 0 015.25 5.25c0 3.33-2.69 6.033-6 6.033S5.25 15.33 5.25 12a5.25 5.25 0 015.25-5.25zm0 0V3m0 3.75c-1.32 0-2.5.5-3.375 1.375M12 6.75c1.32 0 2.5.5 3.375 1.375m-6.75 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zM12 12a2.25 2.25 0 100-4.5 2.25 2.25 0 000 4.5z\" />\n  </svg>\n);\n\nexport const LinkIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M13.19 8.688a4.5 4.5 0 011.242 7.244l-4.5 4.5a4.5 4.5 0 01-6.364-6.364l1.757-1.757m13.35-.622l1.757-1.757a4.5 4.5 0 00-6.364-6.364l-4.5 4.5a4.5 4.5 0 001.242 7.244\" />\n  </svg>\n);\n\nexport const XMarkIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\n  </svg>\n);\n\nexport const ShoppingCartIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M2.25 3h1.386c.51 0 .955.343 1.087.835l.383 1.437M7.5 14.25a3 3 0 00-3 3h15.75m-12.75-3h11.218c.51 0 .962-.328 1.093-.826l3.821-9.552A.75.75 0 0018.25 3H4.23z\" />\n  </svg>\n);\n\nexport const EnvelopeOpenIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M21.75 9v.906a2.25 2.25 0 01-1.183 1.981l-6.478 3.488a2.25 2.25 0 01-2.18 0l-6.478-3.488A2.25 2.25 0 012.25 9.906V9m19.5 0a2.25 2.25 0 00-2.25-2.25H4.5A2.25 2.25 0 002.25 9m19.5 0v.906a2.25 2.25 0 01-1.183 1.981l-6.478 3.488a2.25 2.25 0 01-2.18 0l-6.478-3.488A2.25 2.25 0 012.25 9.906V9\" />\n  </svg>\n);\n\nexport const LifebuoyIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 9.75a2.25 2.25 0 110-4.5 2.25 2.25 0 010 4.5zM12 19.5a2.25 2.25 0 110-4.5 2.25 2.25 0 010 4.5zM21 12a9 9 0 11-18 0 9 9 0 0118 0zM5.25 12a6.75 6.75 0 1113.5 0 6.75 6.75 0 01-13.5 0z\" />\n  </svg>\n);\n\nexport const MegaphoneIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M10.5 1.5H8.25A2.25 2.25 0 006 3.75v16.5a2.25 2.25 0 002.25 2.25h7.5A2.25 2.25 0 0018 20.25V3.75a2.25 2.25 0 00-2.25-2.25H13.5m-3 0V3m3 0V3m-3 0h3m-3 18v-3m3 3v-3m-3-12h3\" />\n  </svg>\n);\n\nexport const CreditCardIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M2.25 8.25h19.5M2.25 9h19.5m-16.5 5.25h6m-6 2.25h3m-3.75 3h15a2.25 2.25 0 002.25-2.25V6.75a2.25 2.25 0 00-2.25-2.25h-15a2.25 2.25 0 00-2.25 2.25v10.5A2.25 2.25 0 004.5 20.25z\" />\n  </svg>\n);\n\nexport const QuestionMarkCircleIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9 5.25h.008v.008H12v-.008z\" />\n  </svg>\n);\n\nexport const DocumentTextIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z\" />\n  </svg>\n);\n\nexport const PresentationChartLineIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3.375 19.5h17.25m-17.25 0a1.125 1.125 0 01-1.125-1.125M3.375 19.5v-1.5M16.5 5.25L12 9.75M16.5 5.25l-4.5 4.5m4.5-4.5v3m-4.5-3l-4.5 4.5M3.375 5.25v3\" />\n  </svg>\n);\n\nexport const PresentationChartBarIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3.375 3.375c-1.125 1.125-1.125 2.946 0 4.071M3.375 20.625c-1.125-1.125-1.125-2.946 0-4.071M12 3.375c-1.125 1.125-1.125 2.946 0 4.071M12 20.625c-1.125-1.125-1.125-2.946 0-4.071M3.375 12c1.125-1.125 2.946-1.125 4.071 0M20.625 12c-1.125 1.125-2.946 1.125-4.071 0M12 12c-1.125 1.125-1.125 2.946 0 4.071M12 12c1.125-1.125 2.946-1.125 4.071 0M12 12c1.125 1.125 1.125 2.946 0 4.071M12 12c-1.125-1.125-2.946-1.125-4.071 0M12 12c1.125 1.125 1.125 2.946 0 4.071\" />\n  </svg>\n);\n\n\nexport const EnvelopeIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M21.75 6.75v10.5a2.25 2.25 0 01-2.25 2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-7.5 4.615a2.25 2.25 0 01-2.36 0L3.32 8.91a2.25 2.25 0 01-1.07-1.916V6.75\" />\n  </svg>\n);\n\nexport const ArrowRightIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3\" />\n  </svg>\n);\n\nexport const BellIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M14.857 17.082a23.848 23.848 0 005.454-1.31A8.967 8.967 0 0118 9.75v-.7V9A6 6 0 006 9v.75a8.967 8.967 0 01-2.31 5.632l-1.32.88A12.11 12.11 0 002.25 18.75h19.5a12.11 12.11 0 00-2.31-2.018l-1.32-.88z\" />\n  </svg>\n);\n\nexport const UserPlusIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19 7.5v3m0 0v3m0-3h3m-3 0h-3m-2.25-4.125a3.375 3.375 0 11-6.75 0 3.375 3.375 0 016.75 0zM4 19.235v-.11a6.375 6.375 0 0112.75 0v.109A12.318 12.318 0 0110.5 21.75c-2.636 0-5.053-.94-6.9-2.515z\" />\n  </svg>\n);\n\nexport const ChartPieIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M10.5 6a7.5 7.5 0 107.5 7.5h-7.5V6z\" />\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M13.5 10.5H21A7.5 7.5 0 0013.5 3v7.5z\" />\n  </svg>\n);\n\nexport const KeyIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15.75 5.25a3 3 0 013 3m3 0a6 6 0 01-7.029 5.912c-.563-.097-1.159.026-1.563.43L10.5 17.25H8.25v2.25H6v2.25H2.25v-2.818c0-.597.237-1.17.659-1.591l6.499-6.499c.404-.404.527-1 .43-1.563A6 6 0 1121.75 8.25z\" />\n  </svg>\n);\n\nexport const ServerStackIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6.75 7.5l3 2.25-3 2.25m4.5 0h3m-9 8.25h13.5A2.25 2.25 0 0021 18V6a2.25 2.25 0 00-2.25-2.25H5.25A2.25 2.25 0 003 6v12a2.25 2.25 0 002.25 2.25z\" />\n  </svg>\n);\n\nexport const DevicePhoneMobileIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M10.5 1.5H8.25A2.25 2.25 0 006 3.75v16.5a2.25 2.25 0 002.25 2.25h7.5A2.25 2.25 0 0018 20.25V3.75a2.25 2.25 0 00-2.25-2.25H13.5m-3 0h3m-3 18h3\" />\n  </svg>\n);\n\nexport const NewspaperIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 7.5h1.5m-1.5 3h1.5m-7.5 3h7.5m-7.5 3h7.5m3-9h3.375c.621 0 1.125.504 1.125 1.125V18a2.25 2.25 0 01-2.25 2.25M16.5 7.5V18a2.25 2.25 0 002.25 2.25M16.5 7.5h-1.5m-1.5 0h-3m-3.75 0H5.25m7.5 0v11.25c0 .621-.504 1.125-1.125 1.125h-9.75A1.125 1.125 0 013 18.75V7.5M3 7.5h3.75m0 0h4.5M3 7.5v-1.5A2.25 2.25 0 015.25 3.75h9.75c1.24 0 2.25.75 2.25 2.25v1.5\" />\n  </svg>\n);\n\nexport const CheckBadgeIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 12.75L11.25 15 15 9.75M21 12c0 1.268-.63 2.4-1.593 3.068a3.745 3.745 0 01-1.043 3.296 3.745 3.745 0 01-3.296 1.043A3.745 3.745 0 0112 21c-1.268 0-2.4-.63-3.068-1.593a3.746 3.746 0 01-3.296-1.043 3.745 3.745 0 01-1.043-3.296A3.745 3.745 0 013 12c0-1.268.63-2.4 1.593-3.068a3.745 3.745 0 011.043-3.296 3.746 3.746 0 013.296-1.043A3.746 3.746 0 0112 3c1.268 0 2.4.63 3.068 1.593a3.746 3.746 0 013.296 1.043 3.746 3.746 0 011.043 3.296A3.745 3.745 0 0121 12z\" />\n  </svg>\n);\n\nexport const BuildingOffice2Icon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3.75 21h16.5M4.5 3h15M5.25 3v18m13.5-18v18M9 6.75h6M9 11.25h6m-6 4.5h6M9 21v-2.25a2.25 2.25 0 012.25-2.25h1.5A2.25 2.25 0 0115 18.75V21\" />\n  </svg>\n);\n\nexport const FunnelIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 3c-1.933 0-3.719.53-5.25 1.453l-2.475 1.65A1.5 1.5 0 003 7.525V18a1.5 1.5 0 002.25 1.303l2.475-1.65C9.281 18.47 11.067 18 12 18s2.719.47 4.25 1.353l2.475 1.65A1.5 1.5 0 0021 18V7.525a1.5 1.5 0 00-.75-1.303l-2.475-1.65C15.719 3.53 13.933 3 12 3z\" />\n  </svg>\n);\n\nexport const HeartIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z\" />\n  </svg>\n);\n\nexport const InformationCircleIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.852l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z\" />\n  </svg>\n);\n\nexport const ArchiveBoxIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M20.25 7.5l-.625 10.632a2.25 2.25 0 01-2.247 2.118H6.622a2.25 2.25 0 01-2.247-2.118L3.75 7.5M10 11.25h4M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125z\" />\n  </svg>\n);\n\nexport const TagIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z\" />\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 6h.008v.008H6V6z\" />\n  </svg>\n);\n\nexport const ShieldCheckIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 12.75L11.25 15 15 9.75m-3-7.036A11.959 11.959 0 013.598 6 11.99 11.99 0 003 9.749c0 5.592 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.31-.21-2.571-.598-3.751h-.152c-3.196 0-6.1-1.248-8.25-3.286Z\" />\n  </svg>\n);\n\nexport const PlusIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n  </svg>\n);\n\nexport const DeviceDesktopIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 17.25v.001M9 17.25h.001M9 17.25v.001M12 17.25v.001M12 17.25h.001M12 17.25v.001M15 17.25v.001M15 17.25h.001M15 17.25v.001M4.5 5.25h15a2.25 2.25 0 012.25 2.25v6.75a2.25 2.25 0 01-2.25 2.25H4.5a2.25 2.25 0 01-2.25-2.25V7.5a2.25 2.25 0 012.25-2.25z\" />\n  </svg>\n);\n\nexport const PencilIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10\" />\n  </svg>\n);\n\nexport const ChatBubbleLeftRightIcon: React.FC<IconProps> = (props) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193l-3.72.372a3.75 3.75 0 01-3.693-3.693l.372-3.72c.093-1.133.957-1.98 2.097-1.98h4.286a2.25 2.25 0 00-1.28-2.097M3.75 12.25c0-1.136.847-2.1 1.98-2.193l3.72-.372a3.75 3.75 0 013.693 3.693l-.372 3.72c-.093 1.133-.957 1.98-2.097 1.98H5.848a2.25 2.25 0 01-2.098-2.25v-4.286c0-.97.616-1.813 1.5-2.097z\" />\n  </svg>\n);\n\nexport const WrenchScrewdriverIcon: React.FC<IconProps> = (props) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M11.42 15.17 17.25 21A2.652 2.652 0 0 0 21 17.25l-5.877-5.877M11.42 15.17l2.496-3.03c.317-.384.74-.626 1.208-.766M11.42 15.17 4.655 5.653a2.548 2.548 0 1 1 3.586-3.586l6.837 5.63m5.108-.233c.55-.164 1.163-.188 1.743-.14a4.5 4.5 0 0 0 4.476-4.476c.351-1.511-.355-3.012-1.83-3.475C20.213 1.83 18.71 1.125 17.25 1.5c-1.48.36-2.824 1.23-3.376 2.618a4.5 4.5 0 0 0-.14 1.743c-.046.58.123 1.164.384 1.705M12 15.17a4.5 4.5 0 0 1-4.476 4.476c-1.511.355-3.012-.355-3.475-1.83C1.83 14.787 1.125 13.284 1.5 11.82c.36-1.48 1.23-2.824 2.618-3.376a4.5 4.5 0 0 1 1.743-.14c.58.046 1.164-.123 1.705-.384m-3.03 2.496C9.17 11.04 8.8 11.42 8.5 11.75c-.3.33-.583.68-.833 1.05\" />\n    </svg>\n);\n\nexport const Bars3Icon: React.FC<IconProps> = (props) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" {...props}>\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5\" />\n    </svg>\n);","size_bytes":39029},"attached_assets/index_1753609852222.tsx":{"content":"\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\nif (!rootElement) {\n  throw new Error(\"Kök eleman bulunamadı.\");\n}\n\nconst root = ReactDOM.createRoot(rootElement);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n","size_bytes":336},"attached_assets/translations_1753609852222.ts":{"content":"\n\nimport { Page } from './types';\n\nexport const translations: {\n    [lang in 'tr' | 'en']: {\n        appName: string;\n        pages: { [key in Page]: string };\n        navHeaders: {\n            general: string;\n            analysis: string;\n            cro: string;\n            channels: string;\n            management: string;\n            configuration: string;\n        },\n        sidebar: {\n          collapseMenu: string;\n          expandMenu: string;\n        },\n        header: {\n            selectLanguage: string;\n        },\n        pageContent: { [page: string]: { [key: string]: any } }\n    }\n} = {\n    tr: {\n        appName: 'Pazar Zekası',\n        pages: {\n            [Page.Dashboard]: 'Dashboard',\n            [Page.MarketAnalysis]: 'Pazar Analizi',\n            [Page.CompetitorAnalysis]: 'Rakip Takibi',\n            [Page.ImpactAnalysis]: 'Atıflandırma Motoru',\n            [Page.Strategy]: 'Strateji',\n            [Page.Creative]: 'Kreatif',\n            [Page.Reports]: 'Raporlar',\n            [Page.Opportunities]: 'Fırsatlar',\n            [Page.Scenarios]: 'Senaryolar',\n            [Page.Google]: 'Google Performansı',\n            [Page.Meta]: 'Meta Performansı',\n            [Page.TikTok]: 'TikTok Performansı',\n            [Page.Audiences]: 'Hedef Kitleler',\n            [Page.Customers]: 'Müşteriler',\n            [Page.People]: 'Kişiler',\n            [Page.Products]: 'Ürünler',\n            [Page.Loyalty]: 'Sadakat',\n            [Page.Autopilot]: 'Otopilot',\n            [Page.Actions]: 'Aksiyonlar',\n            [Page.Tasks]: 'Görevler',\n            [Page.Ekip]: 'Ekip',\n            [Page.Automations]: 'Otomatik Uygulamalar',\n            [Page.Connections]: 'Bağlantılar',\n            [Page.Settings]: 'Ayarlar',\n            [Page.AudienceProfitability]: 'Kitle Kârlılığı',\n            [Page.Profitability]: 'Kârlılık Paneli',\n            [Page.Collaborations]: 'İş Birlikleri',\n            [Page.TouchpointAnalysis]: 'Touchpoint Tespiti',\n            [Page.ConversionWizard]: 'Dönüşüm Sihirbazı',\n            [Page.KpiAnalysis]: 'KPI Analizi',\n            [Page.GemiAI]: 'Gemi AI',\n            [Page.MediaPlan]: 'Medya Planı',\n        },\n        navHeaders: {\n            general: 'Genel',\n            analysis: 'Analiz',\n            cro: 'CRO',\n            channels: 'Kanallar',\n            management: 'Yönetim',\n            configuration: 'Yapılandırma',\n        },\n        sidebar: {\n          collapseMenu: 'Menüyü Daralt',\n          expandMenu: 'Menüyü Genişlet',\n        },\n        header: {\n            selectLanguage: 'Dil seç',\n        },\n        pageContent: {\n             mediaPlan: {\n                title: 'Akıllı Medya Planı',\n                description: 'Aylık reklam bütçenizi girin ve yapay zekanın, marka profilinize özel olarak huni bazlı bir medya planı oluşturmasını izleyin.',\n                budget_input_title: '1. Adım: Aylık Bütçenizi Belirleyin',\n                budget_placeholder: 'Örn: 50000',\n                button_generate: 'Akıllı Plan Oluştur',\n                button_loading: 'Plan Oluşturuluyor...',\n                error_budget: 'Lütfen geçerli bir bütçe girin.',\n                error_api: 'Plan oluşturulurken bir hata oluştu. Lütfen tekrar deneyin.',\n                loading_text: 'Yapay zeka, markanız için en uygun bütçe dağılımını analiz ediyor...',\n                rationale_title: 'Stratejik Gerekçe',\n                funnel_title: 'Huni Dağılımı',\n                breakdown_title: 'Kanal Bazında Bütçe Dağılımı',\n                table_headers: {\n                    channel: 'Kanal',\n                    budget: 'Bütçe',\n                    funnel_stage: 'Huni Aşaması',\n                    estimated_kpi: 'Tahmini Sonuç (KPI)',\n                },\n                funnel_stages: {\n                    awareness: 'Farkındalık',\n                    consideration: 'Değerlendirme',\n                    conversion: 'Dönüşüm',\n                },\n                button_approve: 'Planı Onayla ve Aktive Et',\n            },\n            dashboard: {\n                customize_dashboard: 'Panoyu Özelleştir',\n                save_layout: 'Düzeni Kaydet',\n                add_widget: 'Widget Ekle',\n                date_filters: {\n                    '7d': 'Son 7 Gün',\n                    '30d': 'Son 30 Gün',\n                    '90d': 'Son 90 Gün',\n                },\n                platform_filters: {\n                    'all': 'Tüm Platformlar',\n                    'google': 'Google',\n                    'meta': 'Meta',\n                    'tiktok': 'TikTok',\n                },\n                widget_titles: {\n                    statCards: 'Genel Bakış KPI\\'ları',\n                    trafficChart: 'Website Trafiği',\n                    alerts: 'Nöbetçi Asistan Uyarıları',\n                    conversionChart: 'Dönüşüm Oranları',\n                    audienceProfitability: 'Kitle Kârlılığı Özeti'\n                },\n                add_widget_modal_title: 'Panoya Widget Ekle',\n                all_widgets_on_dashboard: 'Tüm widget\\'lar zaten panonuzda.',\n                totalVisitors: 'Toplam Ziyaretçi',\n                visitors: 'Ziyaretçi',\n                conversionRate: 'Dönüşüm Oranı',\n                newCustomers: 'Yeni Müşteriler',\n                revenue: 'Gelir',\n                sinceLastPeriod: 'önceki döneme göre',\n                visitor: 'Ziyaretçi',\n                rate: 'Oran',\n                goldenAudience: 'Altın Kitle',\n                moneyBurnerAudience: 'Para Yakan Kitle',\n                detailedAnalysis: 'Detaylı Analiz',\n                poas: 'POAS',\n                current: 'Mevcut',\n                normal: 'Normal',\n                goldenAudienceDetails: 'IG - Benzer Kitle (Satın Alanlar %1)',\n                moneyBurnerAudienceDetails: 'FB - İlgi Alanı (Moda Blogları)',\n                alerts: {\n                    alert1_metric: 'Google Ads TBM',\n                    alert1_change: '%250 arttı',\n                    alert1_current: '₺10.5',\n                    alert1_normal: '₺2.0 - ₺3.5',\n                    alert1_time: '2 saat önce',\n                    alert2_metric: 'Ana Sayfa Yüklenme Süresi',\n                    alert2_change: '%80 yavaşladı',\n                    alert2_current: '5.2s',\n                    alert2_normal: '1.5s - 2.8s',\n                    alert2_time: 'dün saat 18:30',\n                    alert3_metric: 'En Çok Satan Ürün Dönüşüm Oranı',\n                    alert3_change: '%45 düştü',\n                    alert3_current: '2.1%',\n                    alert3_normal: '3.8% - 5.5%',\n                    alert3_time: '3 gün önce',\n                },\n            },\n            marketAnalysis: {\n                title: 'Yapay Zeka Destekli Pazar Analizi',\n                description: 'Analiz etmek istediğiniz pazar, ürün veya sektör hakkında bir konu girin.',\n                placeholder: 'Örn: Türkiye\\'deki elektrikli scooter pazarı',\n                button: 'Analiz Oluştur',\n                buttonLoading: 'Analiz Ediliyor...',\n                errorPrompt: 'Lütfen bir konu veya sektör girin.',\n                errorApi: 'Analiz oluşturulurken bir hata oluştu. Lütfen tekrar deneyin.',\n                loading: 'Analiz oluşturuluyor...',\n                executiveSummary: 'Yönetici Özeti',\n                mainTrends: 'Ana Trendler',\n                opportunities: 'Fırsatlar',\n                risks: 'Riskler',\n                targetAudience: 'Hedef Kitle',\n                competitorAnalysis: 'Rakip Analizi',\n                webResources: 'için Web Kaynakları',\n            },\n            settings: {\n                profileSettings: 'Profil Ayarları',\n                name: 'İsim',\n                namePlaceholder: 'Demo Kullanıcı',\n                email: 'E-posta',\n                emailPlaceholder: 'demo@ornek.com',\n                saveChanges: 'Değişiklikleri Kaydet',\n                notificationSettings: 'Bildirim Ayarları',\n                weeklyReports: 'Haftalık Rapor E-postaları',\n                instantAlerts: 'Anlık Trend Uyarıları',\n            },\n            connections: {\n                title: 'Platform Bağlantıları',\n                description: 'Veri kaynaklarınızı ve pazarlama platformlarınızı bağlayarak analizlerinizi zenginleştirin ve tüm verilerinizi tek bir yerden yönetin.',\n                ga: 'Web sitesi trafiği ve kullanıcı davranış verileri.',\n                meta: 'Reklam kampanyası performansı ve kitle verileri.',\n                gAds: 'Arama motoru ve görüntülü reklam ağı verileri.',\n                tiktok: 'TikTok reklam kampanyası metrikleri ve analizleri.',\n                connected: 'Bağlı',\n                connect: 'Bağlan',\n            },\n            onboarding: {\n                mainTitle: 'Markanızı Tanıyalım',\n                subTitle: 'Size en uygun analizleri sunabilmemiz için birkaç kısa soru.',\n                step1Title: 'İş modeliniz nedir?',\n                step2Title: 'Hangi sektörde faaliyet gösteriyorsunuz?',\n                step3Title: 'Birincil müşterileriniz kimler?',\n                step4Title: 'Markanız ne kadar süredir faaliyette?',\n                step5Title: 'Şirketinizin büyüklüğü nedir?',\n                step6Title: 'Web sitenizin adresi nedir?',\n                step7Title: 'Aylık ortalama cironuz ne kadar?',\n                step8Title: 'Aylık ortalama reklam bütçeniz ne kadar?',\n                step9Title: 'Ana rakipleriniz kimler?',\n                step10Title: 'İdeal hedef kitlenizi birkaç kelimeyle nasıl tanımlarsınız?',\n                step11Title: 'Markanızın iletişim dili (sesi) nasıldır?',\n                step12Title: 'Şu anki en önemli pazarlama hedefiniz nedir?',\n                competitorsPlaceholder: 'rakip1.com, rakip2.com, ...',\n                audiencePlaceholder: 'Örn: 25-35 yaş arası, büyük şehirlerde yaşayan, teknoloji ve sürdürülebilirliğe önem veren genç profesyoneller.',\n                businessModels: { ecommerce: 'E-Ticaret', saas: 'SaaS / Yazılım', service: 'Hizmet Sağlayıcı', mobile: 'Mobil Uygulama', media: 'İçerik / Medya' },\n                industries: { fashion: 'Moda & Giyim', health: 'Sağlık & Wellness', tech: 'Teknoloji & Yazılım', finance: 'Finans & Sigorta', food: 'Yiyecek & İçecek', education: 'Eğitim' },\n                customerTypes: { b2c: 'Bireysel Tüketiciler (B2C)', b2b: 'Diğer İşletmeler (B2B)', both: 'Her İkisi de' },\n                maturities: { idea: 'Fikir / Lansman Öncesi', new: 'Yeni Kurulmuş (0-1 Yıl)', growing: 'Büyüyen (1-5 Yıl)', established: 'Oturmuş (5+ Yıl)' },\n                companySizes: { solo: 'Tek Kişilik', s: '2-10 Çalışan', m: '11-50 Çalışan', l: '51-200 Çalışan', xl: '200+ Çalışan' },\n                brandVoices: { professional: 'Profesyonel & Kurumsal', friendly: 'Samimi & Arkadaşça', fun: 'Esprili & Eğlenceli', technical: 'Teknik & Bilgilendirici' },\n                marketingGoals: { awareness: 'Marka Bilinirliği', leadGen: 'Potensiyel Müşteri Yaratma', sales: 'Satışları Artırma', loyalty: 'Müşteri Sadakatini Artırma' },\n                back: 'Geri',\n                next: 'İleri',\n                complete: 'Kurulumu Tamamla',\n                collectiveIntelligence: {\n                    activating: 'Kolektif Zeka Ağı etkinleştiriliyor...',\n                    title: 'Kolektif Zeka Aktif!',\n                    description: 'Yapay zeka asistanınız, sizin gibi anonimleştirilmiş yüzlerce markanın kolektif tecrübesiyle önceden eğitildi. Sıfırdan değil, sektörünüzün bilgeliğiyle başlıyorsunuz.',\n                    insightsTitle: 'Size Özel Başlangıç İçgörüleri:',\n                    insights: {\n                        'Moda & Giyim': [ \"Video reklamlar, bu sektördeki yeni müşteri kazanımı için en yüksek ROAS'a sahiptir.\", \"Instagram Hikayeleri, 25-34 yaş arası kadın hedef kitlesinde en yüksek etkileşimi sağlıyor.\", \"Sepet terk etme oranları, 'ücretsiz kargo' sunulduğunda ortalama %20 azalmaktadır.\" ],\n                        'Teknoloji & Yazılım': [ \"Google Arama Ağı reklamları, B2B potansiyel müşteri bulma konusunda en etkili kanaldır.\", \"LinkedIn'de yayınlanan vaka analizleri, dönüşüm oranlarını %15 artırabilir.\", \"Ücretsiz deneme süresi sunmak, müşteri yaşam boyu değerini ortalama %30 artırır.\" ],\n                        'Sağlık & Wellness': [ \"Facebook grupları ve topluluk yönetimi, güven oluşturmak için kritik öneme sahiptir.\", \"Eğitici blog içerikleri, organik trafikte en yüksek dönüşümü sağlayan içerik türüdür.\", \"Influencer iş birlikleri, ürün güvenilirliğini artırmada oldukça etkilidir.\" ],\n                        'Yiyecek & İçecek': [ \"Kullanıcı tarafından oluşturulan içerikler (UGC), sosyal medya etkileşimini en çok artıran faktördür.\", \"Mevsimsel kampanyalar ve sınırlı süreli ürünler, satışlarda ani artışlar yaratır.\", \"Sadakat programları, müşteri tekrar satın alma oranını %40'a kadar artırabilir.\" ],\n                        'default': [ \"Yeniden pazarlama kampanyaları genellikle en yüksek yatırım getirisini sağlar.\", \"E-posta pazarlaması, müşteri sadakatini artırmak için en uygun maliyetli yoldur.\", \"Mobil uyumlu bir web sitesi, dönüşüm oranlarını %50'ye kadar artırabilir.\" ]\n                    },\n                    finishButton: \"Platforma Git\"\n                }\n            },\n            aiAssistant: {\n                greeting: \"Merhaba! Ben Zek, sizin yapay zeka asistanınız. Şu anda\",\n                greeting_cont: \"sayfasındasınız. Size bu sayfadaki verileri yorumlama veya genel konularda yardımcı olabilirim. Ne öğrenmek istersiniz?\",\n                placeholder: \"Zek'e bir soru sorun...\",\n                close: \"Asistanı Kapat\",\n                title: \"Asistan Zek\",\n                error: \"Üzgünüm, bir hata oluştu. Lütfen biraz sonra tekrar deneyin.\",\n                context: \"Kullanıcı bağlamı:\",\n                question: \"Kullanıcının sorusu:\",\n                system_prompt: \"Bu bağlamı dikkate alarak, yardımcı ve samimi bir pazarlama asistanı gibi cevap ver. Cevabını Markdown formatında, özellikle **kalın** metinleri kullanarak daha okunabilir hale getir. Cevapların kısa ve öz olsun.\"\n            },\n            competitorAnalysis: {\n                title: 'Rakip Takibi',\n                description: 'Rakiplerinizin performansını izleyin, stratejilerini analiz edin ve pazar payınızı artırmak için fırsatları yakalayın.',\n                placeholder: 'Örn: rakipsite.com',\n                add_button: 'Rakip Ekle',\n                remove: 'Kaldır',\n                monthly_traffic: 'Aylık Trafik',\n                social_engagement: 'Sosyal Etkileşim',\n                keywords: 'Anahtar Kelime',\n                traffic: 'Trafik',\n            },\n            creative: {\n                title: 'Kreatif Galerisi',\n                description: 'Kampanyalarınızda kullandığınız görsel ve video kreatiflerini görüntüleyin ve performanslarını analiz edin.',\n                ctr: 'CTR',\n                conversions: 'Dönüşüm',\n            },\n            strategy: {\n                title: 'Pazarlama Stratejileri',\n                description: 'Şirketinizin pazarlama hedeflerine ulaşmak için oluşturulan stratejik planlar.',\n                create_button: 'Yeni Strateji Oluştur',\n                responsible: 'Sorumlu',\n                last_update: 'Son Güncelleme',\n                mock: {\n                    strategy1_title: '2024 3. Çeyrek Büyüme Stratejisi',\n                    strategy2_title: 'Yeni Ürün Lansman Planı (Proje Phoenix)',\n                    strategy3_title: 'İçerik Pazarlaması Yol Haritası',\n                    strategy4_title: 'Sosyal Medya Etkileşim Stratejisi',\n                    strategy5_title: 'SEO Optimizasyon Planı',\n                    status_active: 'Aktif',\n                    status_draft: 'Taslak',\n                    status_archived: 'Arşivlendi',\n                    status_review: 'Gözden Geçiriliyor',\n                    update_1w: '1 hafta önce',\n                    update_2d: '2 gün önce',\n                    update_3w: '3 hafta önce',\n                    update_2m: '2 ay önce',\n                    update_yesterday: 'dün',\n                    owner_marketing: 'Pazarlama Ekibi',\n                    owner_product_m: 'Ürün Pazarlama',\n                    owner_content: 'İçerik Ekibi',\n                    owner_social: 'Sosyal Medya Ekibi',\n                    owner_seo: 'SEO Uzmanı',\n                }\n            },\n            audiences: {\n                title: 'Hedef Kitleler',\n                description: 'Pazarlama kampanyalarınız için tanımlanmış hedef kitle segmentleri.',\n                create_button: 'Yeni Kitle Oluştur',\n                header_name: 'Kitle Adı',\n                header_desc: 'Açıklama',\n                header_size: 'Tahmini Boyut',\n                header_status: 'Durum',\n                mock: {\n                    audience1_name: 'Teknoloji Meraklısı Genç Profesyoneller',\n                    audience1_desc: '25-35 yaş arası, büyük şehirlerde yaşayan, teknoloji ve inovasyona ilgi duyanlar.',\n                    audience2_name: 'Sürdürülebilir Yaşam Savunucuları',\n                    audience2_desc: 'Çevre dostu ürünleri tercih eden, organik beslenen, 30-45 yaş arası bireyler.',\n                    audience3_name: 'E-spor ve Oyun Tutkunları',\n                    audience3_desc: '18-28 yaş arası, rekabetçi oyunlar oynayan ve canlı yayınları takip eden gençler.',\n                    audience4_name: 'Yeni Ebeveynler',\n                    audience4_desc: '0-3 yaş arası çocuğu olan, bebek ürünleri ve aile aktiviteleri arayan çiftler.',\n                    audience5_name: 'Lüks Tüketim Alışkanlığı Olanlar',\n                    audience5_desc: 'Yüksek gelir grubunda, marka ve kaliteye önem veren 40+ yaş bireyler.',\n                    status_active: 'Aktif',\n                    status_testing: 'Test Ediliyor',\n                    status_inactive: 'Pasif',\n                }\n            },\n            impactAnalysis: {\n                title: 'Atıflandırma Motoru',\n                attributionTitle: 'Veri Odaklı Atıflandırma Motoru',\n                attributionDescription: 'Son tıklama yanılgısının ötesine geçin ve her kanalın satışlarınıza olan gerçek katkısını görün.',\n                markovTooltip: 'Markov Zincirleri: Müşteri yolculuklarını analiz ederek, bir kanaldan diğerine geçiş olasılıklarını haritalar ve bir kanalın yokluğunun satışları nasıl etkileyeceğini hesaplar.',\n                shapleyTooltip: 'Shapley Değerleri: Oyun teorisinden gelen bu yöntem, her kanalın toplam satış \"zaferine\" olan katkısını, tüm olası yolculuk kombinasyonlarını değerlendirerek, adil bir şekilde dağıtır.',\n                strategicInsightTitle: 'Stratejik İçgörü',\n                strategicInsightDescription: \"Blog yazılarınız doğrudan hiç satış getirmese de, modelimiz onları <span class='text-amber-200'>'Şampiyon'</span> müşterilerinizin <span class='font-bold'>%60'ının</span> yolculuğunda kritik bir 'ikna' adımı olarak tespit etti. Blog yazılarınız olmasaydı, bu müşterilerden tahmini <span class='font-bold text-white'>25.000 TL</span>'lik ciro kaybedebilirdiniz.\",\n                chartTitle: 'Kanal Katkısı: Gerçek Değer (Model) vs. Son Tıklama',\n                trueContribution: 'Gerçek Katkı (Model)',\n                lastClick: 'Son Tıklama Değeri',\n                channels: {\n                    google_ads: 'Google Ads',\n                    meta_ads: 'Meta Ads',\n                    organic_search: 'Organik Arama',\n                    blog_content: 'Blog İçeriği',\n                    email_marketing: 'E-posta Pazarlama'\n                },\n            },\n            reports: {\n                title: 'Rapor Şablonları',\n                description: 'Hazır şablonları kullanarak hızlıca detaylı ve profesyonel pazarlama raporları oluşturun.',\n                create_button: 'Rapor Oluştur',\n                template1_title: 'Aylık Performans Raporu',\n                template1_desc: 'Tüm kanallardaki (web, sosyal, reklam) temel performans metriklerinin (ziyaretçi, dönüşüm, etkileşim) aylık özeti.',\n                template2_title: 'Reklam Harcaması Kârlılık Raporu (POAS)',\n                template2_desc: 'Reklam kampanyalarınızın sadece ciro değil, net kârını gösteren detaylı analiz. Hangi kampanyanın gerçekten kazandırdığını görün.',\n                template3_title: 'Hedef Kitle Analizi Raporu',\n                template3_desc: 'En değerli hedef kitle segmentlerinizin demografik bilgilerini, davranışlarını ve etkileşim oranlarını karşılaştırın.',\n                template4_title: 'Pazar Trendleri ve Rakip Özeti',\n                template4_desc: 'Sektörünüzdeki en son trendleri, yükselen anahtar kelimeleri ve rakiplerinizin öne çıkan aktivitelerini özetler.',\n            },\n             customers: {\n                title: 'Müşteriler',\n                description: 'Mevcut ve potansiyel müşterilerinizin listesi. Detaylar için bir müşteriye tıklayın.',\n                add_button: 'Yeni Müşteri Ekle',\n                champion_candidates: 'Yeni Şampiyon Adayları',\n                suggestion_title: 'Yeni Şampiyon Adayı:',\n                predicted_ltv_label: 'Tahmini Yaşam Boyu Değeri (LTV):',\n                header_customer: 'Müşteri',\n                header_company: 'Şirket',\n                header_status: 'Durum',\n                header_last_contact: 'Son İletişim',\n                header_ltv: 'Tahmini LTV',\n                view_profile_aria: 'profilini görüntüle',\n                close_button: 'Kapat',\n                timeline_title: 'Müşteri Zaman Tüneli',\n                statuses: {\n                    status_aktif: 'Aktif',\n                    status_potansiyel: 'Potensiyel',\n                    status_riskli: 'Riskli',\n                    status_kaybedildi: 'Kaybedildi',\n                }\n            },\n             products: {\n                title: 'Ürünler',\n                description: 'Ürün performansını, potansiyelini ve stok durumunu analiz edin.',\n                add_button: 'Yeni Ürün Ekle',\n                profit_engine_title: 'Kâr Optimizasyon Motoru',\n                stock_intel_title: 'Stok Zekası Önerileri',\n                why_button: 'Neden?',\n                headers: {\n                    product: 'Ürün',\n                    price: 'Fiyat',\n                    profit_margin: 'Kâr Marjı',\n                    visits_conversion: 'Ziyaret & Dönüşüm',\n                    visits_label: 'Ziyaret',\n                    stock_status: 'Stok Durumu',\n                    potential_score: 'Potansiyel Skoru',\n                },\n                price_suggestion: {\n                    title: 'Fiyat Optimizasyon Önerisi',\n                    profit_impact: 'Tahmini Aylık Kâr Etkisi',\n                    apply_button: 'Fiyatı Uygula',\n                },\n                stock_suggestion: {\n                    details_button: 'Detayları Gör',\n                    create_campaign_button: 'Kampanya Oluştur',\n                },\n                stock_statuses: {\n                    high: 'Yüksek',\n                    normal: 'Normal',\n                    low: 'Düşük',\n                    out_of_stock: 'Tükendi',\n                }\n            },\n            loyalty: {\n                title: 'Gelecek Müşterisi: Tahmine Dayalı Sadakat',\n                description: 'Müşterilerinizin gelecekteki davranışlarını tahmin edin. Doğru kişiye, doğru zamanda, doğru teklifi sunarak pazarlamanızı reaktiften proaktife dönüştürün.',\n                customers: 'Müşteri',\n                create_campaign: 'Kampanya Oluştur',\n                segments: {\n                    on_the_verge: 'Satın Alma Eşiğinde',\n                    on_the_verge_desc: 'Tekrar satın alma olasılığı yüksek, son davranışlarına göre sıcak temaslar.',\n                    loyal: 'Sadık ve Güvende',\n                    loyal_desc: 'Düzenli alışveriş yapan ve kayıp riski düşük olan çekirdek kitleniz.',\n                    at_risk: 'Kayıp Riski Yüksek',\n                    at_risk_desc: 'Eskiden sık alışveriş yaparken son zamanlarda pasifleşen, churn riski taşıyan müşteriler.',\n                    window_shoppers: 'Fırsat Bekleyenler',\n                    window_shoppers_desc: 'Orta düzeyde ilgi gösteren, doğru teklif veya iletişimle kolayca kazanılabilecek müşteriler.',\n                },\n                suggestions: {\n                    signal_title: \"Satın Alma Sinyali\",\n                    signal_desc: \"Geçen yaz 'Tropikal Desenli' bikiniyi alan 250 müşteri, bu hafta yeni koleksiyondan bir ürün almaya %80 eğilimli.\",\n                    signal_action: \"Yeni Sezon E-postası Gönder\",\n                    risk_title: \"Kayıp Riski Uyarısı\",\n                    risk_desc: \"Eskiden sık alışveriş yapan 35 müşteri, 90 gündür sitenizi ziyaret etmedi. Onları kaybetme riski yüksek.\",\n                    risk_action: \"'Seni Özledik' İndirimi Gönder\",\n                }\n            },\n            opportunities: {\n                title: 'Fırsat Takvimi',\n                description: 'Rastgele indirimler yerine, doğru zamanda, doğru ürüne, doğru mesajla promosyon yapmanızı sağlayan dinamik öneriler.',\n                product: 'Ürün',\n                timing: 'Zamanlama',\n                reason: 'Gerekçe',\n                create_campaign_button: 'Kampanya Oluştur',\n                opp1_title: \"Bayram Öncesi Kampanyası\",\n                opp1_desc: \"Bayram tatiline 2 hafta kaldı. 'Deri Sırt Çantası' hem popüler hem de stoğu yeterli. Bu ürünü, 'Tatil Bavulunuz Hazır Mı?' temalı bir kampanya ile öne çıkarın.\",\n                opp1_product: \"Deri Sırt Çantası\",\n                opp1_timing: \"Öneri: Gelecek 2 gün içinde başlatın\",\n                opp1_reason: \"Yaklaşan bayram tatili ve yüksek stok seviyesi.\",\n                opp2_title: \"Flash İndirim Fırsatı\",\n                opp2_desc: \"'Kablosuz Kulaklık Pro' ürününün son 7 gündeki sayfa görüntülenmesi %200 arttı. Bu ilgiyi satışa çevirmek için 24 saatlik bir flash indirim yapın.\",\n                opp2_product: \"Kablosuz Kulaklık Pro\",\n                opp2_timing: \"Öneri: Bu gece 00:00'da başlatın\",\n                opp2_reason: \"Ani popülerlik artışı.\",\n                opp3_title: \"Rakip Zayıflığı Fırsatı\",\n                opp3_desc: \"Ana rakibiniz 'StilGiyim'in en çok satan tişörtünde stok sorunu yaşadığı tespit edildi. Kendi 'Organik Pamuk Tişört' ürününüze yönelik bir reklam kampanyası ile pazar payı kazanın.\",\n                opp3_product: \"Organik Pamuk Tişört\",\n                opp3_timing: \"Öneri: Hemen başlatın\",\n                opp3_reason: \"Rakip stok sorunu.\",\n            },\n            autopilot: {\n                title: 'Otopilot Modu',\n                description: 'Pazarlama hedefinizi belirleyin ve gerisini yapay zekaya bırakın. Bütçe ve huni yönetimi, 7/24 tam otonom olarak optimize edilsin.',\n                control_panel_title: 'Otopilot Kontrol Paneli',\n                control_panel_desc: 'Pazarlama departmanınızı otonom moda alın.',\n                active: 'Aktif',\n                inactive: 'Pasif',\n                monthly_revenue_goal: 'Aylık Ciro Hedefi',\n                funnel_title: 'Dinamik Bütçe Dağılımı',\n                activity_log: 'Aktivite Kaydı',\n                start_autopilot: 'Otopilot\\'u Başlat',\n                start_description: 'Başlamak için hedefinizi ve bütçenizi belirleyin.',\n                monthly_revenue_goal_label: 'Aylık Ciro Hedefi',\n                monthly_budget_label: 'Aylık Toplam Bütçe',\n                activate_button: 'Otopilot\\'u Aktive Et',\n                funnel: {\n                    awareness: 'Farkındalık',\n                    engagement: 'Etkileşim',\n                    conversion: 'Dönüşüm',\n                },\n                log: {\n                    time1: '14:30',\n                    action1: 'Dönüşüm bütçesi %5 artırıldı (Hafta sonu talebi).',\n                    time2: '11:15',\n                    action2: 'Etkileşim bütçesi %10 azaltıldı, Farkındalık\\'a kaydırıldı.',\n                    time3: '09:00',\n                    action3: 'Google Ads TBM\\'si yüksek olduğu için bütçe %5 Meta\\'ya kaydırıldı.',\n                    time4: 'Dün 22:00',\n                    action4: 'Yeni \"Isınmış Kitle\" segmentine yönelik dönüşüm kampanyası başlatıldı.',\n                }\n            },\n            scenarios: {\n                title: 'Bütçe Senaryoları',\n                description: 'Farklı pazarlama bütçelerinin potansiyel sonuçlarını simüle edin ve stratejik kararlarınızı veriye dayalı olarak alın.',\n                simulator_title: 'Bütçe Simülatörü',\n                budget_label: 'Aylık Pazarlama Bütçesi',\n                predictions_title: 'Tahmini Sonuçlar',\n                predicted_revenue: 'Tahmini Ciro',\n                predicted_customers: 'Tahmini Yeni Müşteri',\n                predicted_visitors: 'Tahmini Ziyaretçi',\n                strategic_suggestion: 'Stratejik Öneri',\n                summary_high_budget: (p: string) => `Bütçeyi %${p} artırmak, özellikle 'Dönüşüm' hunisine daha fazla yatırım yaparak, ay sonu ciro hedefinize ulaşmanızı önemli ölçüde kolaylaştırabilir. Yeni müşteri kazanımında da belirgin bir artış bekleniyor.`,\n                summary_low_budget: (p: string) => `Bütçeyi %${p} kısmak, ciro ve yeni müşteri kazanımında belirgin bir düşüşe neden olabilir. Bu senaryoda, en kârlı kanallara odaklanmak kritik olacaktır.`,\n                summary_normal_budget: `Mevcut bütçe seviyesi, istikrarlı bir büyüme öngörüyor. Bütçedeki küçük ayarlamalar, ciro ve müşteri kazanımı metriklerinde orantılı değişikliklere yol açacaktır.`,\n            },\n            googlePerformance: {\n                title: 'Google Ads Performansı',\n                description: 'Arama, Görüntülü ve Alışveriş kampanyalarınızın özeti.',\n                vs_last_month: 'geçen aya göre',\n                kpi: {\n                    roas: 'Reklam Harcaması Getirisi (ROAS)',\n                    cpc: 'Tıklama Başına Maliyet (TBM)',\n                    conversions: 'Dönüşümler',\n                    quality_score: 'Kalite Puanı Ortalaması',\n                },\n                chart_title: 'ROAS ve TBM Trendi',\n                top_campaigns_title: 'En İyi Kampanyalar',\n                actions_title: 'Önerilen Aksiyonlar',\n                apply_button: 'Uygula',\n                statuses: {\n                    active: 'Aktif',\n                    optimizing: 'Optimize Ediliyor',\n                    budget_limited: 'Bütçe Sınırında',\n                },\n                campaigns: {\n                    brand: 'Marka Kampanyası - Tam Eşleme',\n                    remarketing: 'Yeniden Pazarlama - Dinamik',\n                    competitor: 'Rakip Terimleri - Arama',\n                    generic: 'Genel Giyim - Geniş Eşleme',\n                },\n                actions: {\n                    action1_title: 'Düşük Kalite Puanlı Anahtar Kelimeleri İyileştir',\n                    action1_desc: '\"Genel Giyim\" kampanyasındaki 3 anahtar kelimenin kalite puanı 4/10\\'un altında. Bu kelimelerin reklam metinlerini ve açılış sayfalarını optimize edin.',\n                    action2_title: 'Arama Terimleri Raporunu İncele',\n                    action2_desc: 'Marka kampanyanıza alakasız trafik çeken arama terimleri tespit edildi. Bu terimleri negatif anahtar kelime olarak ekleyin.',\n                    action3_title: 'Yeniden Pazarlama Listesini Genişlet',\n                    action3_desc: 'Son 90 günde sitenizi ziyaret eden ancak dönüşüm sağlamayan kitle listeniz dolmak üzere. Yeni bir \"Sepete Ekleyenler\" listesi oluşturun.',\n                },\n                priorities: {\n                    high: 'Yüksek',\n                    medium: 'Orta'\n                }\n            },\n            metaPerformance: {\n                title: 'Meta Ads Performansı',\n                description: 'Facebook ve Instagram kampanyalarınızın özeti.',\n                vs_last_week: 'geçen haftaya göre',\n                kpi: {\n                    roas: 'Reklam Harcaması Getirisi (ROAS)',\n                    engagement_rate: 'Etkileşim Oranı',\n                    cpl: 'Potensiyel Müşteri Maliyeti',\n                    weekly_spend: 'Haftalık Harcama',\n                    spend: 'Harcama'\n                },\n                weekly_performance_title: 'Haftalık Performans',\n                top_creatives_title: 'En İyi Kreatifler',\n                actions_title: 'Önerilen Aksiyonlar',\n                apply_button: 'Uygula',\n                days: {\n                    mon: 'Pzt', tue: 'Sal', wed: 'Çar', thu: 'Per', fri: 'Cum', sat: 'Cmt', sun: 'Paz'\n                },\n                chart: {\n                    engagement: 'Etkileşim',\n                    conversions: 'Dönüşüm'\n                },\n                creatives: {\n                    creative1_name: 'Yaz Koleksiyonu Video Reklamı',\n                    video: 'Video',\n                    creative2_name: 'Tek Ürün Görseli - Beyaz Tişört',\n                    image: 'Görsel',\n                    creative3_name: 'Carousel Reklam - Yeni Gelenler',\n                    carousel: 'Carousel',\n                },\n                actions: {\n                    action1_title: 'Yeniden Pazarlama Kitlesi Oluştur',\n                    action1_desc: 'Son 30 gün içinde internet sitenizi ziyaret eden ancak alışveriş yapmayan kullanıcılara özel bir kampanya oluşturun.',\n                    action2_title: 'A/B Testi Başlat',\n                    action2_desc: 'En iyi performans gösteren video reklamınızın iki farklı başlık versiyonunu test ederek tıklama oranını artırın.',\n                    action3_title: 'Advantage+ Kitlelerini Dene',\n                    action3_desc: 'Meta\\'nın yapay zeka destekli kitle hedeflemesini kullanarak daha önce ulaşamadığınız potansiyel müşterilere ulaşın.',\n                },\n                priorities: {\n                    high: 'Yüksek',\n                    medium: 'Orta'\n                }\n            },\n            tiktokPerformance: {\n                title: 'TikTok Ads Performansı',\n                description: 'Video kampanyalarınızın ve organik erişiminizin özeti.',\n                vs_last_week: 'geçen haftaya göre',\n                views: 'Görüntülenme',\n                views_short: 'Gör',\n                eng_short: 'Etklşm',\n                kpi: {\n                    total_views: 'Toplam Görüntülenme',\n                    cpv: 'Görüntüleme Başına Maliyet (CPV)',\n                    engagement_rate: 'Etkileşim Oranı',\n                    conversions: 'Dönüşümler',\n                },\n                chart_title: 'Haftalık Görüntülenme Trendi',\n                top_videos_title: 'En Popüler Videolar',\n                actions_title: 'Önerilen Aksiyonlar',\n                apply_button: 'Uygula',\n                days: {\n                    mon: 'Pzt', tue: 'Sal', wed: 'Çar', thu: 'Per', fri: 'Cum', sat: 'Cmt', sun: 'Paz'\n                },\n                videos: {\n                    video1_name: '#danschallenge Akımı Videosu',\n                    video2_name: 'Ürün \"Unboxing\" Videosu',\n                    video3_name: '\"Nasıl Kullanılır?\" Eğitici Video',\n                },\n                actions: {\n                    action1_title: 'Trend Olan Bir Sesi Kullan',\n                    action1_desc: 'Şu anda popüler olan \"Summer Vibes\" sesini kullanarak yeni bir video oluşturun. Bu sesle yapılan videoların görüntülenme oranı %200 daha yüksek.',\n                    action2_title: 'Spark Ads Kampanyası Oluştur',\n                    action2_desc: 'En çok etkileşim alan \"#danschallenge\" videonuzu Spark Ads ile tanıtarak daha geniş bir kitleye ulaşın.',\n                    action3_title: 'Influencer İş Birliği Yapın',\n                    action3_desc: 'Nişinize uygun bir mikro-influencer ile iş birliği yaparak marka güvenilirliğini ve erişimi artırın.',\n                },\n                priorities: {\n                    high: 'Yüksek',\n                    medium: 'Orta'\n                }\n            },\n             tasks: {\n                title: 'Görev Panosu',\n                description: 'Departmanlar arası görevleri yönetin ve takip edin.',\n                add_button: 'Yeni Görev Ekle',\n                columns: {\n                    todo: 'Yapılacak',\n                    in_progress: 'Yapılıyor',\n                    done: 'Tamamlandı',\n                },\n                priority: 'Öncelik',\n                priorities: {\n                    low: 'Düşük',\n                    medium: 'Orta',\n                    high: 'Yüksek',\n                },\n                modal: {\n                    title: 'Yeni Görev Oluştur',\n                    task_title: 'Başlık',\n                    description: 'Açıklama',\n                    assignee: 'Atanan Ekip',\n                    priority: 'Öncelik',\n                    due_date: 'Bitiş Tarihi',\n                    cancel: 'İptal',\n                    add: 'Görevi Ekle',\n                }\n            },\n             ekip: {\n                title: 'Ekip Yönetimi',\n                description: 'Platformu kullanan ekip üyelerinin listesi.',\n                add_button: 'Yeni Kişi Ekle',\n                send_email: 'E-posta Gönder',\n            },\n             audienceProfitability: {\n                title: 'Hazine Haritası: Kitle Kârlılık Analizi',\n                description: 'Her bir reklam kitlenizin gerçek kârlılığını (POAS: Kâr/Harcama) keşfedin. Bütçenizin nereye aktığını ve nerede hazineler yattığını görün.',\n                suggestion_title: 'Bütçe Optimizasyon Uyarısı',\n                suggestion_desc: (audience: string, amount: string) => `\"<span class=\"font-semibold text-amber-200\">${audience}</span>\" kitlesi son 7 günde size <span class=\"font-semibold text-rose-400\">${amount}</span> kaybettirdi.`,\n                suggestion_button: 'Bütçeyi Otomatik Aktar',\n                treasures_title: 'Altın Kitleler (Hazineler)',\n                pirates_title: 'Para Yakan Kitleler (Korsanlar)',\n                poas: 'POAS',\n                profit: 'Kâr',\n                spend: 'Harcama',\n            },\n            automations: {\n                title: 'Otomatik Uygulamalar',\n                description: 'Tekrarlayan görevleri otomatikleştirerek zamandan kazanın ve pazarlama verimliliğinizi artırın.',\n                active: 'Aktif',\n                inactive: 'Pasif',\n                mock: {\n                    automation1_title: 'Yeni Blog Yazısını Sosyal Medyada Paylaş',\n                    automation1_desc: 'Yeni bir blog yazısı yayınlandığında, belirlediğiniz sosyal medya hesaplarında otomatik olarak paylaşım yapılır.',\n                    automation2_title: 'Haftalık Performans Raporu Gönder',\n                    automation2_desc: 'Her pazartesi, geçen haftanın kilit metriklerini içeren bir özet rapor e-posta adresinize gönderilir.',\n                    automation3_title: 'Potensiyel Müşterilere Hoş Geldin E-postası',\n                    automation3_desc: 'Platformunuza yeni bir potansiyel müşteri eklendiğinde, kişiselleştirilmiş bir hoş geldin e-postası gönderilir.',\n                    automation4_title: 'Düşük Performanslı Reklamları Duraklat',\n                    automation4_desc: 'Bir reklamın tıklama başına maliyeti belirlediğiniz eşiği aştığında, reklam kampanyası otomatik olarak duraklatılır.',\n                    automation5_title: 'Rakip Bahsedildiğinde Bildirim Gönder',\n                    automation5_desc: 'Belirlediğiniz bir rakip web üzerinde bahsedildiğinde size anında bir bildirim gönderilir, böylece gelişmelerden haberdar olursunuz.',\n                    automation6_title: 'Yeni Müşteriyi CRM\\'e Ekle',\n                    automation6_desc: 'Platform üzerinden yeni bir müşteri kazanıldığında, iletişim bilgileri otomatik olarak CRM sisteminize eklenir.',\n                }\n            },\n            actions: {\n                title: 'Önerilen Aksiyonlar',\n                description: 'Verilerinize dayanarak oluşturulan, büyümenizi hızlandıracak kişiselleştirilmiş pazarlama görevleri.',\n                effort: 'Efor',\n                why_button: 'Neden?',\n                add_to_tasks_button: 'Göreve Ekle',\n                categories: {\n                    all: 'Tümü',\n                    seo: 'SEO',\n                    social: 'Sosyal Medya',\n                    content: 'İçerik Pazarlaması',\n                    email: 'E-posta',\n                    cro: 'CRO'\n                },\n                 priorities: {\n                    yüksek: 'Yüksek',\n                    orta: 'Orta',\n                    düşük: 'Düşük',\n                },\n                mock: {\n                    action1_title: 'Kırık Linkleri Düzelt',\n                    action1_desc: 'Web sitenizdeki 404 hataları kullanıcı deneyimini ve SEO sıralamanızı olumsuz etkiler. Bu linkleri analiz edip düzeltin.',\n                    action1_rationale: 'Arama motorları, sitenizi tararken karşılaştığı 404 hatalarını olumsuz bir sinyal olarak algılar. Son 7 günde tarama hatalarınız %15 arttı. Bu hataları düzeltmek, hem kullanıcı deneyimini iyileştirir hem de SEO puanınızı doğrudan yükseltir.',\n                    action2_title: 'Etkileşimi Yüksek Gönderi Paylaş',\n                    action2_desc: 'Takipçilerinizin ilgisini çekecek bir anket, soru veya \"arkadaşını etiketle\" gönderisi hazırlayarak etkileşimi artırın.',\n                    action2_rationale: 'Son 30 günde en yüksek etkileşimi alan gönderileriniz anketler oldu. Benzer bir içerik, sosyal medya görünürlüğünüzü ortalama %25 artırabilir ve yeni takipçiler kazandırabilir.',\n                    action4_title: 'Mevcut Bir Blog Yazısını Güncelle',\n                    action4_desc: 'Eski ama popüler bir blog yazınızı yeni bilgiler ve anahtar kelimelerle güncelleyerek trafiğini artırın.',\n                    action4_rationale: \"'E-ticarette Başarı' başlıklı yazınız 6 aydır güncellenmedi ancak hala en çok trafik çeken 5. yazınız. Yazıyı güncel verilerle zenginleştirmek, organik arama sıralamasını yükseltebilir ve trafiği %20 artırabilir.\",\n                    action5_title: 'Terk Edilmiş Sepet E-postası Oluştur',\n                    action5_desc: 'Satın almayı tamamlamamış kullanıcılara hatırlatma e-postası göndererek potansiyel satışları geri kazanın.',\n                    action5_rationale: 'Geçen ay ₺15,000 değerinde ürün sepetlerde terk edildi. Otomatik bir hatırlatma e-postası, bu kayıp gelirin %15 ila %25\\'ini geri kazanmanızı sağlayabilir.',\n                    action6_title: 'Video İçerik Stratejisi Geliştir',\n                    action6_desc: 'Kısa ve ilgi çekici videolar (Reels, Shorts) üreterek marka bilinirliğini ve etkileşimi artırın.',\n                    action6_rationale: 'Rakipleriniz son 3 ayda video içeriklerini %50 artırdı ve etkileşim oranları %30 yükseldi. Video, şu anda sektörünüzdeki en hızlı büyüyen içerik formatı.',\n                    action7_title: 'Müşteri Başarı Hikayesi Yayınla',\n                    action7_desc: 'Müşterilerinizin ürününüzle elde ettiği başarıları anlatan bir vaka analizi veya blog yazısı hazırlayın.',\n                    action7_rationale: 'Potansiyel müşterilerin %79\\'u, satın alma kararlarında vaka analizlerinin etkili olduğunu belirtiyor. Başarılı bir müşteri hikayesi, ürününüzün değerini kanıtlayarak güven oluşturur.',\n                    action8_title: 'Yeniden Etkileşim Kampanyası Başlat',\n                    action8_desc: 'Uzun süredir pasif olan abonelerinize özel bir teklif veya içerikle yeniden ulaşarak listenizi canlandırın.',\n                    action8_rationale: 'E-posta listenizin %22\\'si son 90 gündür hiçbir e-postanızı açmadı. Özel bir teklif içeren bir kampanya, bu pasif abonelerin %5-8\\'ini yeniden aktif hale getirebilir.',\n                    action9_title: 'Ana Sayfa CTA Butonunu Optimize Et',\n                    action9_desc: 'Ana sayfadaki \"Hemen Başla\" butonu, ısı haritası analizine göre beklenenden daha az tıklama alıyor. Buton rengini ve metnini değiştirmeyi düşünün.',\n                    action9_rationale: 'Isı haritası verileri, kullanıcıların ana CTA butonunu görmelerine rağmen tıklamaktan çekindiklerini gösteriyor. Renk kontrastını artırmak ve metni daha eyleme yönelik hale getirmek (ör: \"Ücretsiz Dene\") tıklama oranını %15-20 artırabilir.',\n                    action10_title: 'Fiyatlandırma Sayfasındaki Karışıklığı Gider',\n                    action10_desc: 'Fiyatlandırma sayfasında yüksek oranda \"öfke tıklaması\" tespit edildi. Bu, kullanıcıların bir şeyin tıklanabilir olmasını beklediğini ancak olmadığını gösteriyor. Planları daha net ayırın.',\n                    action10_rationale: 'Kullanıcılar farklı fiyat planlarının özelliklerini karşılaştırırken zorlanıyor ve tıklanamayan elementlere tekrar tekrar basıyor. Bu, hayal kırıklığına ve siteden hemen çıkma oranının artmasına neden olur. Tasarımı basitleştirmek dönüşümleri artıracaktır.',\n                }\n            },\n            profitability: {\n                title: 'Kârlılık Paneli',\n                description: 'Pazarlama faaliyetlerinizin gerçek zamanlı Kâr/Zarar (P&L) durumunu görüntüleyin.',\n                pnlTitle: 'Pazarlama Kâr/Zarar Özeti (Son 30 Gün)',\n                revenue: 'Toplam Gelir',\n                cogs: 'Satılan Malın Maliyeti (COGS)',\n                adSpend: 'Reklam Harcaması',\n                shipping: 'Kargo & Lojistik',\n                fees: 'İşlem Ücretleri',\n                platformFee: 'Platform Ücreti',\n                grossProfit: 'Brüt Kâr',\n                netProfit: 'Net Kâr',\n                insightTitle: 'Stratejik Kârlılık İçgörüsü',\n                insightDescription: \"<b>Google Ads</b>'den gelen müşteriler, <b>Meta</b>'dan gelenlere göre <span class='text-emerald-400 font-bold'>%13 daha yüksek brüt kâr marjı</span> bırakıyor. Google Ads'in TBM'si daha yüksek olsa da, müşteri yaşam boyu değeri ve ortalama sepet tutarı daha yüksek.\",\n                channelProfitTitle: 'Kanallara Göre Net Kâr Dağılımı',\n                productProfitTitle: 'En Kârlı Ürünler',\n                profit: 'Net Kâr',\n                margin: 'Marj',\n                channel: 'Kanal',\n                product: 'Ürün',\n            },\n            collaborations: {\n                title: 'İş Birliği Merkezi',\n                description: 'Influencer ve satış ortaklığı (affiliate) pazarlamanızı tek bir yerden yönetin, ölçün ve optimize edin.',\n                add_button: 'Yeni İş Birliği Ekle',\n                highlightTitle: 'Ayın Influencer\\'ı',\n                highlightDesc: (name: string, sales: string, commission: string) => `<span class='font-bold text-white'>${name}</span>, bu ay <span class='font-bold text-white'>${sales}</span>'lik satışla en yüksek ciroyu getirdi. Komisyonu: <span class='font-bold text-white'>${commission}</span>.`,\n                warningTitle: 'Performans Uyarısı',\n                warningDesc: (name: string) => `Son 3 iş birliğinde, <span class='font-bold text-white'>${name}</span>'dan gelen trafiğin dönüşüm oranı %0.1'in altında. Bu iş birliğini gözden geçirmeyi düşünebilirsin.`,\n                leaderboardTitle: 'Performans Liderlik Tablosu',\n                header_influencer: 'Influencer',\n                header_sales: 'Getirilen Satış',\n                header_commission: 'Hakedilen Komisyon',\n                header_conversion: 'Dönüşüm Oranı',\n            },\n            touchpointAnalysis: {\n                title: 'Touchpoint (Temas Noktası) Analizi',\n                description: 'Microsoft Clarity gibi araçlardan gelen verilerle, kullanıcılarınızın sitenizde nerelere tıkladığını, ne kadar aşağı kaydırdığını ve nerede zorlandığını gösteren ısı haritalarını inceleyin.',\n                device: 'Cihaz',\n                clicks: 'Tıklamalar',\n                scroll_depth: 'Kaydırma Derinliği',\n                rage_clicks: 'Öfke Tıklamaları',\n                view_heatmap: 'Isı Haritasını Görüntüle',\n                mock: {\n                    heatmap1_page: 'Ana Sayfa',\n                    heatmap2_page: 'Ana Sayfa',\n                    heatmap3_page: 'Ürün Detay Sayfası',\n                    heatmap4_page: 'Fiyatlandırma Sayfası',\n                    heatmap5_page: 'Fiyatlandırma Sayfası',\n                    heatmap6_page: 'Blog Yazısı',\n                }\n            },\n            conversionWizard: {\n                 title: 'Dönüşüm Sihirbazı',\n                description: 'Yapay zeka, mağazanızı bir uzman gibi tarayarak satışları engelleyen \"pürüzleri\" bulur ve size önceliklendirilmiş bir yapılacaklar listesi sunar.',\n                scan_button: 'Tekrar Tara',\n                scan_button_loading: 'Taranıyor...',\n                last_scan: 'Son Tarama:',\n                filters: {\n                    all: 'Tümü',\n                    critical: 'Kritik',\n                    important: 'Önemli',\n                    improvement: 'İyileştirme',\n                },\n                priorities: {\n                    critical: 'Kritik',\n                    important: 'Önemli',\n                    improvement: 'İyileştirme',\n                },\n                categories: {\n                    technical: 'Teknik',\n                    ux: 'Kullanıcı Deneyimi',\n                    copy: 'Metin',\n                },\n                card_labels: {\n                    detection: 'Tespit',\n                    impact: 'Etki',\n                    action: 'Aksiyon',\n                },\n                help_buttons: {\n                    how_to_guide: 'Nasıl Yapılır? Rehberi',\n                    copy_code: 'Kodu Kopyala',\n                },\n                mock: [\n                    {\n                        id: 1,\n                        priority: 'Kritik',\n                        category: 'Teknik',\n                        title: 'Hız Problemi',\n                        detection: \"Anasayfadaki 'Yaz Koleksiyonu' görseli çok büyük (3MB) ve sayfanın açılışını 2 saniye yavaşlatıyor.\",\n                        impact: 'Bu, mobil ziyaretçilerinin tahmini %20\\'sini kaybetmene neden oluyor.',\n                        action: 'Bu görseli bir \"görsel sıkıştırma\" aracıyla küçültüp tekrar yükle.',\n                        helpLinkText: 'Nasıl Yapılır? Rehberi',\n                    },\n                    {\n                        id: 2,\n                        priority: 'Önemli',\n                        category: 'UX',\n                        title: 'Güven Eksikliği',\n                        detection: \"Ödeme sayfasında 'Güvenli Ödeme' (SSL, Visa/Mastercard) ikonları bulunmuyor.\",\n                        impact: 'Müşterilerin bir kısmı, kart bilgilerini girmekten çekinebilir ve sepeti terk edebilir.',\n                        action: \"Shopify temanızın altbilgi (footer) bölümüne bu ikonları ekleyin.\",\n                        codeSnippet: '<img src=\"/secure-payment-icons.png\" alt=\"Secure Payment\" />'\n                    },\n                    {\n                        id: 3,\n                        priority: 'İyileştirme',\n                        category: 'Metin',\n                        title: 'Metin Zayıf',\n                        detection: \"'Siyah Bikini' ürün başlığı çok genel.\",\n                        impact: 'Müşteriler, ürünün faydasını anlamakta zorlanabilir ve aramalarda çıkmayabilir.',\n                        action: 'Başlığı, \"Yüksek Bel Toparlayıcı Siyah Bikini\" gibi daha aranan ve fayda odaklı bir hale getirmeyi dene.',\n                    },\n                    {\n                        id: 4,\n                        priority: 'Önemli',\n                        category: 'UX',\n                        title: 'Huni Analizi: Sepetten Kaçış',\n                        detection: \"Müşterilerin %45'i, kargo ücretini gördükten sonra ödeme adımını terk ediyor.\",\n                        impact: 'Beklenmedik kargo ücretleri, en büyük sepet terk etme nedenlerinden biridir.',\n                        action: 'Belirli bir sepet tutarının üzerinde (örn: 500 TL) ücretsiz kargo seçeneği sunmayı veya kargo ücretini ürün fiyatlarına dahil etmeyi değerlendir.',\n                    }\n                ]\n            },\n            kpiAnalysis: {\n                title: 'KPI Derinlemesine Analiz',\n                description: 'Temel performans göstergelerinizi seçin ve kanallar arası performansını, zaman içindeki trendini ve yapay zeka içgörülerini keşfedin.',\n                select_kpi: 'Analiz edilecek KPI\\'yı seçin',\n                overall_performance: 'Genel Performans',\n                vs_last_30_days: 'Son 30 güne göre',\n                channel_performance: 'Kanallara Göre Performans',\n                trend_30_days: 'Son 30 Günlük Trend',\n                ai_insight: 'Yapay Zeka İçgörüsü',\n                kpis: {\n                    roas: 'ROAS (Reklam Harcaması Getirisi)',\n                    cpc: 'TBM (Tıklama Başına Maliyet)',\n                    conversion_rate: 'Dönüşüm Oranı',\n                    ctr: 'TO (Tıklama Oranı)',\n                    cpa: 'EBM (Edinme Başına Maliyet)',\n                    aov: 'OSD (Ortalama Sepet Değeri)',\n                },\n                channels: {\n                    google: 'Google',\n                    meta: 'Meta',\n                    tiktok: 'TikTok',\n                    organic: 'Organik',\n                },\n                insights: {\n                    roas: 'Genel ROAS iyi durumda, ancak **TikTok** kanalındaki ROAS ortalamanın altında. TikTok kampanyalarınızdaki hedef kitleyi ve kreatifleri optimize ederek yatırım getirisini artırabilirsiniz.',\n                    cpc: '**Google** kanalında TBM artış trendinde. Negatif anahtar kelime listenizi gözden geçirmek ve Kalite Puanı düşük kelimeleri iyileştirmek maliyetleri düşürebilir.',\n                    conversion_rate: 'Dönüşüm Oranınız genel olarak stabil. **Organik** kanaldan gelen trafikteki dönüşüm oranını artırmak için en çok ziyaret edilen sayfalara yönelik CRO (Dönüşüm Oranı Optimizasyonu) çalışmaları yapmayı değerlendirin.',\n                    ctr: 'Tıklama Oranları sağlıklı görünüyor. Özellikle **Meta** kanalındaki yüksek TO, reklam metinlerinizin ve görsellerinizin hedef kitleyle rezonans kurduğunu gösteriyor. Bu başarılı kreatifleri diğer kanallarda da test edebilirsiniz.',\n                    cpa: 'Genel Edinme Başına Maliyetiniz hedefler dahilinde. Ancak, **Google** kanalındaki EBM\\'nin diğerlerine göre yüksek olması dikkat çekici. Bu kanaldaki dönüşüm hunisini analiz ederek iyileştirme alanları bulun.',\n                    aov: 'Ortalama Sepet Değeri artışta, bu harika! **Organik** kanaldan gelen kullanıcıların OSD\\'si diğerlerine göre daha düşük. Bu kitleye yönelik \"upsell\" (üst satış) ve \"cross-sell\" (çapraz satış) teklifleri sunarak değeri artırabilirsiniz.',\n                }\n            },\n            gemiAI: {\n                title: 'Gemi AI',\n                description: 'Kişisel pazarlama dehanız. Strateji oluşturmaktan içerik yazmaya kadar her konuda yardım alın.',\n                placeholder: 'Bir pazarlama stratejisi isteyin veya bir soru sorun...',\n                prompt_starters: [\n                    'Vegan bir protein bar için bir pazarlama personası oluştur.',\n                    'Yaz modası indirimi için 5 farklı Google Ads başlığı yaz.',\n                    'Instagram etkileşimini artırmak için 3 yaratıcı fikir ver.',\n                    'Yeni e-ticaret sitem için bir SEO kontrol listesi oluştur.'\n                ]\n            }\n        }\n    },\n    en: {\n        appName: 'Market Intelligence',\n        pages: {\n            [Page.Dashboard]: 'Dashboard',\n            [Page.MarketAnalysis]: 'Market Analysis',\n            [Page.CompetitorAnalysis]: 'Competitor Analysis',\n            [Page.ImpactAnalysis]: 'Attribution Engine',\n            [Page.Strategy]: 'Strategy',\n            [Page.Creative]: 'Creative',\n            [Page.Reports]: 'Reports',\n            [Page.Opportunities]: 'Opportunities',\n            [Page.Scenarios]: 'Scenarios',\n            [Page.Google]: 'Google Performance',\n            [Page.Meta]: 'Meta Performance',\n            [Page.TikTok]: 'TikTok Performance',\n            [Page.Audiences]: 'Audiences',\n            [Page.Customers]: 'Customers',\n            [Page.People]: 'People',\n            [Page.Products]: 'Products',\n            [Page.Loyalty]: 'Loyalty',\n            [Page.Autopilot]: 'Autopilot',\n            [Page.Actions]: 'Actions',\n            [Page.Tasks]: 'Tasks',\n            [Page.Ekip]: 'Team',\n            [Page.Automations]: 'Automations',\n            [Page.Connections]: 'Connections',\n            [Page.Settings]: 'Settings',\n            [Page.AudienceProfitability]: 'Audience Profitability',\n            [Page.Profitability]: 'Profitability',\n            [Page.Collaborations]: 'Collaborations',\n            [Page.TouchpointAnalysis]: 'Touchpoint Analysis',\n            [Page.ConversionWizard]: 'Conversion Wizard',\n            [Page.KpiAnalysis]: 'KPI Analysis',\n            [Page.GemiAI]: 'Gemi AI',\n            [Page.MediaPlan]: 'Media Plan',\n        },\n        navHeaders: {\n            general: 'General',\n            analysis: 'Analysis',\n            cro: 'CRO',\n            channels: 'Channels',\n            management: 'Management',\n            configuration: 'Configuration',\n        },\n         sidebar: {\n          collapseMenu: 'Collapse Menu',\n          expandMenu: 'Expand Menu',\n        },\n        header: {\n            selectLanguage: 'Select Language',\n        },\n        pageContent: {\n             mediaPlan: {\n                title: 'Smart Media Plan',\n                description: 'Enter your monthly advertising budget and watch as AI creates a funnel-based media plan tailored to your brand profile.',\n                budget_input_title: 'Step 1: Set Your Monthly Budget',\n                budget_placeholder: 'e.g., 5000',\n                button_generate: 'Create Smart Plan',\n                button_loading: 'Creating Plan...',\n                error_budget: 'Please enter a valid budget.',\n                error_api: 'An error occurred while creating the plan. Please try again.',\n                loading_text: 'AI is analyzing the optimal budget allocation for your brand...',\n                rationale_title: 'Strategic Rationale',\n                funnel_title: 'Funnel Distribution',\n                breakdown_title: 'Channel Budget Breakdown',\n                table_headers: {\n                    channel: 'Channel',\n                    budget: 'Budget',\n                    funnel_stage: 'Funnel Stage',\n                    estimated_kpi: 'Estimated Result (KPI)',\n                },\n                funnel_stages: {\n                    awareness: 'Awareness',\n                    consideration: 'Consideration',\n                    conversion: 'Conversion',\n                },\n                button_approve: 'Approve and Activate Plan',\n            },\n            dashboard: {\n                customize_dashboard: 'Customize Dashboard',\n                save_layout: 'Save Layout',\n                add_widget: 'Add Widget',\n                date_filters: {\n                    '7d': 'Last 7 Days',\n                    '30d': 'Last 30 Days',\n                    '90d': 'Last 90 Days',\n                },\n                platform_filters: {\n                    'all': 'All Platforms',\n                    'google': 'Google',\n                    'meta': 'Meta',\n                    'tiktok': 'TikTok',\n                },\n                widget_titles: {\n                    statCards: 'Overview KPIs',\n                    trafficChart: 'Website Traffic',\n                    alerts: 'Watchdog Assistant Alerts',\n                    conversionChart: 'Conversion Rates',\n                    audienceProfitability: 'Audience Profitability Summary'\n                },\n                add_widget_modal_title: 'Add Widget to Dashboard',\n                all_widgets_on_dashboard: 'All available widgets are on your dashboard.',\n                totalVisitors: 'Total Visitors',\n                visitors: 'Visitors',\n                conversionRate: 'Conversion Rate',\n                newCustomers: 'New Customers',\n                revenue: 'Revenue',\n                sinceLastPeriod: 'vs. previous period',\n                visitor: 'Visitor',\n                rate: 'Rate',\n                goldenAudience: 'Golden Audience',\n                moneyBurnerAudience: 'Money-Burning Audience',\n                detailedAnalysis: 'Detailed Analysis',\n                poas: 'POAS',\n                 alerts: {\n                    alert1_metric: 'Google Ads CPC',\n                    alert1_change: 'increased by 250%',\n                    alert1_current: '$0.50',\n                    alert1_normal: '$0.10 - $0.18',\n                    alert1_time: '2 hours ago',\n                    alert2_metric: 'Homepage Load Time',\n                    alert2_change: 'slowed by 80%',\n                    alert2_current: '5.2s',\n                    alert2_normal: '1.5s - 2.8s',\n                    alert2_time: 'yesterday at 6:30 PM',\n                    alert3_metric: 'Top Product Conversion Rate',\n                    alert3_change: 'dropped by 45%',\n                    alert3_current: '2.1%',\n                    alert3_normal: '3.8% - 5.5%',\n                    alert3_time: '3 days ago',\n                },\n                current: 'Current',\n                normal: 'Normal',\n                goldenAudienceDetails: 'IG - Lookalike Audience (Purchasers 1%)',\n                moneyBurnerAudienceDetails: 'FB - Interest (Fashion Blogs)',\n            },\n             marketAnalysis: {\n                title: 'AI-Powered Market Analysis',\n                description: 'Enter a topic about the market, product, or industry you want to analyze.',\n                placeholder: 'e.g., Electric scooter market in Turkey',\n                button: 'Generate Analysis',\n                buttonLoading: 'Analyzing...',\n                errorPrompt: 'Please enter a topic or industry.',\n                errorApi: 'An error occurred while generating the analysis. Please try again.',\n                loading: 'Generating analysis...',\n                executiveSummary: 'Executive Summary',\n                mainTrends: 'Main Trends',\n                opportunities: 'Opportunities',\n                risks: 'Risks',\n                targetAudience: 'Target Audience',\n                competitorAnalysis: 'Competitor Analysis',\n                webResources: 'Web Resources for',\n            },\n            settings: {\n                profileSettings: 'Profile Settings',\n                name: 'Name',\n                namePlaceholder: 'Demo User',\n                email: 'Email',\n                emailPlaceholder: 'demo@example.com',\n                saveChanges: 'Save Changes',\n                notificationSettings: 'Notification Settings',\n                weeklyReports: 'Weekly Report Emails',\n                instantAlerts: 'Instant Trend Alerts',\n            },\n            connections: {\n                title: 'Platform Connections',\n                description: 'Enrich your analyses and manage all your data from one place by connecting your data sources and marketing platforms.',\n                ga: 'Website traffic and user behavior data.',\n                meta: 'Ad campaign performance and audience data.',\n                gAds: 'Search engine and display network ad data.',\n                tiktok: 'TikTok ad campaign metrics and analytics.',\n                connected: 'Connected',\n                connect: 'Connect',\n            },\n             onboarding: {\n                mainTitle: \"Let's Get to Know Your Brand\",\n                subTitle: \"A few short questions to provide you with the most relevant analyses.\",\n                step1Title: \"What is your business model?\",\n                step2Title: \"Which industry do you operate in?\",\n                step3Title: \"Who are your primary customers?\",\n                step4Title: \"How long has your brand been in business?\",\n                step5Title: \"What is the size of your company?\",\n                step6Title: \"What is your website address?\",\n                step7Title: \"What is your average monthly revenue?\",\n                step8Title: \"What is your average monthly ad budget?\",\n                step9Title: \"Who are your main competitors?\",\n                step10Title: \"How would you describe your ideal target audience in a few words?\",\n                step11Title: \"What is your brand's voice and tone?\",\n                step12Title: \"What is your most important marketing goal right now?\",\n                competitorsPlaceholder: \"competitor1.com, competitor2.com, ...\",\n                audiencePlaceholder: \"e.g., Young professionals aged 25-35, living in big cities, who value technology and sustainability.\",\n                businessModels: { ecommerce: 'E-Commerce', saas: 'SaaS / Software', service: 'Service Provider', mobile: 'Mobile App', media: 'Content / Media' },\n                industries: { fashion: 'Fashion & Apparel', health: 'Health & Wellness', tech: 'Technology & Software', finance: 'Finance & Insurance', food: 'Food & Beverage', education: 'Education' },\n                customerTypes: { b2c: 'Individual Consumers (B2C)', b2b: 'Other Businesses (B2B)', both: 'Both' },\n                maturities: { idea: 'Idea / Pre-launch', new: 'Newly Established (0-1 Year)', growing: 'Growing (1-5 Years)', established: 'Established (5+ Years)' },\n                companySizes: { solo: 'Just Me', s: '2-10 Employees', m: '11-50 Employees', l: '51-200 Employees', xl: '200+ Employees' },\n                brandVoices: { professional: 'Professional & Corporate', friendly: 'Casual & Friendly', fun: 'Witty & Fun', technical: 'Technical & Informative' },\n                marketingGoals: { awareness: 'Brand Awareness', leadGen: 'Lead Generation', sales: 'Increase Sales', loyalty: 'Increase Customer Loyalty' },\n                back: 'Back',\n                next: 'Next',\n                complete: 'Complete Setup',\n                collectiveIntelligence: {\n                    activating: 'Activating Collective Intelligence Network...',\n                    title: 'Collective Intelligence Active!',\n                    description: 'Your AI assistant has been pre-trained with the collective experience of hundreds of anonymized brands like yours. You are not starting from scratch, but with the wisdom of your industry.',\n                    insightsTitle: 'Your Custom Initial Insights:',\n                    insights: {\n                        'Fashion & Apparel': [ \"Video ads have the highest ROAS for new customer acquisition in this sector.\", \"Instagram Stories provide the highest engagement among the female 25-34 age group.\", \"Cart abandonment rates decrease by an average of 20% when 'free shipping' is offered.\" ],\n                        'Technology & Software': [ \"Google Search Ads are the most effective channel for B2B lead generation.\", \"Publishing case studies on LinkedIn can increase conversion rates by 15%.\", \"Offering a free trial increases average customer lifetime value by 30%.\" ],\n                         'Health & Wellness': [ \"Facebook groups and community management are critical for building trust.\", \"Educational blog content is the highest converting content type for organic traffic.\", \"Influencer collaborations are highly effective in increasing product credibility.\" ],\n                        'Food & Beverage': [ \"User-generated content (UGC) is the biggest driver of social media engagement.\", \"Seasonal campaigns and limited-time products create spikes in sales.\", \"Loyalty programs can increase customer repeat purchase rates by up to 40%.\" ],\n                        'default': [ \"Remarketing campaigns generally provide the highest return on investment.\", \"Email marketing is the most cost-effective way to increase customer loyalty.\", \"A mobile-friendly website can increase conversion rates by up to 50%.\" ]\n                    },\n                    finishButton: \"Go to Platform\"\n                }\n            },\n            aiAssistant: {\n                greeting: \"Hello! I'm Zek, your AI assistant. You are currently on the\",\n                greeting_cont: \"page. I can help you interpret the data on this page or with general topics. What would you like to know?\",\n                placeholder: \"Ask Zek a question...\",\n                close: \"Close Assistant\",\n                title: \"Assistant Zek\",\n                error: \"I'm sorry, an error occurred. Please try again in a moment.\",\n                context: \"User context:\",\n                question: \"User's question:\",\n                system_prompt: \"Considering this context, respond like a helpful and friendly marketing assistant. Make your response more readable using Markdown, especially **bold** text. Keep your answers short and to the point.\"\n            },\n             competitorAnalysis: {\n                title: 'Competitor Analysis',\n                description: 'Monitor your competitors\\' performance, analyze their strategies, and seize opportunities to increase your market share.',\n                placeholder: 'e.g., competitor.com',\n                add_button: 'Add Competitor',\n                remove: 'Remove',\n                monthly_traffic: 'Monthly Traffic',\n                social_engagement: 'Social Engagement',\n                keywords: 'Keywords',\n                traffic: 'Traffic',\n            },\n             creative: {\n                title: 'Creative Gallery',\n                description: 'View the visual and video creatives used in your campaigns and analyze their performance.',\n                ctr: 'CTR',\n                conversions: 'Conversions',\n            },\n            strategy: {\n                title: 'Marketing Strategies',\n                description: 'Strategic plans created to achieve your company\\'s marketing goals.',\n                create_button: 'Create New Strategy',\n                responsible: 'Responsible',\n                last_update: 'Last Update',\n                mock: {\n                    strategy1_title: 'Q3 2024 Growth Strategy',\n                    strategy2_title: 'New Product Launch Plan (Project Phoenix)',\n                    strategy3_title: 'Content Marketing Roadmap',\n                    strategy4_title: 'Social Media Engagement Strategy',\n                    strategy5_title: 'SEO Optimization Plan',\n                    status_active: 'Active',\n                    status_draft: 'Draft',\n                    status_archived: 'Archived',\n                    status_review: 'In Review',\n                    update_1w: '1 week ago',\n                    update_2d: '2 days ago',\n                    update_3w: '3 weeks ago',\n                    update_2m: '2 months ago',\n                    update_yesterday: 'yesterday',\n                    owner_marketing: 'Marketing Team',\n                    owner_product_m: 'Product Marketing',\n                    owner_content: 'Content Team',\n                    owner_social: 'Social Media Team',\n                    owner_seo: 'SEO Specialist',\n                }\n            },\n            audiences: {\n                title: 'Audiences',\n                description: 'Defined audience segments for your marketing campaigns.',\n                create_button: 'Create New Audience',\n                header_name: 'Audience Name',\n                header_desc: 'Description',\n                header_size: 'Estimated Size',\n                header_status: 'Status',\n                mock: {\n                    audience1_name: 'Tech-Savvy Young Professionals',\n                    audience1_desc: 'Ages 25-35, living in big cities, interested in technology and innovation.',\n                    audience2_name: 'Sustainable Living Advocates',\n                    audience2_desc: 'Individuals aged 30-45 who prefer eco-friendly products and organic food.',\n                    audience3_name: 'Esports and Gaming Enthusiasts',\n                    audience3_desc: 'Ages 18-28, playing competitive games and following live streams.',\n                    audience4_name: 'New Parents',\n                    audience4_desc: 'Couples with children aged 0-3, looking for baby products and family activities.',\n                    audience5_name: 'Luxury Consumers',\n                    audience5_desc: 'High-income individuals aged 40+, who value brand and quality.',\n                    status_active: 'Active',\n                    status_testing: 'Testing',\n                    status_inactive: 'Inactive',\n                }\n            },\n            impactAnalysis: {\n                title: 'Attribution Engine',\n                attributionTitle: 'Data-Driven Attribution Engine',\n                attributionDescription: 'Go beyond the last-click fallacy and see the true contribution of each channel to your sales.',\n                markovTooltip: 'Markov Chains: Maps customer journeys to understand the probability of moving from one channel to another, calculating how the absence of one channel would affect sales.',\n                shapleyTooltip: 'Shapley Values: A concept from game theory that fairly distributes the credit for the total sales \"victory\" among all marketing channels, considering all possible journey combinations.',\n                strategicInsightTitle: 'Strategic Insight',\n                strategicInsightDescription: \"Although your blog posts generate no direct sales, our model identified them as a critical 'persuasion' step in the journey of <span class='text-amber-200'>60%</span> of your <span class='font-bold'>'Champion'</span> customers. Without your blog, you would have lost an estimated <span class='font-bold text-white'>$2,500</span> in revenue.\",\n                chartTitle: 'Channel Contribution: True Value (Model) vs. Last-Click',\n                trueContribution: 'True Contribution (Model)',\n                lastClick: 'Last-Click Value',\n                channels: {\n                    google_ads: 'Google Ads',\n                    meta_ads: 'Meta Ads',\n                    organic_search: 'Organic Search',\n                    blog_content: 'Blog Content',\n                    email_marketing: 'Email Marketing'\n                },\n            },\n            reports: {\n                title: 'Report Templates',\n                description: 'Quickly generate detailed and professional marketing reports using ready-made templates.',\n                create_button: 'Create Report',\n                template1_title: 'Monthly Performance Report',\n                template1_desc: 'A monthly summary of key performance metrics (visitors, conversions, engagement) across all channels (web, social, ads).',\n                template2_title: 'Ad Spend Profitability Report (POAS)',\n                template2_desc: 'A detailed analysis showing not just revenue, but the net profit of your ad campaigns. See which campaigns are truly profitable.',\n                template3_title: 'Audience Analysis Report',\n                template3_desc: 'Compare the demographics, behaviors, and engagement rates of your most valuable audience segments.',\n                template4_title: 'Market Trends and Competitor Summary',\n                template4_desc: 'Summarizes the latest trends in your industry, rising keywords, and standout activities from your competitors.',\n            },\n             customers: {\n                title: 'Customers',\n                description: 'A list of your current and potential customers. Click on a customer for details.',\n                add_button: 'Add New Customer',\n                champion_candidates: 'New Champion Candidates',\n                suggestion_title: 'New Champion Candidate:',\n                predicted_ltv_label: 'Predicted Lifetime Value (LTV):',\n                header_customer: 'Customer',\n                header_company: 'Company',\n                header_status: 'Status',\n                header_last_contact: 'Last Contact',\n                header_ltv: 'Predicted LTV',\n                view_profile_aria: 'view profile',\n                close_button: 'Close',\n                timeline_title: 'Customer Timeline',\n                statuses: {\n                    status_aktif: 'Active',\n                    status_potansiyel: 'Potential',\n                    status_riskli: 'At Risk',\n                    status_kaybedildi: 'Lost',\n                }\n            },\n             products: {\n                title: 'Products',\n                description: 'Analyze product performance, potential, and stock status.',\n                add_button: 'Add New Product',\n                profit_engine_title: 'Profit Optimization Engine',\n                stock_intel_title: 'Stock Intelligence Suggestions',\n                why_button: 'Why?',\n                headers: {\n                    product: 'Product',\n                    price: 'Price',\n                    profit_margin: 'Profit Margin',\n                    visits_conversion: 'Visits & Conversion',\n                    visits_label: 'Visits',\n                    stock_status: 'Stock Status',\n                    potential_score: 'Potential Score',\n                },\n                price_suggestion: {\n                    title: 'Price Optimization Suggestion',\n                    profit_impact: 'Estimated Monthly Profit Impact',\n                    apply_button: 'Apply Price',\n                },\n                stock_suggestion: {\n                    details_button: 'View Details',\n                    create_campaign_button: 'Create Campaign',\n                },\n                stock_statuses: {\n                    high: 'High',\n                    normal: 'Normal',\n                    low: 'Low',\n                    out_of_stock: 'Out of Stock',\n                }\n            },\n            loyalty: {\n                title: 'Future Customer: Predictive Loyalty',\n                description: 'Predict your customers\\' future behavior. Turn your marketing from reactive to proactive by offering the right person the right offer at the right time.',\n                customers: 'Customers',\n                create_campaign: 'Create Campaign',\n                segments: {\n                    on_the_verge: 'On the Verge of Purchase',\n                    on_the_verge_desc: 'Hot leads with a high probability of making a repeat purchase based on recent behavior.',\n                    loyal: 'Loyal and Secure',\n                    loyal_desc: 'Your core audience that shops regularly and has a low risk of churn.',\n                    at_risk: 'High Churn Risk',\n                    at_risk_desc: 'Customers who used to shop frequently but have become inactive recently, carrying a churn risk.',\n                    window_shoppers: 'Window Shoppers',\n                    window_shoppers_desc: 'Customers showing moderate interest who can be easily won over with the right offer or communication.',\n                },\n                suggestions: {\n                    signal_title: \"Purchase Signal\",\n                    signal_desc: \"250 customers who bought the 'Tropical Print' bikini last summer are 80% likely to buy an item from the new collection this week.\",\n                    signal_action: \"Send New Season Email\",\n                    risk_title: \"Churn Risk Alert\",\n                    risk_desc: \"35 previously frequent customers haven't visited your site in 90 days. The risk of losing them is high.\",\n                    risk_action: \"Send 'We Miss You' Discount\",\n                }\n            },\n            opportunities: {\n                title: 'Opportunity Calendar',\n                description: 'Dynamic recommendations that allow you to promote the right product with the right message at the right time, instead of random discounts.',\n                product: 'Product',\n                timing: 'Timing',\n                reason: 'Reason',\n                create_campaign_button: 'Create Campaign',\n                opp1_title: \"Pre-Holiday Campaign\",\n                opp1_desc: \"The holiday is 2 weeks away. The 'Leather Backpack' is both popular and well-stocked. Highlight this product with a 'Is Your Suitcase Ready?' themed campaign.\",\n                opp1_product: \"Leather Backpack\",\n                opp1_timing: \"Recommendation: Launch within the next 2 days\",\n                opp1_reason: \"Upcoming holiday and high stock level.\",\n                opp2_title: \"Flash Sale Opportunity\",\n                opp2_desc: \"Page views for the 'Wireless Headphones Pro' have increased by 200% in the last 7 days. Capitalize on this interest with a 24-hour flash sale.\",\n                opp2_product: \"Wireless Headphones Pro\",\n                opp2_timing: \"Recommendation: Launch tonight at 00:00\",\n                opp2_reason: \"Sudden surge in popularity.\",\n                opp3_title: \"Competitor Weakness Opportunity\",\n                opp3_desc: \"Your main competitor 'StyleClothing' is detected to have stock issues with their best-selling t-shirt. Gain market share with an ad campaign for your 'Organic Cotton T-Shirt'.\",\n                opp3_product: \"Organic Cotton T-Shirt\",\n                opp3_timing: \"Recommendation: Launch immediately\",\n                opp3_reason: \"Competitor stock issue.\",\n            },\n            autopilot: {\n                title: 'Autopilot Mode',\n                description: 'Set your marketing goal and leave the rest to AI. Budget and funnel management are optimized 24/7, fully autonomously.',\n                control_panel_title: 'Autopilot Control Panel',\n                control_panel_desc: 'Put your marketing department on autonomous mode.',\n                active: 'Active',\n                inactive: 'Inactive',\n                monthly_revenue_goal: 'Monthly Revenue Goal',\n                funnel_title: 'Dynamic Budget Allocation',\n                activity_log: 'Activity Log',\n                start_autopilot: 'Start Autopilot',\n                start_description: 'Set your goal and budget to begin.',\n                monthly_revenue_goal_label: 'Monthly Revenue Goal',\n                monthly_budget_label: 'Total Monthly Budget',\n                activate_button: 'Activate Autopilot',\n                funnel: {\n                    awareness: 'Awareness',\n                    engagement: 'Engagement',\n                    conversion: 'Conversion',\n                },\n                log: {\n                    time1: '14:30',\n                    action1: 'Conversion budget increased by 5% (Weekend demand).',\n                    time2: '11:15',\n                    action2: 'Engagement budget decreased by 10%, shifted to Awareness.',\n                    time3: '09:00',\n                    action3: 'Budget shifted by 5% to Meta due to high Google Ads CPC.',\n                    time4: 'Yesterday 22:00',\n                    action4: 'Conversion campaign launched for new \"Warmed-up Audience\" segment.',\n                }\n            },\n            scenarios: {\n                title: 'Budget Scenarios',\n                description: 'Simulate the potential outcomes of different marketing budgets and make your strategic decisions based on data.',\n                simulator_title: 'Budget Simulator',\n                budget_label: 'Monthly Marketing Budget',\n                predictions_title: 'Predicted Outcomes',\n                predicted_revenue: 'Predicted Revenue',\n                predicted_customers: 'Predicted New Customers',\n                predicted_visitors: 'Predicted Visitors',\n                strategic_suggestion: 'Strategic Suggestion',\n                summary_high_budget: (p: string) => `Increasing the budget by ${p}%, especially by investing more in the 'Conversion' funnel, can significantly help you reach your month-end revenue goal. A notable increase in new customer acquisition is also expected.`,\n                summary_low_budget: (p: string) => `Cutting the budget by ${p}% could lead to a significant drop in revenue and new customer acquisition. In this scenario, focusing on the most profitable channels will be critical.`,\n                summary_normal_budget: `The current budget level projects steady growth. Minor budget adjustments will lead to proportional changes in revenue and customer acquisition metrics.`,\n            },\n            googlePerformance: {\n                title: 'Google Ads Performance',\n                description: 'A summary of your Search, Display, and Shopping campaigns.',\n                vs_last_month: 'vs. last month',\n                kpi: {\n                    roas: 'Return On Ad Spend (ROAS)',\n                    cpc: 'Cost Per Click (CPC)',\n                    conversions: 'Conversions',\n                    quality_score: 'Avg. Quality Score',\n                },\n                chart_title: 'ROAS & CPC Trend',\n                top_campaigns_title: 'Top Campaigns',\n                actions_title: 'Recommended Actions',\n                apply_button: 'Apply',\n                statuses: {\n                    active: 'Active',\n                    optimizing: 'Optimizing',\n                    budget_limited: 'Limited by budget',\n                },\n                campaigns: {\n                    brand: 'Brand Campaign - Exact Match',\n                    remarketing: 'Remarketing - Dynamic',\n                    competitor: 'Competitor Terms - Search',\n                    generic: 'General Apparel - Broad Match',\n                },\n                actions: {\n                    action1_title: 'Improve Low Quality Score Keywords',\n                    action1_desc: '3 keywords in the \"General Apparel\" campaign have a quality score below 4/10. Optimize the ad copy and landing pages for these keywords.',\n                    action2_title: 'Review Search Terms Report',\n                    action2_desc: 'Irrelevant search terms driving traffic to your brand campaign have been detected. Add these terms as negative keywords.',\n                    action3_title: 'Expand Remarketing List',\n                    action3_desc: 'Your audience list for users who visited in the last 90 days but did not convert is about to be maxed out. Create a new \"Add to Cart\" list.',\n                },\n                priorities: {\n                    high: 'High',\n                    medium: 'Medium'\n                }\n            },\n            metaPerformance: {\n                title: 'Meta Ads Performance',\n                description: 'A summary of your Facebook and Instagram campaigns.',\n                vs_last_week: 'vs. last week',\n                kpi: {\n                    roas: 'Return On Ad Spend (ROAS)',\n                    engagement_rate: 'Engagement Rate',\n                    cpl: 'Cost Per Lead',\n                    weekly_spend: 'Weekly Spend',\n                    spend: 'Spend'\n                },\n                weekly_performance_title: 'Weekly Performance',\n                top_creatives_title: 'Top Creatives',\n                actions_title: 'Recommended Actions',\n                apply_button: 'Apply',\n                days: {\n                    mon: 'Mon', tue: 'Tue', wed: 'Wed', thu: 'Thu', fri: 'Fri', sat: 'Sat', sun: 'Sun'\n                },\n                chart: {\n                    engagement: 'Engagement',\n                    conversions: 'Conversions'\n                },\n                creatives: {\n                    creative1_name: 'Summer Collection Video Ad',\n                    video: 'Video',\n                    creative2_name: 'Single Image Ad - White T-Shirt',\n                    image: 'Image',\n                    creative3_name: 'Carousel Ad - New Arrivals',\n                    carousel: 'Carousel',\n                },\n                actions: {\n                    action1_title: 'Create a Remarketing Audience',\n                    action1_desc: 'Create a special campaign for users who have visited your website in the last 30 days but have not made a purchase.',\n                    action2_title: 'Start an A/B Test',\n                    action2_desc: 'Increase the click-through rate by testing two different headline versions of your best-performing video ad.',\n                    action3_title: 'Try Advantage+ Audiences',\n                    action3_desc: 'Reach potential customers you couldn\\'t reach before by using Meta\\'s AI-powered audience targeting.',\n                },\n                priorities: {\n                    high: 'High',\n                    medium: 'Medium'\n                }\n            },\n            tiktokPerformance: {\n                title: 'TikTok Ads Performance',\n                description: 'A summary of your video campaigns and organic reach.',\n                vs_last_week: 'vs. last week',\n                views: 'Views',\n                views_short: 'Views',\n                eng_short: 'Eng.',\n                kpi: {\n                    total_views: 'Total Views',\n                    cpv: 'Cost Per View (CPV)',\n                    engagement_rate: 'Engagement Rate',\n                    conversions: 'Conversions',\n                },\n                chart_title: 'Weekly Views Trend',\n                top_videos_title: 'Top Videos',\n                actions_title: 'Recommended Actions',\n                apply_button: 'Apply',\n                days: {\n                    mon: 'Mon', tue: 'Tue', wed: 'Wed', thu: 'Thu', fri: 'Fri', sat: 'Sat', sun: 'Sun'\n                },\n                videos: {\n                    video1_name: '#dancechallenge Trend Video',\n                    video2_name: 'Product \"Unboxing\" Video',\n                    video3_name: '\"How To Use\" Tutorial Video',\n                },\n                actions: {\n                    action1_title: 'Use a Trending Sound',\n                    action1_desc: 'Create a new video using the currently popular \"Summer Vibes\" sound. Videos with this sound have a 200% higher view rate.',\n                    action2_title: 'Create a Spark Ads Campaign',\n                    action2_desc: 'Promote your most engaging \"#dancechallenge\" video with Spark Ads to reach a wider audience.',\n                    action3_title: 'Collaborate with an Influencer',\n                    action3_desc: 'Increase brand credibility and reach by collaborating with a micro-influencer in your niche.',\n                },\n                priorities: {\n                    high: 'High',\n                    medium: 'Medium'\n                }\n            },\n             tasks: {\n                title: 'Task Board',\n                description: 'Manage and track tasks across departments.',\n                add_button: 'Add New Task',\n                columns: {\n                    todo: 'To Do',\n                    in_progress: 'In Progress',\n                    done: 'Done',\n                },\n                priority: 'Priority',\n                priorities: {\n                    low: 'Low',\n                    medium: 'Medium',\n                    high: 'High',\n                },\n                modal: {\n                    title: 'Create New Task',\n                    task_title: 'Title',\n                    description: 'Description',\n                    assignee: 'Assignee Team',\n                    priority: 'Priority',\n                    due_date: 'Due Date',\n                    cancel: 'Cancel',\n                    add: 'Add Task',\n                }\n            },\n             ekip: {\n                title: 'Team Management',\n                description: 'List of team members using the platform.',\n                add_button: 'Add New Person',\n                send_email: 'Send Email',\n            },\n             audienceProfitability: {\n                title: 'Treasure Map: Audience Profitability Analysis',\n                description: 'Discover the true profitability (POAS: Profit on Ad Spend) of each of your ad audiences. See where your budget is flowing and where the treasures lie.',\n                suggestion_title: 'Budget Optimization Alert',\n                suggestion_desc: (audience: string, amount: string) => `The \"<span class=\"font-semibold text-amber-200\">${audience}</span>\" audience has lost you <span class=\"font-semibold text-rose-400\">${amount}</span> in the last 7 days.`,\n                suggestion_button: 'Automatically Shift Budget',\n                treasures_title: 'Golden Audiences (Treasures)',\n                pirates_title: 'Money-Burning Audiences (Pirates)',\n                poas: 'POAS',\n                profit: 'Profit',\n                spend: 'Spend',\n            },\n            automations: {\n                title: 'Automations',\n                description: 'Save time and increase your marketing efficiency by automating repetitive tasks.',\n                active: 'Active',\n                inactive: 'Inactive',\n                mock: {\n                    automation1_title: 'Share New Blog Post on Social Media',\n                    automation1_desc: 'When a new blog post is published, it is automatically shared on your designated social media accounts.',\n                    automation2_title: 'Send Weekly Performance Report',\n                    automation2_desc: 'Every Monday, a summary report containing last week\\'s key metrics is sent to your email address.',\n                    automation3_title: 'Welcome Email to New Leads',\n                    automation3_desc: 'When a new lead is added to your platform, a personalized welcome email is sent.',\n                    automation4_title: 'Pause Low-Performing Ads',\n                    automation4_desc: 'When an ad\\'s cost-per-click exceeds your set threshold, the ad campaign is automatically paused.',\n                    automation5_title: 'Send Notification on Competitor Mention',\n                    automation5_desc: 'You receive an instant notification when a specified competitor is mentioned on the web, keeping you informed of developments.',\n                    automation6_title: 'Add New Customer to CRM',\n                    automation6_desc: 'When a new customer is acquired through the platform, their contact information is automatically added to your CRM system.',\n                }\n            },\n            actions: {\n                title: 'Recommended Actions',\n                description: 'Personalized marketing tasks generated based on your data to accelerate your growth.',\n                effort: 'Effort',\n                why_button: 'Why?',\n                add_to_tasks_button: 'Add to Tasks',\n                categories: {\n                    all: 'All',\n                    seo: 'SEO',\n                    social: 'Social Media',\n                    content: 'Content Marketing',\n                    email: 'Email',\n                    cro: 'CRO',\n                },\n                priorities: {\n                    yüksek: 'High',\n                    orta: 'Medium',\n                    düşük: 'Low',\n                },\n                mock: {\n                    action1_title: 'Fix Broken Links',\n                    action1_desc: '404 errors on your website negatively affect user experience and SEO ranking. Analyze and fix these links.',\n                    action1_rationale: 'Search engines perceive 404 errors encountered while crawling your site as a negative signal. Your crawl errors have increased by 15% in the last 7 days. Fixing these errors improves user experience and directly boosts your SEO score.',\n                    action2_title: 'Share a High-Engagement Post',\n                    action2_desc: 'Increase engagement by preparing a poll, question, or \"tag a friend\" post that will capture your followers\\' interest.',\n                    action2_rationale: 'Your posts with the highest engagement in the last 30 days were polls. Similar content can increase your social media visibility by an average of 25% and attract new followers.',\n                    action4_title: 'Update an Existing Blog Post',\n                    action4_desc: 'Increase traffic to an old but popular blog post by updating it with new information and keywords.',\n                    action4_rationale: 'Your \"Success in E-commerce\" article has not been updated for 6 months but is still your 5th most visited article. Enriching the article with current data can improve its organic search ranking and increase traffic by 20%.',\n                    action5_title: 'Create an Abandoned Cart Email',\n                    action5_desc: 'Recoup potential sales by sending reminder emails to users who have not completed their purchase.',\n                    action5_rationale: 'Last month, products worth $1,500 were abandoned in carts. An automated reminder email can recover 15% to 25% of this lost revenue.',\n                    action6_title: 'Develop a Video Content Strategy',\n                    action6_desc: 'Increase brand awareness and engagement by producing short and engaging videos (Reels, Shorts).',\n                    action6_rationale: 'Your competitors have increased their video content by 50% in the last 3 months, and their engagement rates have risen by 30%. Video is currently the fastest-growing content format in your industry.',\n                    action7_title: 'Publish a Customer Success Story',\n                    action7_desc: 'Prepare a case study or blog post detailing the successes your customers have achieved with your product.',\n                    action7_rationale: '79% of potential customers state that case studies are influential in their purchasing decisions. A successful customer story builds trust by proving the value of your product.',\n                    action8_title: 'Launch a Re-engagement Campaign',\n                    action8_desc: 'Re-energize your list by reaching out to long-inactive subscribers with a special offer or content.',\n                    action8_rationale: '22% of your email list has not opened any of your emails in the last 90 days. A campaign with a special offer can reactivate 5-8% of these passive subscribers.',\n                    action9_title: 'Optimize Homepage CTA Button',\n                    action9_desc: 'The \"Get Started\" button on the homepage receives fewer clicks than expected according to heatmap analysis. Consider changing the button color and text.',\n                    action9_rationale: 'Heatmap data shows that users see the main CTA button but hesitate to click. Increasing color contrast and making the text more action-oriented (e.g., \"Try for Free\") can increase the click-through rate by 15-20%.',\n                    action10_title: 'Clarify Pricing Page Confusion',\n                    action10_desc: 'A high rate of \"rage clicks\" has been detected on the pricing page. This indicates users expect something to be clickable that isn\\'t. Differentiate the plans more clearly.',\n                    action10_rationale: 'Users are struggling to compare features of different pricing plans and are repeatedly clicking on non-clickable elements. This leads to frustration and an increased bounce rate. Simplifying the design will improve conversions.',\n                }\n            },\n            profitability: {\n                title: 'Profitability Dashboard',\n                description: 'View the real-time Profit & Loss (P&L) status of your marketing activities.',\n                pnlTitle: 'Marketing P&L Summary (Last 30 Days)',\n                revenue: 'Total Revenue',\n                cogs: 'Cost of Goods Sold (COGS)',\n                adSpend: 'Ad Spend',\n                shipping: 'Shipping & Logistics',\n                fees: 'Transaction Fees',\n                platformFee: 'Platform Fee',\n                grossProfit: 'Gross Profit',\n                netProfit: 'Net Profit',\n                insightTitle: 'Strategic Profitability Insight',\n                insightDescription: \"Customers from <b>Google Ads</b> have a <span class='text-emerald-400 font-bold'>13% higher gross profit margin</span> than those from <b>Meta</b>. Although Google Ads' CPC is higher, the customer lifetime value and average order value are superior.\",\n                channelProfitTitle: 'Net Profit Distribution by Channel',\n                productProfitTitle: 'Most Profitable Products',\n                profit: 'Net Profit',\n                margin: 'Margin',\n                channel: 'Channel',\n                product: 'Product',\n            },\n            collaborations: {\n                title: 'Collaboration Center',\n                description: 'Manage, measure, and optimize your influencer and affiliate marketing from a single place.',\n                add_button: 'Add New Collaboration',\n                highlightTitle: 'Influencer of the Month',\n                highlightDesc: (name: string, sales: string, commission: string) => `<span class='font-bold text-white'>${name}</span> brought in the highest revenue this month with <span class='font-bold text-white'>${sales}</span> in sales. Commission: <span class='font-bold text-white'>${commission}</span>.`,\n                warningTitle: 'Performance Warning',\n                warningDesc: (name: string) => `In the last 3 collaborations, traffic from <span class='font-bold text-white'>${name}</span> has a conversion rate below 0.1%. Consider reviewing this partnership.`,\n                leaderboardTitle: 'Performance Leaderboard',\n                header_influencer: 'Influencer',\n                header_sales: 'Sales Generated',\n                header_commission: 'Commission Earned',\n                header_conversion: 'Conversion Rate',\n            },\n            touchpointAnalysis: {\n                title: 'Touchpoint Analysis',\n                description: 'Review heatmaps from tools like Microsoft Clarity to see where your users click, how far they scroll, and where they struggle on your site.',\n                device: 'Device',\n                clicks: 'Clicks',\n                scroll_depth: 'Scroll Depth',\n                rage_clicks: 'Rage Clicks',\n                view_heatmap: 'View Heatmap',\n                mock: {\n                    heatmap1_page: 'Homepage',\n                    heatmap2_page: 'Homepage',\n                    heatmap3_page: 'Product Detail Page',\n                    heatmap4_page: 'Pricing Page',\n                    heatmap5_page: 'Pricing Page',\n                    heatmap6_page: 'Blog Post',\n                }\n            },\n            conversionWizard: {\n                 title: 'Conversion Wizard',\n                description: 'The AI scans your store like an expert, finds \"friction points\" that block sales, and gives you a prioritized to-do list.',\n                scan_button: 'Scan Again',\n                scan_button_loading: 'Scanning...',\n                last_scan: 'Last Scan:',\n                filters: {\n                    all: 'All',\n                    critical: 'Critical',\n                    important: 'Important',\n                    improvement: 'Improvement',\n                },\n                priorities: {\n                    critical: 'Critical',\n                    important: 'Important',\n                    improvement: 'Improvement',\n                },\n                categories: {\n                    technical: 'Technical',\n                    ux: 'User Experience',\n                    copy: 'Copywriting',\n                },\n                card_labels: {\n                    detection: 'Detection',\n                    impact: 'Impact',\n                    action: 'Action',\n                },\n                help_buttons: {\n                    how_to_guide: 'How-to Guide',\n                    copy_code: 'Copy Code',\n                },\n                mock: [\n                    {\n                        id: 1,\n                        priority: 'Critical',\n                        category: 'Technical',\n                        title: 'Speed Issue',\n                        detection: \"The 'Summer Collection' image on the homepage is too large (3MB) and slows down page load by 2 seconds.\",\n                        impact: 'This is likely causing you to lose an estimated 20% of your mobile visitors.',\n                        action: 'Resize and compress this image using an \"image compression\" tool and re-upload it.',\n                        helpLinkText: 'How-to Guide',\n                    },\n                    {\n                        id: 2,\n                        priority: 'Important',\n                        category: 'UX',\n                        title: 'Lack of Trust',\n                        detection: \"The checkout page is missing 'Secure Payment' icons (SSL, Visa/Mastercard).\",\n                        impact: 'Some customers may hesitate to enter their card details and abandon the cart.',\n                        action: \"Add these icons to the footer section of your Shopify theme.\",\n                        codeSnippet: '<img src=\"/secure-payment-icons.png\" alt=\"Secure Payment\" />'\n                    },\n                    {\n                        id: 3,\n                        priority: 'Improvement',\n                        category: 'Copywriting',\n                        title: 'Weak Copy',\n                        detection: \"The product title 'Black Bikini' is too generic.\",\n                        impact: 'Customers may struggle to understand the product\\'s benefits, and it may not appear in searches.',\n                        action: 'Try making the title more search-friendly and benefit-oriented, like \"High-Waist Tummy Control Black Bikini\".',\n                    },\n                    {\n                        id: 4,\n                        priority: 'Important',\n                        category: 'UX',\n                        title: 'Funnel Analysis: Cart Abandonment',\n                        detection: \"45% of customers abandon the checkout process after seeing the shipping fee.\",\n                        impact: 'Unexpected shipping costs are one of the biggest reasons for cart abandonment.',\n                        action: 'Consider offering free shipping above a certain cart value (e.g., $50) or incorporating shipping costs into the product prices.',\n                    }\n                ]\n            },\n            kpiAnalysis: {\n                title: 'KPI Deep Dive',\n                description: 'Select your key performance indicators and explore their performance across channels, trends over time, and AI insights.',\n                select_kpi: 'Select a KPI to analyze',\n                overall_performance: 'Overall Performance',\n                vs_last_30_days: 'vs. last 30 days',\n                channel_performance: 'Performance by Channel',\n                trend_30_days: 'Last 30-Day Trend',\n                ai_insight: 'AI Insight',\n                kpis: {\n                    roas: 'ROAS (Return On Ad Spend)',\n                    cpc: 'CPC (Cost Per Click)',\n                    conversion_rate: 'Conversion Rate',\n                    ctr: 'CTR (Click-Through Rate)',\n                    cpa: 'CPA (Cost Per Acquisition)',\n                    aov: 'AOV (Average Order Value)',\n                },\n                channels: {\n                    google: 'Google',\n                    meta: 'Meta',\n                    tiktok: 'TikTok',\n                    organic: 'Organic',\n                },\n                insights: {\n                    roas: 'Overall ROAS is in good shape, but ROAS on the **TikTok** channel is below average. You can increase ROI by optimizing the target audience and creatives in your TikTok campaigns.',\n                    cpc: '**Google** channel CPC is on an upward trend. Reviewing your negative keyword list and improving low Quality Score keywords can reduce costs.',\n                    conversion_rate: 'Your Conversion Rate is generally stable. Consider conducting CRO (Conversion Rate Optimization) on the most visited pages to increase the conversion rate from **Organic** traffic.',\n                    ctr: 'Click-Through Rates look healthy. The high CTR on the **Meta** channel, in particular, indicates that your ad copy and visuals are resonating with the target audience. You can test these successful creatives on other channels.',\n                    cpa: 'Your overall Cost Per Acquisition is within targets. However, the higher CPA on the **Google** channel is noteworthy. Find areas for improvement by analyzing the conversion funnel on this channel.',\n                    aov: 'Average Order Value is increasing, which is great! The AOV of users from the **Organic** channel is lower than others. You can increase the value by presenting \"upsell\" and \"cross-sell\" offers to this audience.',\n                }\n            },\n            gemiAI: {\n                title: 'Gemi AI',\n                description: 'Your personal marketing genius. Get help with everything from creating strategies to writing content.',\n                placeholder: 'Request a marketing strategy or ask a question...',\n                prompt_starters: [\n                    'Create a marketing persona for a vegan protein bar.',\n                    'Write 5 different Google Ads headlines for a summer fashion sale.',\n                    'Give me 3 creative ideas to increase Instagram engagement.',\n                    'Create an SEO checklist for my new e-commerce site.'\n                ]\n            }\n        }\n    }\n};\n","size_bytes":111100},"attached_assets/types_1753609852222.ts":{"content":"\n\nexport enum Page {\n  Dashboard = 'Dashboard',\n  MarketAnalysis = 'Pazar Analizi',\n  CompetitorAnalysis = 'Rakip Takibi',\n  ImpactAnalysis = 'Etki Analizi',\n  Strategy = 'Strateji',\n  Creative = 'Kreatif',\n  Reports = 'Raporlar',\n  Opportunities = 'Fırsatlar',\n  Scenarios = 'Senaryolar',\n  Google = 'Google Performansı',\n  Meta = 'Meta Performansı',\n  TikTok = 'TikTok Performansı',\n  Audiences = 'Hedef Kitleler',\n  Customers = 'Müşteriler',\n  People = 'Kişiler',\n  Products = 'Ürünler',\n  Loyalty = 'Sadakat',\n  Autopilot = 'Otopilot',\n  Actions = 'Aksiyonlar',\n  Tasks = 'Görevler',\n  Ekip = 'Ekip',\n  Automations = 'Otomatik Uygulamalar',\n  Connections = 'Bağlantılar',\n  Settings = 'Ayarlar',\n  AudienceProfitability = 'Kitle Kârlılığı',\n  Profitability = 'Kârlılık Paneli',\n  Collaborations = 'İş Birlikleri',\n  TouchpointAnalysis = 'Touchpoint Tespiti',\n  ConversionWizard = 'Dönüşüm Sihirbazı',\n  KpiAnalysis = 'KPI Analizi',\n  GemiAI = 'Gemi AI',\n  MediaPlan = 'Medya Planı',\n}\n\nexport type BusinessModel = 'E-Ticaret' | 'SaaS' | 'Hizmet Sağlayıcı' | 'Mobil Uygulama' | 'İçerik Yayıncısı';\nexport type Industry = 'Moda & Giyim' | 'Sağlık & Wellness' | 'Teknoloji & Yazılım' | 'Finans & Sigorta' | 'Yiyecek & İçecek' | 'Eğitim';\nexport type CustomerType = 'B2C' | 'B2B' | 'Her ikisi de';\nexport type BrandMaturity = 'Fikir' | 'Yeni Kurulmuş' | 'Büyüyen' | 'Oturmuş';\nexport type CompanySize = 'Tek Kişilik' | '2-10' | '11-50' | '51-200' | '200+';\nexport type MarketingGoal = 'Marka Bilinirliği' | 'Potensiyel Müşteri' | 'Satışları Artırma' | 'Müşteri Sadakati';\nexport type MonthlyRevenue = '0 - 50K' | '50K - 250K' | '250K - 1M' | '1M - 5M' | '5M+';\nexport type MonthlyAdBudget = '0 - 5K' | '5K - 25K' | '25K - 100K' | '100K - 500K' | '500K+';\nexport type BrandVoice = 'Profesyonel & Kurumsal' | 'Samimi & Arkadaşça' | 'Esprili & Eğlenceli' | 'Teknik & Bilgilendirici';\n\nexport interface BrandProfile {\n  businessModel?: BusinessModel;\n  industry?: Industry;\n  customerType?: CustomerType;\n  brandMaturity?: BrandMaturity;\n  companySize?: CompanySize;\n  marketingGoal?: MarketingGoal;\n  websiteUrl?: string;\n  monthlyRevenue?: MonthlyRevenue;\n  monthlyAdBudget?: MonthlyAdBudget;\n  mainCompetitors?: string;\n  targetAudienceDescription?: string;\n  brandVoice?: BrandVoice;\n}\n\n\nexport interface AnalysisResult {\n  summary: string;\n  trends: string[];\n  competitors: { name: string; analysis: string }[];\n  opportunities: string[];\n  risks: string[];\n  targetAudience: string;\n}\n\nexport interface WebInsight {\n  uri: string;\n  title: string;\n}\n\nexport interface GroundingMetadata {\n    groundingChunks: { web: WebInsight }[];\n}\n\nexport type TimelineEventType = 'Website' | 'Satın Alım' | 'E-posta' | 'Destek' | 'Reklam' | 'Sosyal Medya' | 'E-Ticaret';\n\nexport interface TimelineEvent {\n    id: number;\n    type: TimelineEventType;\n    title: string;\n    description: string;\n    date: string;\n    source?: string;\n    discountUsed?: boolean;\n}\n\nexport interface Customer {\n    id: number;\n    name: string;\n    email: string;\n    company: string;\n    status: 'Aktif' | 'Potansiyel' | 'Riskli' | 'Kaybedildi';\n    lastContact: string;\n    avatar: string;\n    timeline: TimelineEvent[];\n    predictedLtv: number;\n}\n\nexport interface LtvSuggestion {\n    customerId: number;\n    customerName: string;\n    customerEmail: string;\n    firstPurchaseSummary: string;\n    predictedLtv: number;\n    actionText: string;\n}\n\n\nexport type TaskPriority = 'Yüksek' | 'Orta' | 'Düşük';\n\nexport interface Action {\n  category: string;\n  title: string;\n  description: string;\n  priority: TaskPriority;\n  effort: 'Yüksek' | 'Orta' | 'Düşük';\n  rationale: string;\n}\n\nexport type TaskStatus = 'Yapılacak' | 'Yapılıyor' | 'Tamamlandı';\nexport type Team = 'Pazarlama' | 'Satış' | 'IT' | 'Ürün' | 'Tasarım';\n\nexport interface Task {\n    id: string;\n    title: string;\n    description: string;\n    status: TaskStatus;\n    priority: TaskPriority;\n    dueDate: string; \n    assignee: Team;\n}\n\nexport interface Person {\n  id: number;\n  name: string;\n  role: string;\n  email: string;\n  avatar: string;\n  team: Team;\n}\n\nexport interface Competitor {\n  id: number;\n  name: string;\n  url: string;\n  logo: string;\n  metrics: {\n    monthlyTraffic: string;\n    socialEngagement: string;\n    keywords: string;\n  };\n  trafficHistory: { month: string; traffic: number }[];\n}\n\nexport interface CausalImpactAnalysis {\n  channel: string;\n  icon: React.ReactNode;\n  attributedSales: number;\n  causalUplift: number;\n  naturalSales: number;\n}\n\nexport interface AnomalyAlert {\n  id: number;\n  metric: string;\n  change: string;\n  currentValue: string;\n  normalRange: string;\n  severity: 'Yüksek' | 'Orta';\n  time: string;\n}\n\nexport type StockStatus = 'Yüksek' | 'Normal' | 'Düşük' | 'Tükendi';\n\nexport interface Product {\n  id: number;\n  name: string;\n  category: string;\n  imageUrl: string;\n  price: number;\n  cost: number;\n  visits: number;\n  conversionRate: number;\n  potentialScore: number;\n  stock: number;\n  stockStatus: StockStatus;\n}\n\nexport interface StockSuggestion {\n  type: 'fırsat' | 'uyarı';\n  title: string;\n  description: string;\n  productName: string;\n  productId: number;\n}\n\nexport interface PriceSuggestion {\n    productId: number;\n    productName: string;\n    currentPrice: number;\n    suggestedPrice: number;\n    rationale: string;\n    profitImpact: number;\n}\n\nexport type PredictiveSegmentName = 'Satın Alma Eşiğinde' | 'Kayıp Riski Yüksek' | 'Sadık ve Güvende' | 'Fırsat Bekleyenler';\n\nexport interface PredictiveSegment {\n    name: PredictiveSegmentName;\n    description: string;\n    customerCount: number;\n    icon: React.ReactNode;\n}\n\nexport interface LoyaltySuggestion {\n    type: 'signal' | 'risk';\n    title: string;\n    description: string;\n    actionText: string;\n}\n\n\nexport interface PromotionOpportunity {\n    title: string;\n    description: string;\n    productName: string;\n    timing: string;\n    reason: string;\n    icon: React.ReactNode;\n}\n\nexport type AutopilotStatus = 'active' | 'inactive';\nexport type FunnelStage = 'Farkındalık' | 'Değerlendirme' | 'Dönüşüm';\n\nexport interface FunnelAllocation {\n    stage: FunnelStage;\n    percentage: number;\n}\n\nexport interface AutopilotLogEntry {\n    id: number;\n    time: string;\n    action: string;\n}\n\nexport interface AutopilotState {\n    status: AutopilotStatus;\n    goal: number;\n    budget: number;\n    currentValue: number;\n    funnel: FunnelAllocation[];\n    activityLog: AutopilotLogEntry[];\n}\n\nexport interface ScenarioPrediction {\n    revenue: number;\n    newCustomers: number;\n    visitors: number;\n}\n\nexport interface ChatMessage {\n  role: 'user' | 'model';\n  content: string;\n}\n\nexport interface ProfitableAudience {\n    id: number;\n    name: string;\n    platform: 'Google' | 'Meta' | 'TikTok';\n    poas: number; // Profit on Ad Spend\n    profit: number;\n    spend: number;\n    type: 'treasure' | 'pirate';\n}\n\nexport interface BudgetReallocationSuggestion {\n    sourceAudienceName: string;\n    targetAudienceName: string;\n    amountLost: number;\n}\n\nexport interface AttributionData {\n  channel: string;\n  trueContribution: number;\n  lastClickValue: number;\n}\n\nexport interface AttributionInsight {\n  title: string;\n  description: string;\n  icon: React.ReactNode;\n}\n\nexport interface ProfitabilityData {\n  revenue: number;\n  cogs: number;\n  adSpend: number;\n  shippingCosts: number;\n  transactionFees: number;\n  platformFee: number;\n  grossProfit: number;\n  netProfit: number;\n}\n\nexport interface ChannelProfitability {\n  channel: string;\n  profit: number;\n  margin: number;\n}\n\nexport interface ProductProfitability {\n  id: number;\n  name: string;\n  profit: number;\n  revenue: number;\n  margin: number;\n}\n\nexport interface Influencer {\n  id: number;\n  name:string;\n  instagramHandle: string;\n  avatar: string;\n  sales: number;\n  commission: number;\n  conversionRate: number;\n}\n\nexport interface CollaborationInsight {\n  type: 'highlight' | 'warning';\n  title: string;\n  description: string;\n  influencerName: string;\n  icon: React.ReactNode;\n}\n\nexport interface HeatmapData {\n    id: number;\n    pageUrl: string;\n    pageName: string;\n    device: 'Desktop' | 'Mobile';\n    heatmapUrl: string; // This will be a placeholder image\n    clicks: number;\n    scrollDepth: number;\n    rageClicks: number;\n}\n\nexport type ConversionInsightPriority = 'Kritik' | 'Önemli' | 'İyileştirme';\nexport type ConversionInsightCategory = 'Teknik' | 'UX' | 'Metin';\n\nexport interface ConversionInsight {\n    id: number;\n    priority: ConversionInsightPriority;\n    category: ConversionInsightCategory;\n    title: string;\n    detection: string;\n    impact: string;\n    action: string;\n    helpLink?: string;\n    helpLinkText?: string;\n    codeSnippet?: string;\n}\n\nexport type KpiKey = 'roas' | 'cpc' | 'conversion_rate' | 'ctr' | 'cpa' | 'aov';\nexport type KpiFormat = 'ratio' | 'currency' | 'percentage' | 'decimal';\n\nexport interface KpiDefinition {\n    key: KpiKey;\n    name: string;\n    format: KpiFormat;\n}\n\nexport interface KpiAnalysisData {\n    value: number;\n    change: number; // as percentage\n    trend: { date: string; value: number }[];\n    byChannel: { channel: string; value: number }[];\n    insight: string;\n}\n\nexport type MediaChannel = 'Google' | 'Meta' | 'TikTok' | 'İçerik' | 'Diğer';\n\nexport interface ChannelAllocation {\n  channel: MediaChannel;\n  budget: number;\n  funnelStage: FunnelStage;\n  estimatedKpi: string;\n}\n\nexport interface MediaPlan {\n  strategicRationale: string;\n  funnelAllocation: FunnelAllocation[];\n  channelBreakdown: ChannelAllocation[];\n}\n\n// Types for Customizable Dashboard\nexport type WidgetKey = 'statCards' | 'trafficChart' | 'alerts' | 'conversionChart' | 'audienceProfitability';\n\nexport interface Widget {\n    key: WidgetKey;\n    title: string;\n}\n\nexport type DateRangeKey = '7d' | '30d' | '90d';\nexport type PlatformKey = 'all' | 'google' | 'meta' | 'tiktok';\n","size_bytes":9952},"attached_assets/vite.config_1753609852222.ts":{"content":"import path from 'path';\nimport { defineConfig, loadEnv } from 'vite';\n\nexport default defineConfig(({ mode }) => {\n    const env = loadEnv(mode, '.', '');\n    return {\n      define: {\n        'process.env.API_KEY': JSON.stringify(env.GEMINI_API_KEY),\n        'process.env.GEMINI_API_KEY': JSON.stringify(env.GEMINI_API_KEY)\n      },\n      resolve: {\n        alias: {\n          '@': path.resolve(__dirname, '.'),\n        }\n      }\n    };\n});\n","size_bytes":442},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const PORT = process.env.PORT || 3001;\n  server.listen({\n    port: PORT,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${PORT}`);\n  });\n})();","size_bytes":2055},"server/mockData.ts":{"content":"\n// Mock data for testing attribution models\nexport const mockCustomerJourneys = [\n  {\n    id: 1,\n    customerId: 'customer_001',\n    purchaseValue: 1500,\n    touchpoints: [\n      { channel: 'Google Ads', timestamp: '2024-01-15T10:00:00Z', type: 'click' },\n      { channel: 'Email Marketing', timestamp: '2024-01-16T14:30:00Z', type: 'open' },\n      { channel: 'Facebook Ads', timestamp: '2024-01-17T09:15:00Z', type: 'click' },\n      { channel: 'Direct', timestamp: '2024-01-17T16:45:00Z', type: 'purchase' }\n    ]\n  },\n  {\n    id: 2,\n    customerId: 'customer_002', \n    purchaseValue: 2300,\n    touchpoints: [\n      { channel: 'Organic Search', timestamp: '2024-01-20T11:20:00Z', type: 'visit' },\n      { channel: 'Google Ads', timestamp: '2024-01-21T13:10:00Z', type: 'click' },\n      { channel: 'Email Marketing', timestamp: '2024-01-22T10:05:00Z', type: 'click' },\n      { channel: 'Direct', timestamp: '2024-01-22T15:30:00Z', type: 'purchase' }\n    ]\n  }\n];\n\nexport const calculateLastClickAttribution = (journeys: typeof mockCustomerJourneys) => {\n  const channelValues: Record<string, number> = {};\n  \n  journeys.forEach(journey => {\n    const lastTouchpoint = journey.touchpoints[journey.touchpoints.length - 2]; // Son purchase'dan önceki\n    if (lastTouchpoint) {\n      channelValues[lastTouchpoint.channel] = (channelValues[lastTouchpoint.channel] || 0) + journey.purchaseValue;\n    }\n  });\n  \n  return channelValues;\n};\n\nexport const calculateFirstClickAttribution = (journeys: typeof mockCustomerJourneys) => {\n  const channelValues: Record<string, number> = {};\n  \n  journeys.forEach(journey => {\n    const firstTouchpoint = journey.touchpoints[0];\n    if (firstTouchpoint) {\n      channelValues[firstTouchpoint.channel] = (channelValues[firstTouchpoint.channel] || 0) + journey.purchaseValue;\n    }\n  });\n  \n  return channelValues;\n};\n\nexport const calculateLinearAttribution = (journeys: typeof mockCustomerJourneys) => {\n  const channelValues: Record<string, number> = {};\n  \n  journeys.forEach(journey => {\n    const nonPurchaseTouchpoints = journey.touchpoints.filter(tp => tp.type !== 'purchase');\n    const valuePerTouchpoint = journey.purchaseValue / nonPurchaseTouchpoints.length;\n    \n    nonPurchaseTouchpoints.forEach(touchpoint => {\n      channelValues[touchpoint.channel] = (channelValues[touchpoint.channel] || 0) + valuePerTouchpoint;\n    });\n  });\n  \n  return channelValues;\n};\n","size_bytes":2412},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { analyzeMarket, analyzePerformance, generateRecommendations } from \"./services/geminiService\";\nimport { insertBrandProfileSchema, insertTaskSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Test mode - bypass authentication for development\n  app.get('/api/auth/test-user', async (req: any, res) => {\n    try {\n      // Create or get test user\n      const testUser = {\n        id: 'test-user-123',\n        email: 'test@example.com',\n        firstName: 'Test',\n        lastName: 'User',\n        profileImageUrl: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=60&h=60',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      // Upsert test user\n      await storage.upsertUser(testUser);\n      res.json(testUser);\n    } catch (error) {\n      console.error(\"Error with test user:\", error);\n      res.status(500).json({ message: \"Failed to get test user\" });\n    }\n  });\n\n  // Brand profile routes\n  app.get('/api/brand-profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profile = await storage.getBrandProfile(userId);\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error fetching brand profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch brand profile\" });\n    }\n  });\n\n  app.post('/api/brand-profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profileData = insertBrandProfileSchema.parse({ ...req.body, userId });\n\n      const existingProfile = await storage.getBrandProfile(userId);\n      let profile;\n\n      if (existingProfile) {\n        profile = await storage.updateBrandProfile(userId, profileData);\n      } else {\n        profile = await storage.createBrandProfile(profileData);\n      }\n\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error saving brand profile:\", error);\n      res.status(500).json({ message: \"Failed to save brand profile\" });\n    }\n  });\n\n  // Platform connections routes\n  app.get('/api/connections', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      let connections = await storage.getPlatformConnections(userId);\n\n      // Eğer hiç bağlantı yoksa, mock data döndür\n      if (connections.length === 0) {\n        connections = [\n          {\n            id: '1',\n            userId,\n            platform: 'shopify',\n            isConnected: false,\n            accountName: '',\n            lastSyncAt: null,\n            createdAt: new Date(),\n            updatedAt: new Date(),\n          },\n          {\n            id: '2',\n            userId,\n            platform: 'meta',\n            isConnected: false,\n            accountName: '',\n            lastSyncAt: null,\n            createdAt: new Date(),\n            updatedAt: new Date(),\n          },\n          {\n            id: '3',\n            userId,\n            platform: 'google_ads',\n            isConnected: false,\n            accountName: '',\n            lastSyncAt: null,\n            createdAt: new Date(),\n            updatedAt: new Date(),\n          },\n          {\n            id: '4',\n            userId,\n            platform: 'google_analytics',\n            isConnected: false,\n            accountName: '',\n            lastSyncAt: null,\n            createdAt: new Date(),\n            updatedAt: new Date(),\n          },\n          {\n            id: '5',\n            userId,\n            platform: 'google_search_console',\n            isConnected: false,\n            accountName: '',\n            lastSyncAt: null,\n            createdAt: new Date(),\n            updatedAt: new Date(),\n          },\n          {\n            id: '6',\n            userId,\n            platform: 'tiktok',\n            isConnected: false,\n            accountName: '',\n            lastSyncAt: null,\n            createdAt: new Date(),\n            updatedAt: new Date(),\n          },\n        ];\n      }\n\n      res.json(connections);\n    } catch (error) {\n      console.error(\"Error fetching connections:\", error);\n      res.status(500).json({ message: \"Failed to fetch connections\" });\n    }\n  });\n\n  // Dashboard data route\n  app.get('/api/dashboard', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { dateRange, platform } = req.query;\n\n      // Get marketing metrics for the specified period\n      const metrics = await storage.getMarketingMetrics(userId, platform as string);\n\n      // Calculate aggregated data\n      const totalRevenue = metrics.reduce((sum, m) => sum + (parseFloat(m.revenue?.toString() || '0')), 0);\n      const totalAdSpend = metrics.reduce((sum, m) => sum + (parseFloat(m.adSpend?.toString() || '0')), 0);\n      const avgRoas = totalAdSpend > 0 ? totalRevenue / totalAdSpend : 0;\n      const totalConversions = metrics.reduce((sum, m) => sum + (m.conversions || 0), 0);\n\n      const dashboardData = {\n        totalRevenue,\n        totalAdSpend,\n        avgRoas,\n        totalConversions,\n        metrics: metrics.slice(0, 10) // Last 10 records for charts\n      };\n\n      res.json(dashboardData);\n    } catch (error) {\n      console.error(\"Error fetching dashboard data:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard data\" });\n    }\n  });\n\n  // Marketing metrics routes\n  app.get('/api/metrics', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { platform } = req.query;\n      const metrics = await storage.getMarketingMetrics(userId, platform as string);\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error fetching metrics:\", error);\n      res.status(500).json({ message: \"Failed to fetch metrics\" });\n    }\n  });\n\n  // AI Analysis routes\n  app.post('/api/ai/market-analysis', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { industry, websiteUrl, competitors } = req.body;\n\n      const analysis = await analyzeMarket(industry, websiteUrl, competitors);\n\n      // Save analysis to database\n      await storage.insertAIAnalysis({\n        userId,\n        analysisType: 'market',\n        data: analysis,\n        insights: analysis.summary,\n      });\n\n      res.json(analysis);\n    } catch (error) {\n      console.error(\"Error in market analysis:\", error);\n      res.status(500).json({ message: \"Failed to analyze market\" });\n    }\n  });\n\n  app.post('/api/ai/performance-analysis', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const metricsData = req.body;\n\n      const insights = await analyzePerformance(metricsData);\n\n      // Save analysis to database\n      await storage.insertAIAnalysis({\n        userId,\n        analysisType: 'performance',\n        data: insights,\n        insights: 'Performance insights generated',\n      });\n\n      res.json(insights);\n    } catch (error) {\n      console.error(\"Error in performance analysis:\", error);\n      res.status(500).json({ message: \"Failed to analyze performance\" });\n    }\n  });\n\n  app.post('/api/ai/chat', isAuthenticated, async (req: any, res) => {\n    try {\n      const { message, context } = req.body;\n      const response = await generateRecommendations(context || '', message);\n      res.json({ response });\n    } catch (error) {\n      console.error(\"Error in AI chat:\", error);\n      res.status(500).json({ message: \"Failed to generate response\" });\n    }\n  });\n\n  // Tasks routes\n  app.get('/api/tasks', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const tasks = await storage.getTasks(userId);\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.post('/api/tasks', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const taskData = insertTaskSchema.parse({ ...req.body, userId });\n      const task = await storage.createTask(taskData);\n      res.json(task);\n    } catch (error) {\n      console.error(\"Error creating task:\", error);\n      res.status(500).json({ message: \"Failed to create task\" });\n    }\n  });\n\n  app.put('/api/tasks/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const task = await storage.updateTask(id, updates);\n      res.json(task);\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n      res.status(500).json({ message: \"Failed to update task\" });\n    }\n  });\n\n  // Dashboard data aggregation endpoint\n  app.get('/api/dashboard', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { dateRange, platform } = req.query;\n\n      // Get recent metrics\n      const metrics = await storage.getMarketingMetrics(userId, platform as string);\n\n      // Calculate aggregated data\n      const totalRevenue = metrics.reduce((sum, m) => sum + Number(m.revenue || 0), 0);\n      const totalAdSpend = metrics.reduce((sum, m) => sum + Number(m.adSpend || 0), 0);\n      const totalConversions = metrics.reduce((sum, m) => sum + Number(m.conversions || 0), 0);\n      const avgRoas = totalAdSpend > 0 ? totalRevenue / totalAdSpend : 0;\n\n      const dashboardData = {\n        totalRevenue,\n        totalAdSpend,\n        avgRoas,\n        totalConversions,\n        metrics: metrics.slice(0, 30), // Last 30 records for charts\n      };\n\n      res.json(dashboardData);\n    } catch (error) {\n      console.error(\"Error fetching dashboard data:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard data\" });\n    }\n  });\n\n  // OAuth callback routes\n  app.get('/api/shopify/callback', async (req: any, res) => {\n    try {\n      const { code, shop, state } = req.query;\n      const userId = state; // We'll pass userId as state parameter\n\n      // Exchange code for access token\n      const tokenResponse = await fetch(`https://${shop}.myshopify.com/admin/oauth/access_token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          client_id: process.env.SHOPIFY_API_KEY,\n          client_secret: process.env.SHOPIFY_API_SECRET,\n          code,\n        }),\n      });\n\n      const tokenData = await tokenResponse.json();\n\n      if (tokenData.access_token) {\n        // Store connection\n        await storage.upsertPlatformConnection({\n          userId,\n          platform: 'shopify',\n          isConnected: true,\n          accessToken: tokenData.access_token,\n          accountId: shop,\n          accountName: shop,\n        });\n\n        res.redirect('/settings?connection=success&platform=shopify');\n      } else {\n        res.redirect('/settings?connection=error&platform=shopify');\n      }\n    } catch (error) {\n      console.error('Shopify OAuth error:', error);\n      res.redirect('/settings?connection=error&platform=shopify');\n    }\n  });\n\n  app.get('/api/google/callback', async (req: any, res) => {\n    try {\n      const { code, state } = req.query;\n      const userId = state;\n\n      // Exchange code for access token\n      const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          client_id: process.env.GOOGLE_CLIENT_ID || '',\n          client_secret: process.env.GOOGLE_CLIENT_SECRET || '',\n          code,\n          grant_type: 'authorization_code',\n          redirect_uri: `${process.env.REPLIT_DEV_DOMAIN || 'http://localhost:5000'}/api/google/callback`,\n        }),\n      });\n\n      const tokenData = await tokenResponse.json();\n\n      if (tokenData.access_token) {\n        // Get user info to determine account\n        const userResponse = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {\n          headers: {\n            'Authorization': `Bearer ${tokenData.access_token}`,\n          },\n        });\n\n        const userData = await userResponse.json();\n\n        await storage.upsertPlatformConnection({\n          userId,\n          platform: 'google_ads',\n          isConnected: true,\n          accessToken: tokenData.access_token,\n          refreshToken: tokenData.refresh_token,\n          accountName: userData.email,\n        });\n\n        res.redirect('/settings?connection=success&platform=google');\n      } else {\n        res.redirect('/settings?connection=error&platform=google');\n      }\n    } catch (error) {\n      console.error('Google OAuth error:', error);\n      res.redirect('/settings?connection=error&platform=google');\n    }\n  });\n\n  app.get('/api/meta/callback', async (req: any, res) => {\n    try {\n      const { code, state } = req.query;\n      const userId = state;\n\n      // Exchange code for access token\n      const tokenResponse = await fetch('https://graph.facebook.com/v18.0/oauth/access_token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          client_id: process.env.META_APP_ID || '',\n          client_secret: process.env.META_APP_SECRET || '',\n          redirect_uri: `${process.env.REPLIT_DEV_DOMAIN || 'http://localhost:5000'}/api/meta/callback`,\n          code,\n        }),\n      });\n\n      const tokenData = await tokenResponse.json();\n\n      if (tokenData.access_token) {\n        // Get user info\n        const userResponse = await fetch(`https://graph.facebook.com/v18.0/me?access_token=${tokenData.access_token}`);\n        const userData = await userResponse.json();\n\n        await storage.upsertPlatformConnection({\n          userId,\n          platform: 'meta',\n          isConnected: true,\n          accessToken: tokenData.access_token,\n          accountName: userData.name,\n        });\n\n        res.redirect('/settings?connection=success&platform=meta');\n      } else {\n        res.redirect('/settings?connection=error&platform=meta');\n      }\n    } catch (error) {\n      console.error('Meta OAuth error:', error);\n      res.redirect('/settings?connection=error&platform=meta');\n    }\n  });\n\n  app.get('/api/analytics/callback', async (req: any, res) => {\n    try {\n      const { code } = req.query;\n      // Google Analytics OAuth token exchange\n      res.redirect('/?connection=success&platform=analytics');\n    } catch (error) {\n      res.redirect('/?connection=error&platform=analytics');\n    }\n  });\n\n  app.get('/api/tiktok/callback', async (req: any, res) => {\n    try {\n      const { code } = req.query;\n      // TikTok OAuth token exchange\n      res.redirect('/?connection=success&platform=tiktok');\n    } catch (error) {\n      res.redirect('/?connection=error&platform=tiktok');\n    }\n  });\n\n  app.get('/api/search-console/callback', async (req: any, res) => {\n    try {\n      const { code } = req.query;\n      // Google Search Console OAuth token exchange\n      res.redirect('/?connection=success&platform=search-console');\n    } catch (error) {\n      res.redirect('/?connection=error&platform=search-console');\n    }\n  });\n\n  // Platform connection routes\n  app.post('/api/platforms/connect', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { platform, credentials } = req.body;\n\n      // Test connection first\n      const { PlatformManager } = await import('./services/platformManager');\n      const manager = new PlatformManager(userId);\n\n      // Store or update connection\n      const connectionData = {\n        userId,\n        platform,\n        isConnected: true,\n        accessToken: credentials.accessToken,\n        refreshToken: credentials.refreshToken,\n        accountId: credentials.accountId,\n        accountName: credentials.accountName,\n      };\n\n      const existingConnection = await storage.getPlatformConnections(userId);\n      const existing = existingConnection.find(c => c.platform === platform);\n\n      if (existing) {\n        await storage.updatePlatformConnection(existing.id, connectionData);\n      } else {\n        await storage.createPlatformConnection(connectionData);\n      }\n\n      res.json({ success: true, message: 'Platform başarıyla bağlandı' });\n    } catch (error) {\n      console.error(\"Error connecting platform:\", error);\n      res.status(500).json({ message: \"Platform bağlantısı başarısız\" });\n    }\n  });\n\n  app.post('/api/platforms/disconnect', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { platform } = req.body;\n\n      const connections = await storage.getPlatformConnections(userId);\n      const connection = connections.find(c => c.platform === platform);\n\n      if (connection) {\n        await storage.updatePlatformConnection(connection.id, { isConnected: false });\n      }\n\n      res.json({ success: true, message: 'Platform bağlantısı kesildi' });\n    } catch (error) {\n      console.error(\"Error disconnecting platform:\", error);\n      res.status(500).json({ message: \"Platform bağlantısı kesilemedi\" });\n    }\n  });\n\n  app.post('/api/platforms/sync', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { platform, startDate, endDate } = req.body;\n\n      const { PlatformManager } = await import('./services/platformManager');\n      const manager = new PlatformManager(userId);\n\n      if (platform === 'all') {\n        await manager.syncAllPlatforms(startDate || '30daysAgo', endDate || 'today');\n      } else {\n        await manager.syncPlatform(platform, startDate || '30daysAgo', endDate || 'today');\n      }\n\n      res.json({ success: true, message: 'Veri senkronizasyonu başarılı' });\n    } catch (error) {\n      console.error(\"Error syncing platform data:\", error);\n      res.status(500).json({ message: \"Veri senkronizasyonu başarısız\" });\n    }\n  });\n\n  app.post('/api/platforms/test', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { platform } = req.body;\n\n      const { PlatformManager } = await import('./services/platformManager');\n      const manager = new PlatformManager(userId);\n\n      const isConnected = await manager.testConnection(platform);\n\n      res.json({ connected: isConnected });\n    } catch (error) {\n      console.error(\"Error testing platform connection:\", error);\n      res.status(500).json({ message: \"Bağlantı testi başarısız\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\nimport { Router } from 'express';\nconst router = Router();\nimport { croAnalysisService } from './services/croAnalysisService';\n\n// Attribution routes\nrouter.get('/api/attribution/models', async (req, res) => {\n  try {\n    const models = [\n      { id: 'last_click', name: 'Son Tıklama', description: 'Satışı tamamlayan son adımı ödüllendirir.' },\n      { id: 'first_click', name: 'İlk Tıklama', description: 'Müşteriyi seninle ilk tanıştıran adımı ödüllendirir.' },\n      { id: 'linear', name: 'Lineer Model', description: 'Yolculuktaki tüm adımlara eşit pay verir.' }\n    ];\n    res.json(models);\n  } catch (error) {\n    res.status(500).json({ error: 'Atıflandırma modelleri alınamadı' });\n  }\n});\n\nrouter.post('/api/attribution/calculate', async (req, res) => {\n  try {\n    const { model, dateRange } = req.body;\n\n    // Mock data - gerçek implementasyonda customer_journeys tablosundan gelecek\n    const mockResults = {\n      channels: [\n        { name: 'Google Ads', attribution: 45000, percentage: 35 },\n        { name: 'Facebook Ads', attribution: 32000, percentage: 25 },\n        { name: 'Email Marketing', attribution: 19000, percentage: 15 },\n        { name: 'Organic Search', attribution: 16000, percentage: 12.5 },\n        { name: 'Direct', attribution: 16000, percentage: 12.5 }\n      ],\n      totalRevenue: 128000,\n      model: model\n    };\n\n    res.json(mockResults);\n  } catch (error) {\n    res.status(500).json({ error: 'Atıflandırma hesaplaması yapılamadı' });\n  }\n});\n\n// Health check\nrouter.get('/health', (req, res) => {\n  res.json({ status: 'ok' });\n});\n\n// Add more routes here\nexport { router };","size_bytes":21010},"server/storage.ts":{"content":"import {\n  users,\n  brandProfiles,\n  platformConnections,\n  marketingMetrics,\n  aiAnalysis,\n  tasks,\n  rawEvents,\n  customerJourneys,\n  attributionResults,\n  type User,\n  type UpsertUser,\n  type BrandProfile,\n  type InsertBrandProfile,\n  type PlatformConnection,\n  type InsertPlatformConnection,\n  type MarketingMetric,\n  type InsertMarketingMetric,\n  type AIAnalysis,\n  type InsertAIAnalysis,\n  type Task,\n  type InsertTask,\n  type RawEvent,\n  type InsertRawEvent,\n  type CustomerJourney,\n  type InsertCustomerJourney,\n  type AttributionResult,\n  type InsertAttributionResult,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Brand profile operations\n  getBrandProfile(userId: string): Promise<BrandProfile | undefined>;\n  createBrandProfile(profile: InsertBrandProfile): Promise<BrandProfile>;\n  updateBrandProfile(userId: string, profile: Partial<InsertBrandProfile>): Promise<BrandProfile>;\n\n  // Platform connections\n  getPlatformConnections(userId: string): Promise<PlatformConnection[]>;\n  upsertPlatformConnection(connection: InsertPlatformConnection): Promise<PlatformConnection>;\n\n  // Marketing metrics\n  getMarketingMetrics(userId: string, platform?: string): Promise<MarketingMetric[]>;\n  insertMarketingMetric(metric: InsertMarketingMetric): Promise<MarketingMetric>;\n\n  // AI Analysis\n  getLatestAnalysis(userId: string, analysisType: string): Promise<AIAnalysis | undefined>;\n  insertAIAnalysis(analysis: InsertAIAnalysis): Promise<AIAnalysis>;\n\n  // Tasks\n  getTasks(userId: string): Promise<Task[]>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, updates: Partial<InsertTask>): Promise<Task>;\n\n  // Attribution analysis\n  getRawEvents(userId: string, limit?: number): Promise<RawEvent[]>;\n  insertRawEvent(event: InsertRawEvent): Promise<RawEvent>;\n  getCustomerJourneys(userId: string, limit?: number): Promise<CustomerJourney[]>;\n  insertCustomerJourney(journey: InsertCustomerJourney): Promise<CustomerJourney>;\n  getAttributionResults(userId: string, modelType: string, timeRange: string): Promise<AttributionResult | undefined>;\n  insertAttributionResult(result: InsertAttributionResult): Promise<AttributionResult>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Brand profile operations\n  async getBrandProfile(userId: string): Promise<BrandProfile | undefined> {\n    const [profile] = await db\n      .select()\n      .from(brandProfiles)\n      .where(eq(brandProfiles.userId, userId));\n    return profile;\n  }\n\n  async createBrandProfile(profile: InsertBrandProfile): Promise<BrandProfile> {\n    const [newProfile] = await db\n      .insert(brandProfiles)\n      .values(profile)\n      .returning();\n    return newProfile;\n  }\n\n  async updateBrandProfile(userId: string, profile: Partial<InsertBrandProfile>): Promise<BrandProfile> {\n    const [updated] = await db\n      .update(brandProfiles)\n      .set({ ...profile, updatedAt: new Date() })\n      .where(eq(brandProfiles.userId, userId))\n      .returning();\n    return updated;\n  }\n\n  // Platform connections\n  async getPlatformConnections(userId: string): Promise<PlatformConnection[]> {\n    return await db\n      .select()\n      .from(platformConnections)\n      .where(eq(platformConnections.userId, userId));\n  }\n\n  async upsertPlatformConnection(connection: InsertPlatformConnection): Promise<PlatformConnection> {\n    const [result] = await db\n      .insert(platformConnections)\n      .values(connection)\n      .onConflictDoUpdate({\n        target: [platformConnections.userId, platformConnections.platform],\n        set: {\n          ...connection,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return result;\n  }\n\n  async createPlatformConnection(connection: InsertPlatformConnection): Promise<PlatformConnection> {\n    const [result] = await db\n      .insert(platformConnections)\n      .values(connection)\n      .returning();\n    return result;\n  }\n\n  async updatePlatformConnection(id: string, updates: Partial<InsertPlatformConnection>): Promise<PlatformConnection> {\n    const [result] = await db\n      .update(platformConnections)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(platformConnections.id, id))\n      .returning();\n    return result;\n  }\n\n  // Marketing metrics\n  async getMarketingMetrics(userId: string, platform?: string): Promise<MarketingMetric[]> {\n    if (platform) {\n      return await db\n        .select()\n        .from(marketingMetrics)\n        .where(and(\n          eq(marketingMetrics.userId, userId),\n          eq(marketingMetrics.platform, platform)\n        ))\n        .orderBy(desc(marketingMetrics.metricDate));\n    }\n    \n    return await db\n      .select()\n      .from(marketingMetrics)\n      .where(eq(marketingMetrics.userId, userId))\n      .orderBy(desc(marketingMetrics.metricDate));\n  }\n\n  async insertMarketingMetric(metric: InsertMarketingMetric): Promise<MarketingMetric> {\n    const [newMetric] = await db\n      .insert(marketingMetrics)\n      .values(metric)\n      .returning();\n    return newMetric;\n  }\n\n  // AI Analysis\n  async getLatestAnalysis(userId: string, analysisType: string): Promise<AIAnalysis | undefined> {\n    const [analysis] = await db\n      .select()\n      .from(aiAnalysis)\n      .where(and(\n        eq(aiAnalysis.userId, userId),\n        eq(aiAnalysis.analysisType, analysisType)\n      ))\n      .orderBy(desc(aiAnalysis.createdAt))\n      .limit(1);\n    return analysis;\n  }\n\n  async insertAIAnalysis(analysis: InsertAIAnalysis): Promise<AIAnalysis> {\n    const [newAnalysis] = await db\n      .insert(aiAnalysis)\n      .values(analysis)\n      .returning();\n    return newAnalysis;\n  }\n\n  // Tasks\n  async getTasks(userId: string): Promise<Task[]> {\n    return await db\n      .select()\n      .from(tasks)\n      .where(eq(tasks.userId, userId))\n      .orderBy(desc(tasks.createdAt));\n  }\n\n  async createTask(task: InsertTask): Promise<Task> {\n    const [newTask] = await db\n      .insert(tasks)\n      .values(task)\n      .returning();\n    return newTask;\n  }\n\n  async updateTask(id: string, updates: Partial<InsertTask>): Promise<Task> {\n    const [updated] = await db\n      .update(tasks)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(tasks.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Attribution analysis methods\n  async getRawEvents(userId: string, limit: number = 100): Promise<RawEvent[]> {\n    return await db\n      .select()\n      .from(rawEvents)\n      .where(eq(rawEvents.userId, userId))\n      .orderBy(desc(rawEvents.eventTimestamp))\n      .limit(limit);\n  }\n\n  async insertRawEvent(event: InsertRawEvent): Promise<RawEvent> {\n    const [newEvent] = await db\n      .insert(rawEvents)\n      .values(event)\n      .returning();\n    return newEvent;\n  }\n\n  async getCustomerJourneys(userId: string, limit: number = 50): Promise<CustomerJourney[]> {\n    return await db\n      .select()\n      .from(customerJourneys)\n      .where(eq(customerJourneys.userId, userId))\n      .orderBy(desc(customerJourneys.purchaseTimestamp))\n      .limit(limit);\n  }\n\n  async insertCustomerJourney(journey: InsertCustomerJourney): Promise<CustomerJourney> {\n    const [newJourney] = await db\n      .insert(customerJourneys)\n      .values(journey)\n      .returning();\n    return newJourney;\n  }\n\n  async getAttributionResults(userId: string, modelType: string, timeRange: string): Promise<AttributionResult | undefined> {\n    const [result] = await db\n      .select()\n      .from(attributionResults)\n      .where(and(\n        eq(attributionResults.userId, userId),\n        eq(attributionResults.modelType, modelType),\n        eq(attributionResults.timeRange, timeRange)\n      ))\n      .orderBy(desc(attributionResults.calculatedAt))\n      .limit(1);\n    return result;\n  }\n\n  async insertAttributionResult(result: InsertAttributionResult): Promise<AttributionResult> {\n    const [newResult] = await db\n      .insert(attributionResults)\n      .values(result)\n      .returning();\n    return newResult;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":8727},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (mandatory for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Brand profiles for onboarding\nexport const brandProfiles = pgTable(\"brand_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  businessModel: varchar(\"business_model\"),\n  industry: varchar(\"industry\"),\n  customerType: varchar(\"customer_type\"),\n  brandMaturity: varchar(\"brand_maturity\"),\n  companySize: varchar(\"company_size\"),\n  marketingGoal: varchar(\"marketing_goal\"),\n  websiteUrl: text(\"website_url\"),\n  monthlyRevenue: varchar(\"monthly_revenue\"),\n  monthlyAdBudget: varchar(\"monthly_ad_budget\"),\n  mainCompetitors: text(\"main_competitors\"),\n  targetAudienceDescription: text(\"target_audience_description\"),\n  brandVoice: varchar(\"brand_voice\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Platform connections (Shopify, Meta, Google, TikTok)\nexport const platformConnections = pgTable(\"platform_connections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  platform: varchar(\"platform\").notNull(), // 'shopify', 'meta', 'google', 'tiktok'\n  isConnected: boolean(\"is_connected\").default(false),\n  accessToken: text(\"access_token\"),\n  refreshToken: text(\"refresh_token\"),\n  accountId: varchar(\"account_id\"),\n  accountName: varchar(\"account_name\"),\n  lastSyncAt: timestamp(\"last_sync_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Marketing metrics and KPIs\nexport const marketingMetrics = pgTable(\"marketing_metrics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  platform: varchar(\"platform\").notNull(),\n  metricDate: timestamp(\"metric_date\").notNull(),\n  revenue: decimal(\"revenue\", { precision: 12, scale: 2 }),\n  adSpend: decimal(\"ad_spend\", { precision: 12, scale: 2 }),\n  roas: decimal(\"roas\", { precision: 5, scale: 2 }),\n  conversions: integer(\"conversions\"),\n  clicks: integer(\"clicks\"),\n  impressions: integer(\"impressions\"),\n  ctr: decimal(\"ctr\", { precision: 5, scale: 4 }),\n  cpc: decimal(\"cpc\", { precision: 8, scale: 2 }),\n  cpa: decimal(\"cpa\", { precision: 8, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// AI Analysis results\nexport const aiAnalysis = pgTable(\"ai_analysis\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  analysisType: varchar(\"analysis_type\").notNull(), // 'market', 'competitor', 'performance'\n  data: jsonb(\"data\").notNull(),\n  insights: text(\"insights\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Raw events table for tracking all touchpoints\nexport const rawEvents = pgTable(\"raw_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  sessionId: varchar(\"session_id\"),\n  customerId: varchar(\"customer_id\"),\n  eventType: varchar(\"event_type\").notNull(), // 'click', 'impression', 'visit', 'purchase'\n  platform: varchar(\"platform\").notNull(), // 'google', 'meta', 'instagram', 'tiktok', 'email', 'direct'\n  campaignId: varchar(\"campaign_id\"),\n  campaignName: varchar(\"campaign_name\"),\n  adGroupId: varchar(\"ad_group_id\"),\n  adId: varchar(\"ad_id\"),\n  pageUrl: text(\"page_url\"),\n  referrer: text(\"referrer\"),\n  revenue: decimal(\"revenue\", { precision: 12, scale: 2 }),\n  eventTimestamp: timestamp(\"event_timestamp\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Customer journeys table - processed and clean journey data\nexport const customerJourneys = pgTable(\"customer_journeys\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  customerId: varchar(\"customer_id\").notNull(),\n  orderId: varchar(\"order_id\").notNull(),\n  orderValue: decimal(\"order_value\", { precision: 12, scale: 2 }).notNull(),\n  journeyData: jsonb(\"journey_data\").notNull(), // Array of touchpoints with timestamps\n  firstTouchChannel: varchar(\"first_touch_channel\"),\n  lastTouchChannel: varchar(\"last_touch_channel\"),\n  journeyDuration: integer(\"journey_duration\"), // in hours\n  touchpointCount: integer(\"touchpoint_count\"),\n  purchaseTimestamp: timestamp(\"purchase_timestamp\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Attribution results cache table\nexport const attributionResults = pgTable(\"attribution_results\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  modelType: varchar(\"model_type\").notNull(), // 'first_click', 'last_click', 'linear', 'smart'\n  timeRange: varchar(\"time_range\").notNull(), // '7d', '30d', '90d'\n  channelResults: jsonb(\"channel_results\").notNull(), // Revenue distribution by channel\n  totalRevenue: decimal(\"total_revenue\", { precision: 12, scale: 2 }),\n  calculatedAt: timestamp(\"calculated_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Tasks and actions\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  status: varchar(\"status\").notNull().default(\"Yapılacak\"), // 'Yapılacak', 'Yapılıyor', 'Tamamlandı'\n  priority: varchar(\"priority\").notNull().default(\"Orta\"), // 'Yüksek', 'Orta', 'Düşük'\n  dueDate: timestamp(\"due_date\"),\n  assignee: varchar(\"assignee\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type BrandProfile = typeof brandProfiles.$inferSelect;\nexport type InsertBrandProfile = typeof brandProfiles.$inferInsert;\nexport type PlatformConnection = typeof platformConnections.$inferSelect;\nexport type InsertPlatformConnection = typeof platformConnections.$inferInsert;\nexport type MarketingMetric = typeof marketingMetrics.$inferSelect;\nexport type InsertMarketingMetric = typeof marketingMetrics.$inferInsert;\nexport type AIAnalysis = typeof aiAnalysis.$inferSelect;\nexport type InsertAIAnalysis = typeof aiAnalysis.$inferInsert;\nexport type RawEvent = typeof rawEvents.$inferSelect;\nexport type InsertRawEvent = typeof rawEvents.$inferInsert;\nexport type CustomerJourney = typeof customerJourneys.$inferSelect;\nexport type InsertCustomerJourney = typeof customerJourneys.$inferInsert;\nexport type AttributionResult = typeof attributionResults.$inferSelect;\nexport type InsertAttributionResult = typeof attributionResults.$inferInsert;\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = typeof tasks.$inferInsert;\n\n// Zod schemas for validation\nexport const insertBrandProfileSchema = createInsertSchema(brandProfiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPlatformConnectionSchema = createInsertSchema(platformConnections).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n","size_bytes":8350},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport MarketAnalysis from \"@/pages/market-analysis\";\nimport CompetitorAnalysis from \"@/pages/competitor-analysis\";\nimport Settings from \"@/pages/settings\";\nimport NotFound from \"@/pages/not-found\";\nimport Attribution from \"@/pages/attribution\";\nimport Profitability from \"@/pages/profitability\";\nimport Customers from './pages/customers';\nimport Products from './pages/products';\nimport Strategy from \"@/pages/strategy\";\nimport Creative from \"@/pages/creative\";\nimport Reports from \"@/pages/reports\";\nimport Opportunities from \"@/pages/opportunities\";\nimport Scenarios from \"@/pages/scenarios\";\nimport KpiAnalysis from \"@/pages/kpi-analysis\";\nimport TouchpointAnalysis from \"@/pages/touchpoint-analysis\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\n\nimport Auth from \"@/pages/auth\";\nimport Onboarding from \"@/pages/onboarding\";\nimport Affiliate from './pages/affiliate';\nimport Collaborations from './pages/collaborations';\nimport Team from './pages/team';\nimport Campaigns from './pages/campaigns';\nimport AIAssistantPage from './pages/ai-assistant';\nimport Autopilot from './pages/autopilot';\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 flex items-center justify-center\">\n        <div className=\"text-white\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <Switch>\n        <Route path=\"/\" component={Landing} />\n        <Route path=\"/auth\" component={Auth} />\n        <Route component={NotFound} />\n      </Switch>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-slate-900 text-slate-300\">\n      <Sidebar />\n      <div className=\"flex flex-col flex-1 w-full min-w-0 overflow-hidden\">\n        <Header currentPage=\"Dashboard\" />\n        <main className=\"flex-1 overflow-y-auto bg-slate-800/50 p-6\">\n          <Switch>\n            <Route path=\"/\" component={Dashboard} />\n            <Route path=\"/market-analysis\" component={MarketAnalysis} />\n            <Route path=\"/competitor-analysis\" component={CompetitorAnalysis} />\n            <Route path=\"/attribution\" component={Attribution} />\n            <Route path=\"/profitability\" component={Profitability} />\n            <Route path=\"/kpi-analysis\" component={KpiAnalysis} />\n            <Route path=\"/touchpoint-analysis\" component={TouchpointAnalysis} />\n\n            <Route path=\"/collaborations/affiliate\" component={Affiliate} />\n            <Route path=\"/customers\" component={Customers} />\n            <Route path=\"/products\" component={Products} />\n            <Route path=\"/campaigns\" component={Campaigns} />\n            <Route path=\"/collaborations\" component={Collaborations} />\n            <Route path=\"/strategy\" component={Strategy} />\n            <Route path=\"/creative\" component={Creative} />\n            <Route path=\"/reports\" component={Reports} />\n            <Route path=\"/opportunities\" component={Opportunities} />\n            <Route path=\"/scenarios\" component={Scenarios} />\n            <Route path=\"/ai-assistant\" component={AIAssistantPage} />\n            <Route path=\"/autopilot\" component={Autopilot} />\n            <Route path=\"/team\" component={Team} />\n            <Route path=\"/settings\" component={Settings} />\n            <Route path=\"/onboarding\" component={Onboarding} />\n            <Route component={NotFound} />\n          </Switch>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":4093},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Force dark theme globally */\nhtml, body, #root {\n  background-color: hsl(222.2, 84%, 4.9%) !important;\n  color: hsl(210, 40%, 98%) !important;\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 98%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(222.2, 84%, 4.9%);\n  --radius: 0.5rem;\n  --chart-1: hsl(207, 90%, 54%);\n  --chart-2: hsl(280, 65%, 60%);\n  --chart-3: hsl(48, 96%, 53%);\n  --chart-4: hsl(153, 60%, 53%);\n  --chart-5: hsl(10, 84%, 62%);\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --popover: hsl(224, 71.4%, 4.1%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --card: hsl(224, 71.4%, 4.1%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(212.7, 26.8%, 83.9%);\n  --chart-1: hsl(207, 90%, 54%);\n  --chart-2: hsl(280, 65%, 60%);\n  --chart-3: hsl(48, 96%, 53%);\n  --chart-4: hsl(153, 60%, 53%);\n  --chart-5: hsl(10, 84%, 62%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n\n  /* Custom scrollbar for dark theme */\n  ::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: hsl(217.2, 32.6%, 17.5%);\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: hsl(215, 20.2%, 65.1%);\n    border-radius: 3px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: hsl(210, 40%, 98%);\n  }\n}\n\n/* Custom animations */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideUp {\n  from {\n    transform: translateY(20px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n@keyframes pulse-slow {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.5s ease-in-out;\n}\n\n.animate-slide-up {\n  animation: slideUp 0.3s ease-out;\n}\n\n.animate-pulse-slow {\n  animation: pulse-slow 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Chart styles */\n.recharts-tooltip-content {\n  background: hsl(224, 71.4%, 4.1%) !important;\n  border: 1px solid hsl(217.2, 32.6%, 17.5%) !important;\n  border-radius: 8px !important;\n  color: hsl(210, 40%, 98%) !important;\n}\n\n.recharts-legend-item-text {\n  color: hsl(215, 20.2%, 65.1%) !important;\n}\n\n/* Custom focus styles */\n.focus-visible:focus-visible {\n  outline: 2px solid hsl(207, 90%, 54%);\n  outline-offset: 2px;\n}\n\n/* Widget drag handles */\n.widget-drag-handle {\n  cursor: grab;\n  opacity: 0;\n  transition: opacity 0.2s ease;\n}\n\n.widget-drag-handle:hover,\n.widget-customizing .widget-drag-handle {\n  opacity: 1;\n}\n\n.widget-drag-handle:active {\n  cursor: grabbing;\n}\n\n/* Loading skeleton */\n@keyframes skeleton-loading {\n  0% {\n    background-position: 200% 0;\n  }\n  100% {\n    background-position: -200% 0;\n  }\n}\n\n.skeleton {\n  background: linear-gradient(\n    90deg,\n    hsl(217.2, 32.6%, 17.5%) 25%,\n    hsl(215, 20.2%, 25%) 50%,\n    hsl(217.2, 32.6%, 17.5%) 75%\n  );\n  background-size: 200% 100%;\n  animation: skeleton-loading 1.5s infinite;\n}\n\n/* Status indicators */\n.status-indicator {\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n}\n\n.status-indicator::before {\n  content: '';\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  margin-right: 8px;\n}\n\n.status-indicator.online::before {\n  background: hsl(153, 60%, 53%);\n  box-shadow: 0 0 0 2px hsl(153, 60%, 53%, 0.2);\n  animation: pulse-slow 2s infinite;\n}\n\n.status-indicator.offline::before {\n  background: hsl(215, 20.2%, 65.1%);\n}\n\n.status-indicator.warning::before {\n  background: hsl(48, 96%, 53%);\n}\n\n.status-indicator.error::before {\n  background: hsl(0, 84.2%, 60.2%);\n}\n\n/* Notification badge */\n.notification-badge {\n  position: absolute;\n  top: -4px;\n  right: -4px;\n  background: hsl(0, 84.2%, 60.2%);\n  color: white;\n  border-radius: 50%;\n  width: 16px;\n  height: 16px;\n  font-size: 10px;\n  font-weight: bold;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 2px solid hsl(224, 71.4%, 4.1%);\n}\n\n/* Custom button variants */\n.btn-gradient {\n  background: linear-gradient(135deg, hsl(207, 90%, 54%) 0%, hsl(280, 65%, 60%) 100%);\n  border: none;\n  color: white;\n  transition: all 0.3s ease;\n}\n\n.btn-gradient:hover {\n  background: linear-gradient(135deg, hsl(207, 90%, 64%) 0%, hsl(280, 65%, 70%) 100%);\n  transform: translateY(-1px);\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);\n}\n\n/* Platform specific colors */\n.platform-google {\n  color: hsl(4, 90%, 58%);\n}\n\n.platform-meta {\n  color: hsl(220, 80%, 60%);\n}\n\n.platform-tiktok {\n  color: hsl(0, 0%, 100%);\n  background: hsl(0, 0%, 0%);\n  border-radius: 4px;\n  padding: 2px;\n}\n\n.platform-shopify {\n  color: hsl(144, 65%, 50%);\n}\n\n/* Sidebar styles */\n.sidebar-nav-item {\n  transition: all 0.2s ease;\n  border-radius: 8px;\n  margin-bottom: 4px;\n}\n\n.sidebar-nav-item:hover {\n  background: hsl(217.2, 32.6%, 20%);\n  transform: translateX(4px);\n}\n\n.sidebar-nav-item.active {\n  background: hsl(207, 90%, 54%);\n  color: white;\n}\n\n.sidebar-nav-item.active:hover {\n  background: hsl(207, 90%, 64%);\n}\n\n/* Message bubble styles */\n.message-bubble {\n  max-width: 70%;\n  word-wrap: break-word;\n  animation: slideUp 0.3s ease-out;\n}\n\n.message-bubble.user {\n  background: hsl(207, 90%, 54%);\n  color: white;\n  margin-left: auto;\n  border-radius: 18px 18px 4px 18px;\n}\n\n.message-bubble.ai {\n  background: hsl(217.2, 32.6%, 17.5%);\n  color: hsl(210, 40%, 98%);\n  border-radius: 18px 18px 18px 4px;\n}\n\n/* Widget styles */\n.widget-container {\n  transition: all 0.3s ease;\n}\n\n.widget-container:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n}\n\n.widget-remove-btn {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  opacity: 0;\n  transition: opacity 0.2s ease;\n}\n\n.widget-container:hover .widget-remove-btn,\n.widget-customizing .widget-remove-btn {\n  opacity: 1;\n}\n\n/* Metric cards */\n.metric-card {\n  background: hsl(224, 71.4%, 4.1%);\n  border: 1px solid hsl(217.2, 32.6%, 17.5%);\n  transition: all 0.3s ease;\n}\n\n.metric-card:hover {\n  border-color: hsl(215, 20.2%, 25%);\n  transform: translateY(-2px);\n}\n\n.metric-change.positive {\n  color: hsl(153, 60%, 53%);\n}\n\n.metric-change.negative {\n  color: hsl(0, 84.2%, 60.2%);\n}\n\n.metric-change.neutral {\n  color: hsl(215, 20.2%, 65.1%);\n}\n\n/* AI recommendation cards */\n.ai-recommendation {\n  background: linear-gradient(135deg, hsl(207, 90%, 54%, 0.1) 0%, hsl(280, 65%, 60%, 0.1) 100%);\n  border: 1px solid hsl(207, 90%, 54%, 0.3);\n  backdrop-filter: blur(10px);\n}\n\n.ai-recommendation.opportunity {\n  border-color: hsl(153, 60%, 53%, 0.3);\n  background: linear-gradient(135deg, hsl(153, 60%, 53%, 0.1) 0%, hsl(153, 60%, 53%, 0.05) 100%);\n}\n\n.ai-recommendation.warning {\n  border-color: hsl(48, 96%, 53%, 0.3);\n  background: linear-gradient(135deg, hsl(48, 96%, 53%, 0.1) 0%, hsl(48, 96%, 53%, 0.05) 100%);\n}\n\n.ai-recommendation.alert {\n  border-color: hsl(0, 84.2%, 60.2%, 0.3);\n  background: linear-gradient(135deg, hsl(0, 84.2%, 60.2%, 0.1) 0%, hsl(0, 84.2%, 60.2%, 0.05) 100%);\n}\n","size_bytes":8179},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/attributionCalculator.ts":{"content":"\nimport { db } from \"../db\";\nimport { customerJourneys, attributionResults, type InsertAttributionResult } from \"@shared/schema\";\nimport { eq, and, sql, gte } from \"drizzle-orm\";\n\nexport interface ChannelAttribution {\n  channel: string;\n  revenue: number;\n  percentage: number;\n  orderCount: number;\n}\n\nexport interface AttributionModelResult {\n  modelType: string;\n  totalRevenue: number;\n  channelResults: ChannelAttribution[];\n  calculatedAt: Date;\n}\n\nexport class AttributionCalculator {\n  /**\n   * Faz 2.1: Basit modelleri hesaplama\n   */\n  async calculateFirstClickAttribution(userId: string, timeRange: string): Promise<AttributionModelResult> {\n    const dateFilter = this.getDateFilter(timeRange);\n    \n    const journeys = await db\n      .select()\n      .from(customerJourneys)\n      .where(and(\n        eq(customerJourneys.userId, userId),\n        gte(customerJourneys.purchaseTimestamp, dateFilter)\n      ));\n\n    const channelRevenue: { [key: string]: { revenue: number; count: number } } = {};\n    let totalRevenue = 0;\n\n    for (const journey of journeys) {\n      const revenue = parseFloat(journey.orderValue.toString());\n      const firstChannel = journey.firstTouchChannel || 'unknown';\n      \n      if (!channelRevenue[firstChannel]) {\n        channelRevenue[firstChannel] = { revenue: 0, count: 0 };\n      }\n      \n      channelRevenue[firstChannel].revenue += revenue;\n      channelRevenue[firstChannel].count += 1;\n      totalRevenue += revenue;\n    }\n\n    return this.formatResults('first_click', channelRevenue, totalRevenue);\n  }\n\n  async calculateLastClickAttribution(userId: string, timeRange: string): Promise<AttributionModelResult> {\n    const dateFilter = this.getDateFilter(timeRange);\n    \n    const journeys = await db\n      .select()\n      .from(customerJourneys)\n      .where(and(\n        eq(customerJourneys.userId, userId),\n        gte(customerJourneys.purchaseTimestamp, dateFilter)\n      ));\n\n    const channelRevenue: { [key: string]: { revenue: number; count: number } } = {};\n    let totalRevenue = 0;\n\n    for (const journey of journeys) {\n      const revenue = parseFloat(journey.orderValue.toString());\n      const lastChannel = journey.lastTouchChannel || 'unknown';\n      \n      if (!channelRevenue[lastChannel]) {\n        channelRevenue[lastChannel] = { revenue: 0, count: 0 };\n      }\n      \n      channelRevenue[lastChannel].revenue += revenue;\n      channelRevenue[lastChannel].count += 1;\n      totalRevenue += revenue;\n    }\n\n    return this.formatResults('last_click', channelRevenue, totalRevenue);\n  }\n\n  async calculateLinearAttribution(userId: string, timeRange: string): Promise<AttributionModelResult> {\n    const dateFilter = this.getDateFilter(timeRange);\n    \n    const journeys = await db\n      .select()\n      .from(customerJourneys)\n      .where(and(\n        eq(customerJourneys.userId, userId),\n        gte(customerJourneys.purchaseTimestamp, dateFilter)\n      ));\n\n    const channelRevenue: { [key: string]: { revenue: number; count: number } } = {};\n    let totalRevenue = 0;\n\n    for (const journey of journeys) {\n      const revenue = parseFloat(journey.orderValue.toString());\n      const journeyData = journey.journeyData as any[];\n      \n      if (!journeyData || journeyData.length === 0) continue;\n\n      // Her touchpoint'e eşit pay ver\n      const revenuePerTouchpoint = revenue / journeyData.length;\n      \n      for (const touchpoint of journeyData) {\n        const channel = touchpoint.platform || 'unknown';\n        \n        if (!channelRevenue[channel]) {\n          channelRevenue[channel] = { revenue: 0, count: 0 };\n        }\n        \n        channelRevenue[channel].revenue += revenuePerTouchpoint;\n      }\n      \n      totalRevenue += revenue;\n    }\n\n    // Count calculation for linear model\n    for (const journey of journeys) {\n      const journeyData = journey.journeyData as any[];\n      if (!journeyData) continue;\n      \n      const uniqueChannels = [...new Set(journeyData.map(tp => tp.platform))];\n      for (const channel of uniqueChannels) {\n        if (channelRevenue[channel]) {\n          channelRevenue[channel].count += 1 / uniqueChannels.length;\n        }\n      }\n    }\n\n    return this.formatResults('linear', channelRevenue, totalRevenue);\n  }\n\n  /**\n   * Faz 2.2: Akıllı model - İstatistiksel analiz ile gerçek katkıyı hesapla\n   */\n  async calculateSmartAttribution(userId: string, timeRange: string): Promise<AttributionModelResult> {\n    const dateFilter = this.getDateFilter(timeRange);\n    \n    const journeys = await db\n      .select()\n      .from(customerJourneys)\n      .where(and(\n        eq(customerJourneys.userId, userId),\n        gte(customerJourneys.purchaseTimestamp, dateFilter)\n      ));\n\n    const channelRevenue: { [key: string]: { revenue: number; count: number } } = {};\n    let totalRevenue = 0;\n\n    // Markov Chain yaklaşımı - her kanalın dönüşüm olasılığına katkısını hesapla\n    const transitionProbabilities = this.calculateTransitionProbabilities(journeys);\n    const removalEffects = this.calculateRemovalEffects(journeys, transitionProbabilities);\n\n    for (const journey of journeys) {\n      const revenue = parseFloat(journey.orderValue.toString());\n      const journeyData = journey.journeyData as any[];\n      \n      if (!journeyData || journeyData.length === 0) continue;\n\n      // Her channel için smart attribution score hesapla\n      const channelScores: { [channel: string]: number } = {};\n      let totalScore = 0;\n\n      for (const touchpoint of journeyData) {\n        const channel = touchpoint.platform || 'unknown';\n        \n        // Position-based weighting + removal effect\n        const positionWeight = this.calculatePositionWeight(journeyData, touchpoint);\n        const removalEffect = removalEffects[channel] || 0.1;\n        const smartScore = positionWeight * (1 + removalEffect);\n        \n        channelScores[channel] = (channelScores[channel] || 0) + smartScore;\n        totalScore += smartScore;\n      }\n\n      // Revenue'yi score'lara göre dağıt\n      for (const [channel, score] of Object.entries(channelScores)) {\n        const attributedRevenue = (score / totalScore) * revenue;\n        \n        if (!channelRevenue[channel]) {\n          channelRevenue[channel] = { revenue: 0, count: 0 };\n        }\n        \n        channelRevenue[channel].revenue += attributedRevenue;\n        channelRevenue[channel].count += score / totalScore;\n      }\n      \n      totalRevenue += revenue;\n    }\n\n    return this.formatResults('smart', channelRevenue, totalRevenue);\n  }\n\n  /**\n   * Faz 2.3: Sonuçları önbelleğe alma\n   */\n  async cacheAttributionResults(userId: string): Promise<void> {\n    const timeRanges = ['7d', '30d', '90d'];\n    const models = ['first_click', 'last_click', 'linear', 'smart'];\n\n    for (const timeRange of timeRanges) {\n      for (const modelType of models) {\n        let result: AttributionModelResult;\n\n        switch (modelType) {\n          case 'first_click':\n            result = await this.calculateFirstClickAttribution(userId, timeRange);\n            break;\n          case 'last_click':\n            result = await this.calculateLastClickAttribution(userId, timeRange);\n            break;\n          case 'linear':\n            result = await this.calculateLinearAttribution(userId, timeRange);\n            break;\n          case 'smart':\n            result = await this.calculateSmartAttribution(userId, timeRange);\n            break;\n          default:\n            continue;\n        }\n\n        // Önce mevcut cache'i sil\n        await db\n          .delete(attributionResults)\n          .where(and(\n            eq(attributionResults.userId, userId),\n            eq(attributionResults.modelType, modelType),\n            eq(attributionResults.timeRange, timeRange)\n          ));\n\n        // Yeni sonucu kaydet\n        await db.insert(attributionResults).values({\n          userId,\n          modelType,\n          timeRange,\n          channelResults: result.channelResults,\n          totalRevenue: sql`${result.totalRevenue}`,\n        });\n\n        console.log(`Cached ${modelType} attribution for ${timeRange} period`);\n      }\n    }\n  }\n\n  // Helper methods\n  private getDateFilter(timeRange: string): Date {\n    const now = new Date();\n    const days = timeRange === '7d' ? 7 : timeRange === '30d' ? 30 : 90;\n    const date = new Date(now);\n    date.setDate(date.getDate() - days);\n    return date;\n  }\n\n  private formatResults(\n    modelType: string, \n    channelRevenue: { [key: string]: { revenue: number; count: number } }, \n    totalRevenue: number\n  ): AttributionModelResult {\n    const channelResults: ChannelAttribution[] = Object.entries(channelRevenue)\n      .map(([channel, data]) => ({\n        channel,\n        revenue: data.revenue,\n        percentage: totalRevenue > 0 ? (data.revenue / totalRevenue) * 100 : 0,\n        orderCount: Math.round(data.count),\n      }))\n      .sort((a, b) => b.revenue - a.revenue);\n\n    return {\n      modelType,\n      totalRevenue,\n      channelResults,\n      calculatedAt: new Date(),\n    };\n  }\n\n  private calculateTransitionProbabilities(journeys: any[]): { [key: string]: number } {\n    // Simplified transition probability calculation\n    const transitions: { [key: string]: number } = {};\n    \n    for (const journey of journeys) {\n      const journeyData = journey.journeyData as any[];\n      if (!journeyData || journeyData.length < 2) continue;\n\n      for (let i = 0; i < journeyData.length - 1; i++) {\n        const from = journeyData[i].platform;\n        const to = journeyData[i + 1].platform;\n        const transition = `${from}->${to}`;\n        transitions[transition] = (transitions[transition] || 0) + 1;\n      }\n    }\n\n    return transitions;\n  }\n\n  private calculateRemovalEffects(journeys: any[], transitions: { [key: string]: number }): { [key: string]: number } {\n    // Simplified removal effect calculation\n    const channels = [...new Set(journeys.flatMap(j => \n      (j.journeyData as any[] || []).map(tp => tp.platform)\n    ))];\n\n    const removalEffects: { [key: string]: number } = {};\n\n    for (const channel of channels) {\n      // Calculate how much conversion rate drops when this channel is removed\n      // This is a simplified version - in reality, you'd use more sophisticated statistical methods\n      const channelAppearances = journeys.filter(j => \n        (j.journeyData as any[] || []).some(tp => tp.platform === channel)\n      ).length;\n      \n      const conversionImpact = channelAppearances / journeys.length;\n      removalEffects[channel] = conversionImpact;\n    }\n\n    return removalEffects;\n  }\n\n  private calculatePositionWeight(journeyData: any[], currentTouchpoint: any): number {\n    const index = journeyData.findIndex(tp => tp === currentTouchpoint);\n    const length = journeyData.length;\n    \n    if (length === 1) return 1;\n    \n    // U-shaped attribution: First and last touches get more weight\n    if (index === 0 || index === length - 1) {\n      return 0.4;\n    } else {\n      return 0.2 / Math.max(1, length - 2);\n    }\n  }\n}\n\nexport const attributionCalculator = new AttributionCalculator();\n","size_bytes":11118},"server/services/geminiService.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\nconst ai = new GoogleGenAI({ \n  apiKey: process.env.GEMINI_API_KEY || process.env.API_KEY || \"\" \n});\n\nexport interface MarketAnalysisResult {\n  summary: string;\n  trends: string[];\n  competitors: { name: string; analysis: string }[];\n  opportunities: string[];\n  risks: string[];\n  targetAudience: string;\n}\n\nexport interface PerformanceInsight {\n  metric: string;\n  insight: string;\n  recommendation: string;\n  priority: 'Yüksek' | 'Orta' | 'Düşük';\n}\n\nexport async function analyzeMarket(\n  industry: string,\n  websiteUrl?: string,\n  competitors?: string\n): Promise<MarketAnalysisResult> {\n  try {\n    const prompt = `\n    ${industry} sektöründe faaliyet gösteren bir e-ticaret işletmesi için pazar analizi yapın.\n    ${websiteUrl ? `Website: ${websiteUrl}` : ''}\n    ${competitors ? `Ana rakipler: ${competitors}` : ''}\n    \n    Aşağıdaki JSON formatında yanıt verin:\n    {\n      \"summary\": \"Genel pazar durumu özeti\",\n      \"trends\": [\"trend1\", \"trend2\", \"trend3\"],\n      \"competitors\": [{\"name\": \"Rakip Adı\", \"analysis\": \"Analiz\"}],\n      \"opportunities\": [\"fırsat1\", \"fırsat2\"],\n      \"risks\": [\"risk1\", \"risk2\"],\n      \"targetAudience\": \"Hedef kitle analizi\"\n    }\n    `;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            summary: { type: \"string\" },\n            trends: {\n              type: \"array\",\n              items: { type: \"string\" }\n            },\n            competitors: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  name: { type: \"string\" },\n                  analysis: { type: \"string\" }\n                }\n              }\n            },\n            opportunities: {\n              type: \"array\",\n              items: { type: \"string\" }\n            },\n            risks: {\n              type: \"array\", \n              items: { type: \"string\" }\n            },\n            targetAudience: { type: \"string\" }\n          },\n          required: [\"summary\", \"trends\", \"competitors\", \"opportunities\", \"risks\", \"targetAudience\"]\n        }\n      },\n      contents: prompt,\n    });\n\n    const rawJson = response.text;\n    if (rawJson) {\n      return JSON.parse(rawJson);\n    } else {\n      throw new Error(\"Empty response from model\");\n    }\n  } catch (error) {\n    throw new Error(`Failed to analyze market: ${error}`);\n  }\n}\n\nexport async function analyzePerformance(\n  metricsData: any\n): Promise<PerformanceInsight[]> {\n  try {\n    const prompt = `\n    Aşağıdaki pazarlama performans verilerini analiz edin ve öneriler sunun:\n    ${JSON.stringify(metricsData)}\n    \n    Her metrik için insight ve öneriler sağlayın. JSON formatında yanıt verin:\n    [\n      {\n        \"metric\": \"ROAS\",\n        \"insight\": \"Mevcut durum analizi\",\n        \"recommendation\": \"Yapılması gereken eylem\",\n        \"priority\": \"Yüksek\"\n      }\n    ]\n    `;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              metric: { type: \"string\" },\n              insight: { type: \"string\" },\n              recommendation: { type: \"string\" },\n              priority: { \n                type: \"string\",\n                enum: [\"Yüksek\", \"Orta\", \"Düşük\"]\n              }\n            },\n            required: [\"metric\", \"insight\", \"recommendation\", \"priority\"]\n          }\n        }\n      },\n      contents: prompt,\n    });\n\n    const rawJson = response.text;\n    if (rawJson) {\n      return JSON.parse(rawJson);\n    } else {\n      throw new Error(\"Empty response from model\");\n    }\n  } catch (error) {\n    throw new Error(`Failed to analyze performance: ${error}`);\n  }\n}\n\nexport async function generateRecommendations(\n  context: string,\n  userQuery: string\n): Promise<string> {\n  try {\n    const prompt = `\n    Context: ${context}\n    User Question: ${userQuery}\n    \n    Pazarlama uzmanı olarak detaylı ve uygulanabilir öneriler sunun. \n    Türkçe olarak yanıtlayın.\n    `;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      contents: prompt,\n    });\n\n    return response.text || \"Yanıt oluşturulamadı\";\n  } catch (error) {\n    throw new Error(`Failed to generate recommendations: ${error}`);\n  }\n}\n","size_bytes":4621},"server/services/googleAdsService.ts":{"content":"import { BasePlatformService, PlatformCredentials, PlatformDataPoint } from './platformService';\n\nexport class GoogleAdsService extends BasePlatformService {\n  private readonly baseUrl = 'https://googleads.googleapis.com/v14';\n\n  async authenticate(): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.baseUrl}/customers:listAccessibleCustomers`, {\n        headers: {\n          'Authorization': `Bearer ${this.credentials.accessToken}`,\n          'developer-token': process.env.GOOGLE_ADS_DEVELOPER_TOKEN || '',\n          'Content-Type': 'application/json',\n        },\n      });\n      return response.ok;\n    } catch (error) {\n      console.error('Google Ads authentication failed:', error);\n      return false;\n    }\n  }\n\n  async refreshAccessToken(): Promise<string> {\n    try {\n      const response = await fetch('https://oauth2.googleapis.com/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          client_id: process.env.GOOGLE_CLIENT_ID || '',\n          client_secret: process.env.GOOGLE_CLIENT_SECRET || '',\n          refresh_token: this.credentials.refreshToken || '',\n          grant_type: 'refresh_token',\n        }),\n      });\n\n      const data = await response.json();\n      return data.access_token;\n    } catch (error) {\n      console.error('Error refreshing Google Ads token:', error);\n      return this.credentials.accessToken;\n    }\n  }\n\n  async fetchMetrics(startDate: string, endDate: string): Promise<PlatformDataPoint[]> {\n    try {\n      const query = `\n        SELECT \n          segments.date,\n          campaign.id,\n          campaign.name,\n          metrics.impressions,\n          metrics.clicks,\n          metrics.cost_micros,\n          metrics.conversions,\n          metrics.conversions_value\n        FROM campaign \n        WHERE segments.date BETWEEN '${startDate}' AND '${endDate}'\n      `;\n\n      const response = await fetch(`${this.baseUrl}/customers/${this.credentials.accountId}/googleAds:searchStream`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.credentials.accessToken}`,\n          'developer-token': process.env.GOOGLE_ADS_DEVELOPER_TOKEN || '',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ query }),\n      });\n\n      const dataPoints: PlatformDataPoint[] = [];\n\n      if (response.ok) {\n        const data = await response.json();\n\n        data.results?.forEach((result: any) => {\n          const date = result.segments.date;\n          const campaignId = result.campaign.id;\n          const campaignName = result.campaign.name;\n\n          dataPoints.push(\n            {\n              date,\n              metric: 'impressions',\n              value: parseInt(result.metrics.impressions),\n              platform: 'google_ads',\n              campaignId,\n              campaignName,\n            },\n            {\n              date,\n              metric: 'clicks',\n              value: parseInt(result.metrics.clicks),\n              platform: 'google_ads',\n              campaignId,\n              campaignName,\n            },\n            {\n              date,\n              metric: 'spend',\n              value: parseInt(result.metrics.cost_micros) / 1000000,\n              platform: 'google_ads',\n              campaignId,\n              campaignName,\n            },\n            {\n              date,\n              metric: 'conversions',\n              value: parseFloat(result.metrics.conversions),\n              platform: 'google_ads',\n              campaignId,\n              campaignName,\n            }\n          );\n        });\n      }\n\n      return dataPoints;\n    } catch (error) {\n      console.error('Error fetching Google Ads metrics:', error);\n      return [];\n    }\n  }\n\n  async fetchCampaigns(): Promise<any[]> {\n    try {\n      const query = `\n        SELECT \n          campaign.id,\n          campaign.name,\n          campaign.status\n        FROM campaign\n      `;\n\n      const response = await fetch(`${this.baseUrl}/customers/${this.credentials.accountId}/googleAds:search`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.credentials.accessToken}`,\n          'developer-token': process.env.GOOGLE_ADS_DEVELOPER_TOKEN || '',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ query }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        return data.results || [];\n      }\n\n      return [];\n    } catch (error) {\n      console.error('Error fetching Google Ads campaigns:', error);\n      return [];\n    }\n  }\n\n  async isTokenValid(): Promise<boolean> {\n    return await this.authenticate();\n  }\n}","size_bytes":4778},"server/services/googleAnalyticsService.ts":{"content":"\nimport { BasePlatformService, PlatformCredentials, PlatformDataPoint } from './platformService';\n\nexport class GoogleAnalyticsService extends BasePlatformService {\n  private readonly baseUrl = 'https://analyticsdata.googleapis.com/v1beta';\n  private propertyId: string;\n\n  constructor(credentials: PlatformCredentials & { propertyId: string }) {\n    super(credentials);\n    this.propertyId = (credentials as any).propertyId;\n  }\n\n  async authenticate(): Promise<boolean> {\n    try {\n      const response = await fetch(\n        `${this.baseUrl}/properties/${this.propertyId}/metadata`,\n        {\n          headers: {\n            'Authorization': `Bearer ${this.credentials.accessToken}`,\n          },\n        }\n      );\n      return response.ok;\n    } catch (error) {\n      console.error('Google Analytics authentication failed:', error);\n      return false;\n    }\n  }\n\n  async refreshAccessToken(): Promise<string> {\n    try {\n      const response = await fetch('https://oauth2.googleapis.com/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          client_id: process.env.GOOGLE_CLIENT_ID || '',\n          client_secret: process.env.GOOGLE_CLIENT_SECRET || '',\n          refresh_token: this.credentials.refreshToken || '',\n          grant_type: 'refresh_token',\n        }),\n      });\n\n      const data = await response.json();\n      this.credentials.accessToken = data.access_token;\n      return data.access_token;\n    } catch (error) {\n      console.error('Error refreshing Google Analytics token:', error);\n      throw error;\n    }\n  }\n\n  async isTokenValid(): Promise<boolean> {\n    if (this.credentials.expiresAt && new Date() > this.credentials.expiresAt) {\n      try {\n        await this.refreshAccessToken();\n        return true;\n      } catch {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  async fetchMetrics(startDate: string, endDate: string): Promise<PlatformDataPoint[]> {\n    const metrics: PlatformDataPoint[] = [];\n\n    try {\n      const requestBody = {\n        dateRanges: [{ startDate, endDate }],\n        metrics: [\n          { name: 'sessions' },\n          { name: 'users' },\n          { name: 'pageviews' },\n          { name: 'bounceRate' },\n          { name: 'averageSessionDuration' },\n          { name: 'conversions' },\n          { name: 'totalRevenue' }\n        ],\n        dimensions: [\n          { name: 'date' },\n          { name: 'sourceMedium' }\n        ],\n      };\n\n      const response = await fetch(\n        `${this.baseUrl}/properties/${this.propertyId}:runReport`,\n        {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${this.credentials.accessToken}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(requestBody),\n        }\n      );\n\n      if (response.ok) {\n        const data = await response.json();\n        \n        data.rows?.forEach((row: any) => {\n          const date = row.dimensionValues[0].value;\n          const sourceMedium = row.dimensionValues[1].value;\n          \n          const metricValues = row.metricValues;\n          \n          metrics.push(\n            {\n              date,\n              metric: 'sessions',\n              value: parseInt(metricValues[0].value || '0'),\n              platform: 'google_analytics',\n              campaignName: sourceMedium,\n            },\n            {\n              date,\n              metric: 'users',\n              value: parseInt(metricValues[1].value || '0'),\n              platform: 'google_analytics',\n              campaignName: sourceMedium,\n            },\n            {\n              date,\n              metric: 'pageviews',\n              value: parseInt(metricValues[2].value || '0'),\n              platform: 'google_analytics',\n              campaignName: sourceMedium,\n            },\n            {\n              date,\n              metric: 'bounce_rate',\n              value: parseFloat(metricValues[3].value || '0'),\n              platform: 'google_analytics',\n              campaignName: sourceMedium,\n            },\n            {\n              date,\n              metric: 'avg_session_duration',\n              value: parseFloat(metricValues[4].value || '0'),\n              platform: 'google_analytics',\n              campaignName: sourceMedium,\n            },\n            {\n              date,\n              metric: 'conversions',\n              value: parseFloat(metricValues[5].value || '0'),\n              platform: 'google_analytics',\n              campaignName: sourceMedium,\n            },\n            {\n              date,\n              metric: 'revenue',\n              value: parseFloat(metricValues[6].value || '0'),\n              platform: 'google_analytics',\n              campaignName: sourceMedium,\n            }\n          );\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching Google Analytics metrics:', error);\n    }\n\n    return metrics;\n  }\n\n  async fetchCampaigns(): Promise<any[]> {\n    // Google Analytics doesn't have campaigns per se, but we can return traffic sources\n    try {\n      const requestBody = {\n        dateRanges: [{ startDate: '30daysAgo', endDate: 'today' }],\n        metrics: [{ name: 'sessions' }],\n        dimensions: [{ name: 'sourceMedium' }],\n        orderBys: [{ metric: { metricName: 'sessions' }, desc: true }],\n        limit: 50,\n      };\n\n      const response = await fetch(\n        `${this.baseUrl}/properties/${this.propertyId}:runReport`,\n        {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${this.credentials.accessToken}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(requestBody),\n        }\n      );\n\n      if (response.ok) {\n        const data = await response.json();\n        return data.rows?.map((row: any) => ({\n          name: row.dimensionValues[0].value,\n          sessions: row.metricValues[0].value,\n        })) || [];\n      }\n    } catch (error) {\n      console.error('Error fetching Google Analytics traffic sources:', error);\n    }\n    return [];\n  }\n}\n","size_bytes":6156},"server/services/googleSearchConsoleService.ts":{"content":"\nimport { BasePlatformService, PlatformCredentials, PlatformDataPoint } from './platformService';\n\nexport class GoogleSearchConsoleService extends BasePlatformService {\n  private readonly baseUrl = 'https://searchconsole.googleapis.com/webmasters/v3';\n  private siteUrl: string;\n\n  constructor(credentials: PlatformCredentials & { siteUrl: string }) {\n    super(credentials);\n    this.siteUrl = (credentials as any).siteUrl;\n  }\n\n  async authenticate(): Promise<boolean> {\n    try {\n      const response = await fetch(\n        `${this.baseUrl}/sites`,\n        {\n          headers: {\n            'Authorization': `Bearer ${this.credentials.accessToken}`,\n          },\n        }\n      );\n      return response.ok;\n    } catch (error) {\n      console.error('Google Search Console authentication failed:', error);\n      return false;\n    }\n  }\n\n  async refreshAccessToken(): Promise<string> {\n    try {\n      const response = await fetch('https://oauth2.googleapis.com/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          client_id: process.env.GOOGLE_CLIENT_ID || '',\n          client_secret: process.env.GOOGLE_CLIENT_SECRET || '',\n          refresh_token: this.credentials.refreshToken || '',\n          grant_type: 'refresh_token',\n        }),\n      });\n\n      const data = await response.json();\n      this.credentials.accessToken = data.access_token;\n      return data.access_token;\n    } catch (error) {\n      console.error('Error refreshing Google Search Console token:', error);\n      throw error;\n    }\n  }\n\n  async isTokenValid(): Promise<boolean> {\n    if (this.credentials.expiresAt && new Date() > this.credentials.expiresAt) {\n      try {\n        await this.refreshAccessToken();\n        return true;\n      } catch {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  async fetchMetrics(startDate: string, endDate: string): Promise<PlatformDataPoint[]> {\n    const metrics: PlatformDataPoint[] = [];\n\n    try {\n      const requestBody = {\n        startDate,\n        endDate,\n        dimensions: ['date', 'query'],\n        rowLimit: 1000,\n      };\n\n      const response = await fetch(\n        `${this.baseUrl}/sites/${encodeURIComponent(this.siteUrl)}/searchAnalytics/query`,\n        {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${this.credentials.accessToken}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(requestBody),\n        }\n      );\n\n      if (response.ok) {\n        const data = await response.json();\n        \n        data.rows?.forEach((row: any) => {\n          const date = row.keys[0];\n          const query = row.keys[1];\n\n          metrics.push(\n            {\n              date,\n              metric: 'impressions',\n              value: row.impressions || 0,\n              platform: 'google_search_console',\n              campaignName: query,\n            },\n            {\n              date,\n              metric: 'clicks',\n              value: row.clicks || 0,\n              platform: 'google_search_console',\n              campaignName: query,\n            },\n            {\n              date,\n              metric: 'ctr',\n              value: row.ctr || 0,\n              platform: 'google_search_console',\n              campaignName: query,\n            },\n            {\n              date,\n              metric: 'position',\n              value: row.position || 0,\n              platform: 'google_search_console',\n              campaignName: query,\n            }\n          );\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching Google Search Console metrics:', error);\n    }\n\n    return metrics;\n  }\n\n  async fetchCampaigns(): Promise<any[]> {\n    // Search Console doesn't have campaigns, return top queries\n    try {\n      const requestBody = {\n        startDate: '2024-01-01',\n        endDate: '2024-12-31',\n        dimensions: ['query'],\n        rowLimit: 100,\n      };\n\n      const response = await fetch(\n        `${this.baseUrl}/sites/${encodeURIComponent(this.siteUrl)}/searchAnalytics/query`,\n        {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${this.credentials.accessToken}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(requestBody),\n        }\n      );\n\n      if (response.ok) {\n        const data = await response.json();\n        return data.rows?.map((row: any) => ({\n          query: row.keys[0],\n          impressions: row.impressions,\n          clicks: row.clicks,\n          ctr: row.ctr,\n          position: row.position,\n        })) || [];\n      }\n    } catch (error) {\n      console.error('Error fetching Google Search Console queries:', error);\n    }\n    return [];\n  }\n}\n","size_bytes":4852},"server/services/journeyProcessor.ts":{"content":"\nimport { db } from \"../db\";\nimport { rawEvents, customerJourneys, type InsertCustomerJourney } from \"@shared/schema\";\nimport { eq, and, sql, desc, asc } from \"drizzle-orm\";\n\nexport interface TouchPoint {\n  platform: string;\n  campaignName: string;\n  eventType: string;\n  timestamp: string;\n  revenue?: number;\n}\n\nexport interface ProcessedJourney {\n  customerId: string;\n  orderId: string;\n  orderValue: number;\n  touchpoints: TouchPoint[];\n  firstTouchChannel: string;\n  lastTouchChannel: string;\n  journeyDuration: number; // in hours\n  purchaseTimestamp: string;\n}\n\nexport class JourneyProcessor {\n  /**\n   * Faz 1.1: Ham veri toplama - Bu fonksiyon farklı kaynaklardan gelen verileri rawEvents tablosuna kaydeder\n   */\n  async insertRawEvent(userId: string, eventData: {\n    sessionId?: string;\n    customerId?: string;\n    eventType: string;\n    platform: string;\n    campaignId?: string;\n    campaignName?: string;\n    adGroupId?: string;\n    adId?: string;\n    pageUrl?: string;\n    referrer?: string;\n    revenue?: number;\n    eventTimestamp: Date;\n  }) {\n    await db.insert(rawEvents).values({\n      userId,\n      ...eventData,\n    });\n  }\n\n  /**\n   * Faz 1.2: Yolculukları birleştirme - Ham eventleri müşteri yolculuklarına dönüştürür\n   */\n  async processCustomerJourneys(userId: string): Promise<void> {\n    console.log(\"Starting customer journey processing for user:\", userId);\n\n    // Satın alma eventlerini bul\n    const purchaseEvents = await db\n      .select()\n      .from(rawEvents)\n      .where(and(\n        eq(rawEvents.userId, userId),\n        eq(rawEvents.eventType, \"purchase\")\n      ))\n      .orderBy(desc(rawEvents.eventTimestamp));\n\n    console.log(`Found ${purchaseEvents.length} purchase events`);\n\n    for (const purchase of purchaseEvents) {\n      if (!purchase.customerId) continue;\n\n      // Bu satın almadan önceki tüm touchpoint'leri bul (30 gün window)\n      const thirtyDaysAgo = new Date(purchase.eventTimestamp);\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n      const touchpoints = await db\n        .select()\n        .from(rawEvents)\n        .where(and(\n          eq(rawEvents.userId, userId),\n          eq(rawEvents.customerId, purchase.customerId),\n          sql`${rawEvents.eventTimestamp} >= ${thirtyDaysAgo}`,\n          sql`${rawEvents.eventTimestamp} <= ${purchase.eventTimestamp}`\n        ))\n        .orderBy(asc(rawEvents.eventTimestamp));\n\n      if (touchpoints.length === 0) continue;\n\n      // Journey data hazırla\n      const journeyData: TouchPoint[] = touchpoints.map(tp => ({\n        platform: tp.platform,\n        campaignName: tp.campaignName || 'Unknown',\n        eventType: tp.eventType,\n        timestamp: tp.eventTimestamp.toISOString(),\n        revenue: tp.revenue ? parseFloat(tp.revenue.toString()) : undefined,\n      }));\n\n      const firstTouch = touchpoints[0];\n      const lastTouch = touchpoints[touchpoints.length - 1];\n      \n      // Journey duration hesapla (saat olarak)\n      const durationMs = purchase.eventTimestamp.getTime() - firstTouch.eventTimestamp.getTime();\n      const durationHours = Math.round(durationMs / (1000 * 60 * 60));\n\n      const journeyRecord: InsertCustomerJourney = {\n        userId,\n        customerId: purchase.customerId,\n        orderId: purchase.id, // purchase event ID'sini order ID olarak kullan\n        orderValue: purchase.revenue || sql`0`,\n        journeyData: journeyData,\n        firstTouchChannel: firstTouch.platform,\n        lastTouchChannel: lastTouch.platform,\n        journeyDuration: durationHours,\n        touchpointCount: touchpoints.length,\n        purchaseTimestamp: purchase.eventTimestamp,\n      };\n\n      // Journey'i kaydet (duplicate check ile)\n      const existingJourney = await db\n        .select()\n        .from(customerJourneys)\n        .where(and(\n          eq(customerJourneys.userId, userId),\n          eq(customerJourneys.orderId, purchase.id)\n        ))\n        .limit(1);\n\n      if (existingJourney.length === 0) {\n        await db.insert(customerJourneys).values(journeyRecord);\n        console.log(`Processed journey for customer ${purchase.customerId}, order ${purchase.id}`);\n      }\n    }\n\n    console.log(\"Customer journey processing completed\");\n  }\n\n  /**\n   * Test veri oluşturma fonksiyonu - Demo için sample data\n   */\n  async generateSampleData(userId: string): Promise<void> {\n    console.log(\"Generating sample attribution data for user:\", userId);\n\n    const sampleCustomers = ['customer_001', 'customer_002', 'customer_003', 'customer_004', 'customer_005'];\n    const platforms = ['google', 'meta', 'instagram', 'tiktok', 'email', 'direct'];\n    const campaigns = ['Brand Awareness', 'Product Launch', 'Retargeting', 'Holiday Sale', 'New Customer'];\n\n    for (let i = 0; i < 50; i++) {\n      const customerId = sampleCustomers[Math.floor(Math.random() * sampleCustomers.length)];\n      const purchaseDate = new Date();\n      purchaseDate.setDate(purchaseDate.getDate() - Math.floor(Math.random() * 30));\n\n      // Random journey oluştur (2-5 touchpoint)\n      const touchpointCount = 2 + Math.floor(Math.random() * 4);\n      const journeyEvents = [];\n\n      for (let j = 0; j < touchpointCount; j++) {\n        const eventDate = new Date(purchaseDate);\n        eventDate.setHours(eventDate.getHours() - (touchpointCount - j) * 24);\n\n        const platform = platforms[Math.floor(Math.random() * platforms.length)];\n        const campaign = campaigns[Math.floor(Math.random() * campaigns.length)];\n\n        journeyEvents.push({\n          sessionId: `session_${customerId}_${j}`,\n          customerId,\n          eventType: j === touchpointCount - 1 ? 'purchase' : (Math.random() > 0.5 ? 'click' : 'impression'),\n          platform,\n          campaignName: campaign,\n          revenue: j === touchpointCount - 1 ? 100 + Math.random() * 500 : undefined,\n          eventTimestamp: eventDate,\n        });\n      }\n\n      // Events'leri kaydet\n      for (const event of journeyEvents) {\n        await this.insertRawEvent(userId, event);\n      }\n    }\n\n    console.log(\"Sample data generation completed\");\n  }\n}\n\nexport const journeyProcessor = new JourneyProcessor();\n","size_bytes":6153},"server/services/metaAdsService.ts":{"content":"import { BasePlatformService, PlatformCredentials, PlatformDataPoint } from './platformService';\n\nexport class MetaAdsService extends BasePlatformService {\n  private readonly baseUrl = 'https://graph.facebook.com/v18.0';\n  private adAccountId: string;\n\n  constructor(credentials: PlatformCredentials & { adAccountId: string }) {\n    super(credentials);\n    this.adAccountId = (credentials as any).adAccountId;\n  }\n\n  async authenticate(): Promise<boolean> {\n    try {\n      const response = await fetch(\n        `${this.baseUrl}/me?access_token=${this.credentials.accessToken}`\n      );\n      return response.ok;\n    } catch (error) {\n      console.error('Meta Ads authentication failed:', error);\n      return false;\n    }\n  }\n\n  async refreshAccessToken(): Promise<string> {\n    try {\n      const response = await fetch(`${this.baseUrl}/oauth/access_token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          grant_type: 'fb_exchange_token',\n          client_id: process.env.META_APP_ID || '',\n          client_secret: process.env.META_APP_SECRET || '',\n          fb_exchange_token: this.credentials.accessToken,\n        }),\n      });\n\n      const data = await response.json();\n      return data.access_token || this.credentials.accessToken;\n    } catch (error) {\n      console.error('Error refreshing Meta token:', error);\n      return this.credentials.accessToken;\n    }\n  }\n\n  async fetchMetrics(startDate: string, endDate: string): Promise<PlatformDataPoint[]> {\n    const metrics: PlatformDataPoint[] = [];\n\n    try {\n      const fields = [\n        'impressions',\n        'clicks',\n        'spend',\n        'actions',\n        'action_values',\n        'campaign_id',\n        'campaign_name',\n        'date_start'\n      ].join(',');\n\n      const response = await fetch(\n        `${this.baseUrl}/act_${this.adAccountId}/insights?fields=${fields}&time_range={\"since\":\"${startDate}\",\"until\":\"${endDate}\"}&level=campaign&access_token=${this.credentials.accessToken}`\n      );\n\n      if (response.ok) {\n        const data = await response.json();\n\n        data.data?.forEach((insight: any) => {\n          const date = insight.date_start;\n          const campaignId = insight.campaign_id;\n          const campaignName = insight.campaign_name;\n\n          metrics.push(\n            {\n              date,\n              metric: 'impressions',\n              value: parseInt(insight.impressions || '0'),\n              platform: 'meta',\n              campaignId,\n              campaignName,\n            },\n            {\n              date,\n              metric: 'clicks',\n              value: parseInt(insight.clicks || '0'),\n              platform: 'meta',\n              campaignId,\n              campaignName,\n            },\n            {\n              date,\n              metric: 'spend',\n              value: parseFloat(insight.spend || '0'),\n              platform: 'meta',\n              campaignId,\n              campaignName,\n            }\n          );\n\n          // Process actions (conversions)\n          if (insight.actions) {\n            insight.actions.forEach((action: any) => {\n              if (action.action_type === 'purchase' || action.action_type === 'offsite_conversion.fb_pixel_purchase') {\n                metrics.push({\n                  date,\n                  metric: 'conversions',\n                  value: parseInt(action.value || '0'),\n                  platform: 'meta',\n                  campaignId,\n                  campaignName,\n                });\n              }\n            });\n          }\n\n          // Process action values (conversion values)\n          if (insight.action_values) {\n            insight.action_values.forEach((actionValue: any) => {\n              if (actionValue.action_type === 'purchase' || actionValue.action_type === 'offsite_conversion.fb_pixel_purchase') {\n                metrics.push({\n                  date,\n                  metric: 'conversion_value',\n                  value: parseFloat(actionValue.value || '0'),\n                  platform: 'meta',\n                  campaignId,\n                  campaignName,\n                });\n              }\n            });\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching Meta Ads metrics:', error);\n    }\n\n    return metrics;\n  }\n\n  async fetchCampaigns(): Promise<any[]> {\n    try {\n      const response = await fetch(\n        `${this.baseUrl}/act_${this.adAccountId}/campaigns?fields=id,name,status&access_token=${this.credentials.accessToken}`\n      );\n\n      if (response.ok) {\n        const data = await response.json();\n        return data.data || [];\n      }\n    } catch (error) {\n      console.error('Error fetching Meta Ads campaigns:', error);\n    }\n    return [];\n  }\n\n  async isTokenValid(): Promise<boolean> {\n    return this.authenticate();\n  }\n}","size_bytes":4916},"server/services/platformManager.ts":{"content":"\nimport { storage } from '../storage';\nimport { PlatformServiceFactory, PlatformDataPoint } from './platformService';\nimport { InsertRawEvent, InsertMarketingMetric } from '@shared/schema';\n\nexport class PlatformManager {\n  private userId: string;\n\n  constructor(userId: string) {\n    this.userId = userId;\n  }\n\n  async syncAllPlatforms(startDate: string, endDate: string): Promise<void> {\n    const connections = await storage.getPlatformConnections(this.userId);\n    const activeConnections = connections.filter(conn => conn.isConnected);\n\n    for (const connection of activeConnections) {\n      try {\n        await this.syncPlatform(connection.platform, startDate, endDate);\n        \n        // Update last sync time\n        await storage.updatePlatformConnection(connection.id, {\n          lastSyncAt: new Date(),\n        });\n      } catch (error) {\n        console.error(`Error syncing ${connection.platform}:`, error);\n      }\n    }\n  }\n\n  private async syncPlatform(platform: string, startDate: string, endDate: string): Promise<void> {\n    const connection = await this.getPlatformConnection(platform);\n    if (!connection) return;\n\n    const credentials = {\n      accessToken: connection.accessToken || '',\n      refreshToken: connection.refreshToken || '',\n      accountId: connection.accountId || '',\n    };\n\n    const service = PlatformServiceFactory.create(platform, credentials);\n    \n    // Check if token is valid\n    const isValid = await service.isTokenValid();\n    if (!isValid) {\n      console.error(`Invalid token for platform: ${platform}`);\n      return;\n    }\n\n    // Fetch metrics\n    const metrics = await service.fetchMetrics(startDate, endDate);\n    \n    // Store raw events for attribution analysis\n    await this.storeRawEvents(metrics);\n    \n    // Store aggregated marketing metrics\n    await this.storeMarketingMetrics(metrics);\n  }\n\n  private async storeRawEvents(dataPoints: PlatformDataPoint[]): Promise<void> {\n    for (const point of dataPoints) {\n      // Convert data points to raw events for attribution analysis\n      if (point.metric === 'clicks' || point.metric === 'impressions' || point.metric === 'conversions') {\n        const rawEvent: InsertRawEvent = {\n          userId: this.userId,\n          sessionId: crypto.randomUUID(),\n          customerId: 'unknown', // This would come from actual tracking\n          eventType: this.mapMetricToEventType(point.metric),\n          platform: this.mapPlatformName(point.platform),\n          campaignId: point.campaignId,\n          campaignName: point.campaignName,\n          revenue: point.metric === 'conversions' ? point.value : null,\n          eventTimestamp: new Date(point.date),\n        };\n\n        await storage.insertRawEvent(rawEvent);\n      }\n    }\n  }\n\n  private async storeMarketingMetrics(dataPoints: PlatformDataPoint[]): Promise<void> {\n    // Group data points by date and platform for aggregation\n    const grouped = dataPoints.reduce((acc, point) => {\n      const key = `${point.date}-${point.platform}`;\n      if (!acc[key]) {\n        acc[key] = {\n          date: point.date,\n          platform: point.platform,\n          metrics: {},\n        };\n      }\n      acc[key].metrics[point.metric] = (acc[key].metrics[point.metric] || 0) + point.value;\n      return acc;\n    }, {} as any);\n\n    for (const item of Object.values(grouped) as any[]) {\n      const metrics = item.metrics;\n      \n      const marketingMetric: InsertMarketingMetric = {\n        userId: this.userId,\n        platform: this.mapPlatformName(item.platform),\n        metricDate: new Date(item.date),\n        revenue: metrics.revenue || metrics.conversion_value || null,\n        adSpend: metrics.spend || metrics.cost || null,\n        roas: metrics.revenue && metrics.spend ? metrics.revenue / metrics.spend : null,\n        conversions: Math.round(metrics.conversions || 0),\n        clicks: Math.round(metrics.clicks || 0),\n        impressions: Math.round(metrics.impressions || 0),\n        ctr: metrics.ctr || (metrics.clicks && metrics.impressions ? metrics.clicks / metrics.impressions : null),\n        cpc: metrics.cpc || (metrics.spend && metrics.clicks ? metrics.spend / metrics.clicks : null),\n        cpa: metrics.conversion_cost || (metrics.spend && metrics.conversions ? metrics.spend / metrics.conversions : null),\n      };\n\n      await storage.insertMarketingMetric(marketingMetric);\n    }\n  }\n\n  private mapMetricToEventType(metric: string): string {\n    switch (metric) {\n      case 'impressions': return 'impression';\n      case 'clicks': return 'click';\n      case 'conversions': return 'purchase';\n      default: return 'visit';\n    }\n  }\n\n  private mapPlatformName(platform: string): string {\n    switch (platform) {\n      case 'google_ads': return 'google';\n      case 'google_analytics': return 'google';\n      case 'google_search_console': return 'google';\n      case 'meta': return 'meta';\n      case 'tiktok': return 'tiktok';\n      case 'shopify': return 'shopify';\n      default: return platform;\n    }\n  }\n\n  private async getPlatformConnection(platform: string) {\n    const connections = await storage.getPlatformConnections(this.userId);\n    return connections.find(conn => conn.platform === platform && conn.isConnected);\n  }\n\n  async testConnection(platform: string): Promise<boolean> {\n    const connection = await this.getPlatformConnection(platform);\n    if (!connection) return false;\n\n    try {\n      const credentials = {\n        accessToken: connection.accessToken || '',\n        refreshToken: connection.refreshToken || '',\n        accountId: connection.accountId || '',\n      };\n\n      const service = PlatformServiceFactory.create(platform, credentials);\n      return await service.authenticate();\n    } catch (error) {\n      console.error(`Connection test failed for ${platform}:`, error);\n      return false;\n    }\n  }\n}\n","size_bytes":5835},"server/services/platformService.ts":{"content":"\nexport interface PlatformCredentials {\n  accessToken: string;\n  refreshToken?: string;\n  accountId?: string;\n  expiresAt?: Date;\n}\n\nexport interface PlatformDataPoint {\n  date: string;\n  metric: string;\n  value: number;\n  platform: string;\n  campaignId?: string;\n  campaignName?: string;\n  adGroupId?: string;\n  adId?: string;\n}\n\nexport abstract class BasePlatformService {\n  protected credentials: PlatformCredentials;\n  \n  constructor(credentials: PlatformCredentials) {\n    this.credentials = credentials;\n  }\n\n  abstract authenticate(): Promise<boolean>;\n  abstract refreshAccessToken(): Promise<string>;\n  abstract fetchMetrics(startDate: string, endDate: string): Promise<PlatformDataPoint[]>;\n  abstract fetchCampaigns(): Promise<any[]>;\n  abstract isTokenValid(): Promise<boolean>;\n}\n\nexport class PlatformServiceFactory {\n  static create(platform: string, credentials: PlatformCredentials): BasePlatformService {\n    switch (platform) {\n      case 'shopify':\n        return new ShopifyService(credentials);\n      case 'google_ads':\n        return new GoogleAdsService(credentials);\n      case 'google_analytics':\n        return new GoogleAnalyticsService(credentials);\n      case 'meta':\n        return new MetaAdsService(credentials);\n      case 'tiktok':\n        return new TikTokAdsService(credentials);\n      case 'google_search_console':\n        return new GoogleSearchConsoleService(credentials);\n      default:\n        throw new Error(`Unsupported platform: ${platform}`);\n    }\n  }\n}\n","size_bytes":1502},"server/services/shopifyService.ts":{"content":"import { BasePlatformService, PlatformCredentials, PlatformDataPoint } from './platformService';\n\nexport class ShopifyService extends BasePlatformService {\n  private readonly baseUrl: string;\n\n  constructor(credentials: PlatformCredentials) {\n    super(credentials);\n    this.baseUrl = `https://${credentials.accountId}.myshopify.com/admin/api/2023-10`;\n  }\n\n  async authenticate(): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.baseUrl}/shop.json`, {\n        headers: {\n          'X-Shopify-Access-Token': this.credentials.accessToken,\n          'Content-Type': 'application/json',\n        },\n      });\n      return response.ok;\n    } catch (error) {\n      console.error('Shopify authentication failed:', error);\n      return false;\n    }\n  }\n\n  async refreshAccessToken(): Promise<string> {\n    // Shopify tokens don't expire, so return the same token\n    return this.credentials.accessToken;\n  }\n\n  async fetchMetrics(startDate: string, endDate: string): Promise<PlatformDataPoint[]> {\n    try {\n      const dataPoints: PlatformDataPoint[] = [];\n\n      // Fetch orders for revenue data\n      const ordersResponse = await fetch(`${this.baseUrl}/orders.json?created_at_min=${startDate}&created_at_max=${endDate}&status=any`, {\n        headers: {\n          'X-Shopify-Access-Token': this.credentials.accessToken,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (ordersResponse.ok) {\n        const ordersData = await ordersResponse.json();\n\n        // Group orders by date\n        const ordersByDate = ordersData.orders.reduce((acc: any, order: any) => {\n          const date = order.created_at.split('T')[0];\n          if (!acc[date]) {\n            acc[date] = { revenue: 0, orders: 0 };\n          }\n          acc[date].revenue += parseFloat(order.total_price);\n          acc[date].orders += 1;\n          return acc;\n        }, {});\n\n        // Convert to data points\n        Object.entries(ordersByDate).forEach(([date, data]: [string, any]) => {\n          dataPoints.push({\n            date,\n            metric: 'revenue',\n            value: data.revenue,\n            platform: 'shopify',\n          });\n          dataPoints.push({\n            date,\n            metric: 'orders',\n            value: data.orders,\n            platform: 'shopify',\n          });\n        });\n      }\n\n      return dataPoints;\n    } catch (error) {\n      console.error('Error fetching Shopify metrics:', error);\n      return [];\n    }\n  }\n\n  async fetchCampaigns(): Promise<any[]> {\n    // Shopify doesn't have campaigns in the traditional sense\n    return [];\n  }\n\n  async isTokenValid(): Promise<boolean> {\n    return await this.authenticate();\n  }\n\n  async fetchProducts(): Promise<any[]> {\n    try {\n      const response = await fetch(`${this.baseUrl}/products.json?limit=250`, {\n        headers: {\n          'X-Shopify-Access-Token': this.credentials.accessToken,\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        return data.products;\n      }\n    } catch (error) {\n      console.error('Error fetching Shopify products:', error);\n    }\n    return [];\n  }\n\n  async fetchCustomers(): Promise<any[]> {\n    try {\n      const response = await fetch(`${this.baseUrl}/customers.json?limit=250`, {\n        headers: {\n          'X-Shopify-Access-Token': this.credentials.accessToken,\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        return data.customers;\n      }\n    } catch (error) {\n      console.error('Error fetching Shopify customers:', error);\n    }\n    return [];\n  }\n}","size_bytes":3606},"server/services/tiktokAdsService.ts":{"content":"\nimport { BasePlatformService, PlatformCredentials, PlatformDataPoint } from './platformService';\nimport crypto from 'crypto';\n\nexport class TikTokAdsService extends BasePlatformService {\n  private readonly baseUrl = 'https://business-api.tiktok.com/open_api/v1.3';\n  private advertiserId: string;\n  private appId: string;\n  private secret: string;\n\n  constructor(credentials: PlatformCredentials & { advertiserId: string; appId: string; secret: string }) {\n    super(credentials);\n    this.advertiserId = (credentials as any).advertiserId;\n    this.appId = (credentials as any).appId;\n    this.secret = (credentials as any).secret;\n  }\n\n  private generateSignature(path: string, timestamp: number): string {\n    const message = this.secret + path + timestamp;\n    return crypto.createHmac('sha256', this.secret).update(message).digest('hex');\n  }\n\n  async authenticate(): Promise<boolean> {\n    try {\n      const timestamp = Math.floor(Date.now() / 1000);\n      const path = '/oauth2/advertiser/get/';\n      const signature = this.generateSignature(path, timestamp);\n\n      const response = await fetch(\n        `${this.baseUrl}${path}`,\n        {\n          method: 'GET',\n          headers: {\n            'Access-Token': this.credentials.accessToken,\n            'X-Tt-Logid': crypto.randomUUID(),\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n      return response.ok;\n    } catch (error) {\n      console.error('TikTok Ads authentication failed:', error);\n      return false;\n    }\n  }\n\n  async refreshAccessToken(): Promise<string> {\n    try {\n      const response = await fetch(`${this.baseUrl}/oauth2/refresh_token/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          app_id: this.appId,\n          secret: this.secret,\n          refresh_token: this.credentials.refreshToken,\n        }),\n      });\n\n      const data = await response.json();\n      if (data.code === 0) {\n        this.credentials.accessToken = data.data.access_token;\n        return data.data.access_token;\n      }\n      throw new Error('Failed to refresh TikTok token');\n    } catch (error) {\n      console.error('Error refreshing TikTok Ads token:', error);\n      throw error;\n    }\n  }\n\n  async isTokenValid(): Promise<boolean> {\n    return this.authenticate();\n  }\n\n  async fetchMetrics(startDate: string, endDate: string): Promise<PlatformDataPoint[]> {\n    const metrics: PlatformDataPoint[] = [];\n\n    try {\n      const requestBody = {\n        advertiser_id: this.advertiserId,\n        report_type: 'BASIC',\n        data_level: 'AUCTION_CAMPAIGN',\n        dimensions: ['campaign_id', 'stat_time_day'],\n        metrics: [\n          'spend',\n          'impressions',\n          'clicks',\n          'ctr',\n          'cpc',\n          'conversions',\n          'conversion_rate',\n          'conversion_cost'\n        ],\n        start_date: startDate,\n        end_date: endDate,\n        page: 1,\n        page_size: 1000,\n      };\n\n      const response = await fetch(\n        `${this.baseUrl}/report/integrated/get/`,\n        {\n          method: 'POST',\n          headers: {\n            'Access-Token': this.credentials.accessToken,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(requestBody),\n        }\n      );\n\n      if (response.ok) {\n        const data = await response.json();\n        \n        if (data.code === 0 && data.data?.list) {\n          data.data.list.forEach((item: any) => {\n            const date = item.dimensions.stat_time_day;\n            const campaignId = item.dimensions.campaign_id;\n\n            metrics.push(\n              {\n                date,\n                metric: 'spend',\n                value: parseFloat(item.metrics.spend || '0'),\n                platform: 'tiktok',\n                campaignId,\n              },\n              {\n                date,\n                metric: 'impressions',\n                value: parseInt(item.metrics.impressions || '0'),\n                platform: 'tiktok',\n                campaignId,\n              },\n              {\n                date,\n                metric: 'clicks',\n                value: parseInt(item.metrics.clicks || '0'),\n                platform: 'tiktok',\n                campaignId,\n              },\n              {\n                date,\n                metric: 'ctr',\n                value: parseFloat(item.metrics.ctr || '0'),\n                platform: 'tiktok',\n                campaignId,\n              },\n              {\n                date,\n                metric: 'cpc',\n                value: parseFloat(item.metrics.cpc || '0'),\n                platform: 'tiktok',\n                campaignId,\n              },\n              {\n                date,\n                metric: 'conversions',\n                value: parseFloat(item.metrics.conversions || '0'),\n                platform: 'tiktok',\n                campaignId,\n              }\n            );\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching TikTok Ads metrics:', error);\n    }\n\n    return metrics;\n  }\n\n  async fetchCampaigns(): Promise<any[]> {\n    try {\n      const response = await fetch(\n        `${this.baseUrl}/campaign/get/?advertiser_id=${this.advertiserId}`,\n        {\n          headers: {\n            'Access-Token': this.credentials.accessToken,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      if (response.ok) {\n        const data = await response.json();\n        return data.data?.list || [];\n      }\n    } catch (error) {\n      console.error('Error fetching TikTok Ads campaigns:', error);\n    }\n    return [];\n  }\n}\n","size_bytes":5705},"client/src/components/ai-assistant.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { \n  X, \n  Send, \n  Zap, \n  User, \n  Loader2,\n  Minimize2,\n  Maximize2\n} from \"lucide-react\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { QUICK_ACTIONS } from \"@/lib/constants\";\n\ninterface Message {\n  id: string;\n  role: 'user' | 'ai';\n  content: string;\n  timestamp: Date;\n}\n\ninterface AIAssistantProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function AIAssistant({ isOpen, onClose }: AIAssistantProps) {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      role: 'ai',\n      content: 'Merhaba! Size nasıl yardımcı olabilirim? ROAS analizi, bütçe optimizasyonu veya müşteri segmentasyonu hakkında sorularınızı sorabilirsiniz.',\n      timestamp: new Date()\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isMinimized, setIsMinimized] = useState(false);\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  const chatMutation = useMutation({\n    mutationFn: api.sendChatMessage,\n    onSuccess: (response) => {\n      const aiMessage: Message = {\n        id: Date.now().toString() + '-ai',\n        role: 'ai',\n        content: response.response,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = (message?: string) => {\n    const messageText = message || inputMessage.trim();\n    if (!messageText) return;\n\n    // Add user message\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: messageText,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n\n    // Clear input\n    setInputMessage('');\n\n    // Send to AI\n    chatMutation.mutate({\n      message: messageText,\n      context: 'Marketing intelligence platform'\n    });\n  };\n\n  const handleQuickAction = (action: typeof QUICK_ACTIONS[0]) => {\n    handleSendMessage(action.prompt);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  // Auto scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (scrollAreaRef.current) {\n      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\">\n      <Card className={`bg-slate-800 border-slate-700 shadow-2xl transition-all duration-300 ${\n        isMinimized ? 'w-80 h-16' : 'w-96 h-[500px]'\n      }`}>\n        \n        {/* Header */}\n        <CardHeader className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white p-4 rounded-t-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center\">\n                <Zap className=\"w-4 h-4\" />\n              </div>\n              <div>\n                <h4 className=\"font-semibold\">AI Asistanınız</h4>\n                {!isMinimized && (\n                  <p className=\"text-xs opacity-90\">Pazarlama konusunda size yardımcı olacağım</p>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsMinimized(!isMinimized)}\n                className=\"text-white/80 hover:text-white p-1\"\n              >\n                {isMinimized ? <Maximize2 className=\"w-4 h-4\" /> : <Minimize2 className=\"w-4 h-4\" />}\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={onClose}\n                className=\"text-white/80 hover:text-white p-1\"\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n\n        {!isMinimized && (\n          <CardContent className=\"p-0 flex flex-col h-[436px]\">\n            \n            {/* Messages */}\n            <ScrollArea className=\"flex-1 p-4\" ref={scrollAreaRef}>\n              <div className=\"space-y-4\">\n                {messages.map((message) => (\n                  <div key={message.id} className={`flex items-start gap-3 ${\n                    message.role === 'user' ? 'flex-row-reverse' : ''\n                  }`}>\n                    <div className=\"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0\">\n                      {message.role === 'ai' ? (\n                        <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center\">\n                          <Zap className=\"w-4 h-4 text-white\" />\n                        </div>\n                      ) : (\n                        <div className=\"w-8 h-8 bg-slate-600 rounded-full flex items-center justify-center\">\n                          <User className=\"w-4 h-4 text-slate-300\" />\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div className={`message-bubble p-3 rounded-2xl max-w-[75%] ${\n                      message.role === 'user' \n                        ? 'user bg-blue-600 text-white rounded-tr-sm' \n                        : 'ai bg-slate-700 text-slate-300 rounded-tl-sm'\n                    }`}>\n                      <p className=\"text-sm leading-relaxed whitespace-pre-wrap\">\n                        {message.content}\n                      </p>\n                      <p className={`text-xs mt-2 opacity-70 ${\n                        message.role === 'user' ? 'text-blue-100' : 'text-slate-500'\n                      }`}>\n                        {message.timestamp.toLocaleTimeString('tr-TR', { \n                          hour: '2-digit', \n                          minute: '2-digit' \n                        })}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n                \n                {chatMutation.isPending && (\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center\">\n                      <Zap className=\"w-4 h-4 text-white\" />\n                    </div>\n                    <div className=\"bg-slate-700 rounded-2xl rounded-tl-sm p-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <Loader2 className=\"w-4 h-4 animate-spin text-blue-400\" />\n                        <span className=\"text-sm text-slate-400\">Düşünüyorum...</span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </ScrollArea>\n\n            {/* Quick Actions */}\n            <div className=\"px-4 py-2 border-t border-slate-700\">\n              <div className=\"flex flex-wrap gap-2\">\n                {QUICK_ACTIONS.slice(0, 3).map((action) => (\n                  <Button\n                    key={action.id}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleQuickAction(action)}\n                    className=\"bg-slate-700 hover:bg-slate-600 text-slate-300 border-slate-600 text-xs\"\n                    disabled={chatMutation.isPending}\n                  >\n                    {action.label}\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            {/* Input */}\n            <div className=\"p-4 border-t border-slate-700\">\n              <div className=\"flex items-center gap-2\">\n                <Input\n                  placeholder=\"Sorunuzu yazın...\"\n                  value={inputMessage}\n                  onChange={(e) => setInputMessage(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  disabled={chatMutation.isPending}\n                  className=\"bg-slate-700 border-slate-600 text-slate-300 placeholder-slate-400 focus:border-blue-500\"\n                />\n                <Button\n                  onClick={() => handleSendMessage()}\n                  disabled={!inputMessage.trim() || chatMutation.isPending}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white px-3\"\n                >\n                  {chatMutation.isPending ? (\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                  ) : (\n                    <Send className=\"w-4 h-4\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        )}\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9626},"client/src/components/ai-chat-panel.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  MessageCircle, \n  Send, \n  Bot, \n  Sparkles, \n  TrendingUp,\n  Target,\n  Lightbulb,\n  AlertCircle\n} from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ChatMessage {\n  id: string;\n  type: 'user' | 'ai';\n  message: string;\n  timestamp: Date;\n}\n\ninterface AIInsight {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'opportunity';\n  title: string;\n  description: string;\n  action?: string;\n  icon: typeof TrendingUp;\n}\n\ninterface AIChatPanelProps {\n  pageContext: string;\n  insights?: AIInsight[];\n  suggestions?: string[];\n}\n\nexport default function AIChatPanel({ pageContext, insights = [], suggestions = [] }: AIChatPanelProps) {\n  const [chatHistory, setChatHistory] = useState<ChatMessage[]>([\n    {\n      id: '1',\n      type: 'ai',\n      message: `Merhaba! ${pageContext} sayfası için size nasıl yardımcı olabilirim? Analiz sonuçlarınızı yorumlayabilir, öneriler verebilirim.`,\n      timestamp: new Date()\n    }\n  ]);\n  const [currentMessage, setCurrentMessage] = useState('');\n  const { toast } = useToast();\n\n  const chatMutation = useMutation({\n    mutationFn: api.sendChatMessage,\n    onSuccess: (response) => {\n      const aiMessage: ChatMessage = {\n        id: Date.now().toString() + '-ai',\n        type: 'ai',\n        message: response.response,\n        timestamp: new Date()\n      };\n      setChatHistory(prev => [...prev, aiMessage]);\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Mesaj gönderilemedi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!currentMessage.trim()) return;\n\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      type: 'user',\n      message: currentMessage,\n      timestamp: new Date()\n    };\n\n    setChatHistory(prev => [...prev, userMessage]);\n    \n    chatMutation.mutate({\n      message: currentMessage,\n      context: pageContext\n    });\n\n    setCurrentMessage('');\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    setCurrentMessage(suggestion);\n  };\n\n  const getInsightIcon = (type: string) => {\n    switch (type) {\n      case 'success': return TrendingUp;\n      case 'warning': return AlertCircle;\n      case 'opportunity': return Target;\n      default: return Lightbulb;\n    }\n  };\n\n  const getInsightColor = (type: string) => {\n    switch (type) {\n      case 'success': return 'bg-green-500/10 border-green-500/30';\n      case 'warning': return 'bg-yellow-500/10 border-yellow-500/30';\n      case 'opportunity': return 'bg-blue-500/10 border-blue-500/30';\n      default: return 'bg-purple-500/10 border-purple-500/30';\n    }\n  };\n\n  return (\n    <Card className=\"bg-slate-800/60 border-slate-700/50 backdrop-blur-sm\">\n      <CardHeader>\n        <CardTitle className=\"text-white flex items-center gap-2\">\n          <Bot className=\"w-5 h-5 text-blue-400\" />\n          AI Stratejist\n          <Badge variant=\"secondary\" className=\"bg-blue-500/20 text-blue-300\">Beta</Badge>\n        </CardTitle>\n        <p className=\"text-slate-400 text-sm\">Otomatik içgörüler ve interaktif sohbet</p>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        \n        {/* AI Insights */}\n        {insights.length > 0 && (\n          <div className=\"space-y-4\">\n            <h4 className=\"text-white font-semibold flex items-center gap-2\">\n              <Sparkles className=\"w-4 h-4 text-yellow-400\" />\n              Güncel İçgörüler\n            </h4>\n            <ScrollArea className=\"h-48\">\n              <div className=\"space-y-3 pr-4\">\n                {insights.map((insight) => {\n                  const Icon = getInsightIcon(insight.type);\n                  return (\n                    <div \n                      key={insight.id} \n                      className={`p-4 rounded-lg border transition-all duration-200 hover:shadow-lg ${getInsightColor(insight.type)}`}\n                    >\n                      <div className=\"flex items-start gap-3\">\n                        <Icon className=\"w-5 h-5 mt-0.5 text-white\" />\n                        <div className=\"flex-1\">\n                          <h5 className=\"text-white font-medium text-sm mb-1\">{insight.title}</h5>\n                          <p className=\"text-slate-300 text-xs leading-relaxed\">{insight.description}</p>\n                          {insight.action && (\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              className=\"mt-2 text-blue-400 hover:text-blue-300 p-0 h-auto\"\n                            >\n                              {insight.action} →\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </ScrollArea>\n          </div>\n        )}\n\n        {/* Quick Suggestions */}\n        {suggestions.length > 0 && (\n          <div className=\"space-y-3\">\n            <h4 className=\"text-white font-semibold text-sm\">Hızlı Sorular</h4>\n            <div className=\"flex flex-wrap gap-2\">\n              {suggestions.map((suggestion, index) => (\n                <Button\n                  key={index}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleSuggestionClick(suggestion)}\n                  className=\"bg-slate-700/50 hover:bg-slate-600 text-slate-300 border-slate-600 text-xs\"\n                >\n                  {suggestion}\n                </Button>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Chat Interface */}\n        <div className=\"space-y-4\">\n          <h4 className=\"text-white font-semibold flex items-center gap-2\">\n            <MessageCircle className=\"w-4 h-4\" />\n            AI Danışman\n          </h4>\n          \n          <div className=\"bg-slate-700/30 rounded-lg\">\n            <ScrollArea className=\"h-64 p-4\">\n              <div className=\"space-y-3\">\n                {chatHistory.map((msg) => (\n                  <div key={msg.id} className={`flex ${msg.type === 'user' ? 'justify-end' : 'justify-start'}`}>\n                    <div className={`max-w-[80%] p-3 rounded-lg ${\n                      msg.type === 'user' \n                        ? 'bg-blue-600 text-white' \n                        : 'bg-slate-600 text-slate-100'\n                    }`}>\n                      <p className=\"text-sm leading-relaxed\">{msg.message}</p>\n                      <p className=\"text-xs mt-1 opacity-70\">\n                        {msg.timestamp.toLocaleTimeString('tr-TR', { \n                          hour: '2-digit', \n                          minute: '2-digit' \n                        })}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n                \n                {chatMutation.isPending && (\n                  <div className=\"flex justify-start\">\n                    <div className=\"bg-slate-600 rounded-lg p-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-4 h-4 border-2 border-blue-400/30 border-t-blue-400 rounded-full animate-spin\" />\n                        <span className=\"text-sm text-slate-300\">Düşünüyorum...</span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </ScrollArea>\n            \n            <div className=\"p-4 border-t border-slate-600\">\n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"Sorunuzu yazın...\"\n                  value={currentMessage}\n                  onChange={(e) => setCurrentMessage(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                  disabled={chatMutation.isPending}\n                  className=\"bg-slate-800 border-slate-600 text-slate-300 placeholder-slate-400 focus:border-blue-500\"\n                />\n                <Button\n                  onClick={handleSendMessage}\n                  disabled={!currentMessage.trim() || chatMutation.isPending}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  <Send className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8889},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  // Check if we're in test mode (development)\n  const isTestMode = window.location.search.includes('test=true');\n  \n  const { data: user, isLoading, error } = useQuery({\n    queryKey: isTestMode ? [\"/api/auth/test-user\"] : [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":420},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface MarketAnalysisRequest {\n  industry: string;\n  websiteUrl?: string;\n  competitors?: string;\n}\n\nexport interface MarketAnalysisResult {\n  summary: string;\n  trends: string[];\n  competitors: { name: string; analysis: string }[];\n  opportunities: string[];\n  risks: string[];\n  targetAudience: string;\n}\n\nexport interface DashboardData {\n  totalRevenue: number;\n  totalAdSpend: number;\n  avgRoas: number;\n  totalConversions: number;\n  metrics: any[];\n}\n\nexport interface ChatRequest {\n  message: string;\n  context?: string;\n}\n\nexport interface ChatResponse {\n  response: string;\n}\n\nexport const api = {\n  // Market Analysis\n  analyzeMarket: async (data: MarketAnalysisRequest): Promise<MarketAnalysisResult> => {\n    const response = await apiRequest('POST', '/api/ai/market-analysis', data);\n    return response.json();\n  },\n\n  // Dashboard\n  getDashboardData: async (dateRange: string, platform: string): Promise<DashboardData> => {\n    const response = await apiRequest('GET', `/api/dashboard?dateRange=${dateRange}&platform=${platform}`);\n    return response.json();\n  },\n\n  // AI Chat\n  sendChatMessage: async (data: ChatRequest): Promise<ChatResponse> => {\n    const response = await apiRequest('POST', '/api/ai/chat', data);\n    return response.json();\n  },\n\n  // Brand Profile\n  getBrandProfile: async () => {\n    const response = await apiRequest('GET', '/api/brand-profile');\n    return response.json();\n  },\n\n  // Platform Management\n  connectPlatform: async (platform: string, credentials: any) => {\n    const response = await apiRequest('POST', '/api/platforms/connect', {\n      platform,\n      credentials,\n    });\n    return response.json();\n  },\n\n  disconnectPlatform: async (platform: string) => {\n    const response = await apiRequest('POST', '/api/platforms/disconnect', {\n      platform,\n    });\n    return response.json();\n  },\n\n  syncPlatformData: async (platform: string, startDate?: string, endDate?: string) => {\n    const response = await apiRequest('POST', '/api/platforms/sync', {\n      platform,\n      startDate,\n      endDate,\n    });\n    return response.json();\n  },\n\n  testPlatformConnection: async (platform: string) => {\n    const response = await apiRequest('POST', '/api/platforms/test', {\n      platform,\n    });\n    return response.json();\n  },\n\n  // Attribution Analysis\n  getAttributionModel: async (modelType: string, timeRange: string = '30d') => {\n    const response = await apiRequest('GET', `/api/attribution/models/${modelType}?timeRange=${timeRange}`);\n    return response.json();\n  },\n\n  getCustomerJourneys: async (limit: number = 10) => {\n    const response = await apiRequest('GET', `/api/attribution/customer-journeys?limit=${limit}`);\n    return response.json();\n  },\n\n  generateSampleAttributionData: async () => {\n    const response = await apiRequest('POST', '/api/attribution/generate-sample-data');\n    return response.json();\n  },\n\n  processCustomerJourneys: async () => {\n    const response = await apiRequest('POST', '/api/attribution/process-journeys');\n    return response.json();\n  },\n\n  saveBrandProfile: async (data: any) => {\n    const response = await apiRequest('POST', '/api/brand-profile', data);\n    return response.json();\n  },\n\n  // Platform Connections\n  getConnections: async () => {\n    const response = await apiRequest('GET', '/api/connections');\n    return response.json();\n  },\n\n  // Tasks\n  getTasks: async () => {\n    const response = await apiRequest('GET', '/api/tasks');\n    return response.json();\n  },\n\n  createTask: async (data: any) => {\n    const response = await apiRequest('POST', '/api/tasks', data);\n    return response.json();\n  },\n\n  updateTask: async (id: string, data: any) => {\n    const response = await apiRequest('PUT', `/api/tasks/${id}`, data);\n    return response.json();\n  },\n};\n","size_bytes":3844},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/lib/constants.ts":{"content":"\nimport { BarChart3, Users, Target, Zap, Settings, TrendingUp, Eye, DollarSign, FileText, Calendar, Package, GitBranch, MapPin, Search, User, Package2, Heart, Handshake, Palette, Percent, MousePointer, ShoppingCart, CreditCard, Layers, Bot, Play, CheckSquare, Users2, AlertTriangle, AlertCircle, Megaphone } from 'lucide-react';\n\nexport const NAVIGATION_ITEMS = [\n  {\n    id: 'dashboard',\n    label: 'Dashboard',\n    href: '/',\n    icon: 'BarChart3',\n    category: 'genel'\n  },\n  {\n    id: 'attribution',\n    label: 'Atıflandırma Modülü',\n    href: '/attribution',\n    icon: 'GitBranch',\n    category: 'analiz'\n  },\n  {\n    id: 'profitability',\n    label: 'Karlılık Paneli',\n    href: '/profitability',\n    icon: 'DollarSign',\n    category: 'analiz'\n  },\n  {\n    id: 'kpi-analysis',\n    label: 'KPI Analizi',\n    href: '/kpi-analysis',\n    icon: 'BarChart3',\n    category: 'analiz'\n  },\n  {\n    id: 'touchpoint-analysis',\n    label: 'CRO Merkezi',\n    href: '/touchpoint-analysis',\n    icon: 'MapPin',\n    category: 'analiz'\n  },\n  {\n    id: 'market-analysis',\n    label: 'Pazar Analizi',\n    href: '/market-analysis',\n    icon: 'TrendingUp',\n    category: 'analiz'\n  },\n  {\n    id: 'competitor-analysis',\n    label: 'Rakip Analizi',\n    href: '/competitor-analysis',\n    icon: 'Target',\n    category: 'analiz'\n  },\n  {\n    id: 'customers',\n    label: 'Müşteriler',\n    href: '/customers',\n    icon: 'Users',\n    category: 'yonetim'\n  },\n  {\n    id: 'products',\n    label: 'Ürünler',\n    href: '/products',\n    icon: 'Package',\n    category: 'yonetim'\n  },\n  {\n    id: 'campaigns',\n    label: 'Kampanyalar',\n    href: '/campaigns',\n    icon: 'Megaphone',\n    category: 'yonetim'\n  },\n  {\n    id: 'collaborations',\n    label: 'İş Birlikleri',\n    href: '/collaborations',\n    icon: 'Handshake',\n    category: 'yonetim'\n  },\n  {\n    id: 'team',\n    label: 'Ekip ve Görevler',\n    href: '/team',\n    icon: 'Users2',\n    category: 'yonetim'\n  },\n  {\n    id: 'strategy',\n    label: 'Strateji ve Planlama',\n    href: '/strategy',\n    icon: 'Target',\n    category: 'strateji'\n  },\n  {\n    id: 'creative',\n    label: 'Kreatif',\n    href: '/creative',\n    icon: 'Palette',\n    category: 'strateji'\n  },\n  {\n    id: 'reports',\n    label: 'Raporlar',\n    href: '/reports',\n    icon: 'FileText',\n    category: 'strateji'\n  },\n  {\n    id: 'opportunities',\n    label: 'Fırsatlar ve Aksiyonlar',\n    href: '/opportunities',\n    icon: 'Zap',\n    category: 'otomasyon'\n  },\n  {\n    id: 'autopilot',\n    label: 'Otopilot',\n    href: '/autopilot',\n    icon: 'Play',\n    category: 'otomasyon'\n  },\n  {\n    id: 'ai-assistant',\n    label: 'AI Asistan',\n    href: '/ai-assistant',\n    icon: 'Bot',\n    category: 'otomasyon'\n  },\n  {\n    id: 'settings',\n    label: 'Ayarlar',\n    href: '/settings',\n    icon: 'Settings',\n    category: 'yapilandirma'\n  }\n];\n\nexport const PLATFORM_COLORS = {\n  google: 'hsl(4, 90%, 58%)',\n  meta: 'hsl(220, 80%, 60%)',\n  tiktok: 'hsl(0, 0%, 0%)',\n  shopify: 'hsl(144, 65%, 50%)',\n  all: 'hsl(215, 20.2%, 65.1%)'\n};\n\nexport const METRIC_ICONS = {\n  revenue: 'DollarSign',\n  adSpend: 'TrendingUp',\n  roas: 'Target',\n  conversions: 'ShoppingCart',\n  clicks: 'MousePointer',\n  impressions: 'Eye',\n  ctr: 'Percent',\n  cpc: 'CreditCard'\n};\n\nexport const QUICK_ACTIONS = [\n  {\n    id: 'roas-analysis',\n    label: '📊 ROAS Analizi',\n    prompt: 'ROAS analizi yapar mısın?'\n  },\n  {\n    id: 'budget-optimization',\n    label: '💰 Bütçe Optimizasyonu',\n    prompt: 'Bütçemi nasıl optimize edebilirim?'\n  },\n  {\n    id: 'customer-insights',\n    label: '👥 Müşteri İnsights',\n    prompt: 'Müşteri segmentlerim hakkında insight verir misin?'\n  },\n  {\n    id: 'campaign-performance',\n    label: '📈 Kampanya Performansı',\n    prompt: 'Kampanya performansımı analiz eder misin?'\n  }\n];\n\nexport const DATE_RANGES = {\n  '7d': 'Son 7 gün',\n  '30d': 'Son 30 gün',\n  '90d': 'Son 90 gün'\n};\n\nexport const PLATFORMS = {\n  'all': 'Tümü',\n  'google': 'Google',\n  'meta': 'Meta',\n  'tiktok': 'TikTok'\n};\n\nexport const ALERT_TYPES = {\n  opportunity: {\n    color: 'hsl(153, 60%, 53%)',\n    icon: 'TrendingUp',\n    label: 'Fırsat'\n  },\n  warning: {\n    color: 'hsl(48, 96%, 53%)',\n    icon: 'AlertTriangle',\n    label: 'Uyarı'\n  },\n  alert: {\n    color: 'hsl(0, 84.2%, 60.2%)',\n    icon: 'AlertCircle',\n    label: 'Kritik'\n  }\n};\n","size_bytes":4354},"client/src/lib/navigation.ts":{"content":"import { \n  BarChart3, \n  Users, \n  ShoppingBag, \n  DollarSign, \n  TrendingUp, \n  Target, \n  Zap, \n  Eye, \n  MousePointer2, \n  Brain, \n  Settings,\n  FileText,\n  Lightbulb,\n  PlayCircle,\n  CheckSquare\n} from \"lucide-react\";\n\nexport interface NavigationItem {\n  id: string;\n  label: string;\n  href: string;\n  icon: string;\n  category: 'analytics' | 'growth' | 'strategy' | 'tools' | 'settings';\n}\n\nexport const NAVIGATION_ITEMS: NavigationItem[] = [\n  // Analytics\n  { id: 'dashboard', label: 'Genel Bakış', href: '/', icon: 'BarChart3', category: 'analytics' },\n  { id: 'market-analysis', label: 'Pazar Analizi', href: '/market-analysis', icon: 'TrendingUp', category: 'analytics' },\n  { id: 'attribution', label: 'Atıflandırma', href: '/attribution', icon: 'Target', category: 'analytics' },\n  { id: 'profitability', label: 'Karlılık Analizi', href: '/profitability', icon: 'DollarSign', category: 'analytics' },\n  { id: 'kpi-analysis', label: 'KPI Analizi', href: '/kpi-analysis', icon: 'BarChart3', category: 'analytics' },\n\n  // Growth\n  { id: 'customers', label: 'Müşteri Analizi', href: '/customers', icon: 'Users', category: 'growth' },\n  { id: 'touchpoint-analysis', label: 'CRO Sihirbazı', href: '/touchpoint-analysis', icon: 'MousePointer2', category: 'growth' },\n  { id: 'channels', label: 'Kanal Performansı', href: '/channels', icon: 'BarChart3', category: 'growth' },\n\n  // Strategy\n  { id: 'strategy', label: 'Strateji', href: '/strategy', icon: 'Brain', category: 'strategy' },\n  { id: 'creative', label: 'Kreatif Analiz', href: '/creative', icon: 'Lightbulb', category: 'strategy' },\n  { id: 'reports', label: 'Raporlar', href: '/reports', icon: 'FileText', category: 'strategy' },\n  { id: 'opportunities', label: 'Fırsatlar ve Aksiyonlar', href: '/opportunities', icon: 'Lightbulb', category: 'strategy' },\n  { id: 'scenarios', label: 'Senaryolar', href: '/scenarios', icon: 'PlayCircle', category: 'strategy' },\n\n  // Settings\n  { id: 'settings', label: 'Ayarlar', href: '/settings', icon: 'Settings', category: 'settings' },\n];\n\n// Navigation utility to preserve test mode across routes\nexport function getNavigationUrl(path: string): string {\n  const isTestMode = window.location.search.includes('test=true');\n  return isTestMode ? `${path}?test=true` : path;\n}\n\nexport function navigateWithTestMode(path: string): void {\n  const url = getNavigationUrl(path);\n  window.location.href = url;\n}","size_bytes":2422},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/translations.ts":{"content":"export const translations = {\n  tr: {\n    // Header\n    features: \"Özellikler\",\n    dashboard: \"Dashboard\", \n    integrations: \"Entegrasyonlar\",\n    contact: \"İletişim\",\n    login: \"Giriş Yap\",\n    startFree: \"Ücretsiz Başla\",\n    testMode: \"Test Modu\",\n    \n    // Hero\n    heroTitle: \"E-ticaret İşletmeniz için\",\n    heroSubtitle: \"AI Destekli Büyüme Ortağı\",\n    heroDescription: \"Shopify, Meta, Google ve TikTok verilerinizi tek platformda birleştirin. Yapay zeka ile pazarlama kararlarınızı otomatize edin ve kârlılığınızı artırın.\",\n    watchDemo: \"Demo'yu İzle\",\n    tryFree: \"14 Gün Ücretsiz Dene\",\n    testIt: \"Test Et\",\n    integratedPlatforms: \"Entegre Platformlar:\",\n    \n    // Dashboard section\n    dashboardTitle: \"Pazarlama Dashboard'unuz\",\n    dashboardDescription: \"Tüm platformlarınızdan gelen verileri tek yerden yönetin ve AI önerileriyle büyüyün.\",\n    lastUpdate: \"Son güncellenme: 2 dakika önce\",\n    liveData: \"Canlı veri\",\n    totalRevenue: \"Toplam Gelir\",\n    adSpend: \"Reklam Harcaması\", \n    conversions: \"Dönüşümler\",\n    average: \"Ortalama\",\n    thisMonth: \"Bu ay\",\n    \n    // Features\n    featuresTitle: \"Pazarlama Kararlarınızı AI ile Otomatize Edin\",\n    featuresDescription: \"Veri analizinden eylem planına kadar tüm pazarlama süreçlerinizi akıllı asistanımızla yönetin.\",\n    \n    autoIntegration: \"Otomatik Veri Entegrasyonu\",\n    autoIntegrationDesc: \"Shopify, Meta, Google Ads, TikTok verilerinizi tek tıkla bağlayın. Manuel veri girişine son verin.\",\n    \n    aiAnalysis: \"Yapay Zeka Analizi\",\n    aiAnalysisDesc: \"Gelişmiş AI algoritmaları ile pazarlama performansınızı analiz edin ve gelecek trendleri öngörün.\",\n    \n    smartRecommendations: \"Akıllı Öneriler\", \n    smartRecommendationsDesc: \"AI asistanınız size hangi reklamları durdurmanız, hangi ürünleri öne çıkarmanız gerektiğini söyler.\",\n    \n    // AI Recommendations\n    aiRecommendations: \"AI Önerileri\",\n    aiRecommendationsDesc: \"Yapay zeka analizinize göre öneriler\",\n    opportunity: \"Fırsat\",\n    warning: \"Uyarı\",\n    apply: \"Uygula →\",\n    seeDetails: \"Detayları Gör →\"\n  },\n  en: {\n    // Header\n    features: \"Features\",\n    dashboard: \"Dashboard\",\n    integrations: \"Integrations\", \n    contact: \"Contact\",\n    login: \"Login\",\n    startFree: \"Start Free\",\n    testMode: \"Test Mode\",\n    \n    // Hero\n    heroTitle: \"For Your E-commerce Business\",\n    heroSubtitle: \"AI-Powered Growth Partner\",\n    heroDescription: \"Unify your Shopify, Meta, Google and TikTok data in one platform. Automate your marketing decisions with AI and boost your profitability.\",\n    watchDemo: \"Watch Demo\",\n    tryFree: \"Try Free for 14 Days\",\n    testIt: \"Test It\",\n    integratedPlatforms: \"Integrated Platforms:\",\n    \n    // Dashboard section\n    dashboardTitle: \"Your Marketing Dashboard\",\n    dashboardDescription: \"Manage data from all your platforms in one place and grow with AI recommendations.\",\n    lastUpdate: \"Last updated: 2 minutes ago\",\n    liveData: \"Live data\",\n    totalRevenue: \"Total Revenue\",\n    adSpend: \"Ad Spend\",\n    conversions: \"Conversions\", \n    average: \"Average\",\n    thisMonth: \"This month\",\n    \n    // Features\n    featuresTitle: \"Automate Your Marketing Decisions with AI\",\n    featuresDescription: \"Manage all your marketing processes from data analysis to action plans with our smart assistant.\",\n    \n    autoIntegration: \"Automatic Data Integration\",\n    autoIntegrationDesc: \"Connect your Shopify, Meta, Google Ads, TikTok data with one click. End manual data entry.\",\n    \n    aiAnalysis: \"AI Analysis\",\n    aiAnalysisDesc: \"Analyze your marketing performance with advanced AI algorithms and predict future trends.\",\n    \n    smartRecommendations: \"Smart Recommendations\",\n    smartRecommendationsDesc: \"Your AI assistant tells you which ads to stop and which products to promote.\",\n    \n    // AI Recommendations\n    aiRecommendations: \"AI Recommendations\", \n    aiRecommendationsDesc: \"Recommendations based on your AI analysis\",\n    opportunity: \"Opportunity\",\n    warning: \"Warning\",\n    apply: \"Apply →\",\n    seeDetails: \"See Details →\"\n  }\n};\n\nexport type Language = 'tr' | 'en';\nexport type TranslationKey = keyof typeof translations.tr;","size_bytes":4282},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/attribution.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\nimport { \n  BarChart3, PieChart, TrendingUp, TrendingDown, Target, Users, \n  ShoppingCart, DollarSign, Calendar, Filter, ArrowUpDown,\n  Eye, Share2, MousePointer, Smartphone, Monitor, Tablet,\n  Facebook, Instagram, Search, Mail, MessageCircle, Brain,\n  Sparkles, Lightbulb, AlertTriangle, Zap, Send, ChevronDown,\n  ArrowRight\n} from \"lucide-react\";\nimport AIChatPanel from \"@/components/ai-chat-panel\";\nimport { useQuery } from '@tanstack/react-query';\n\nexport default function Attribution() {\n  const [timeRange, setTimeRange] = useState('30d');\n  const [selectedModel, setSelectedModel] = useState('lastClick');\n  const [results, setResults] = useState<any>(null);\n\n  // API call to get attribution models\n  const { data: models } = useQuery({\n    queryKey: ['attribution-models'],\n    queryFn: async () => {\n      const response = await fetch('/api/attribution/models');\n      return response.json();\n    }\n  });\n\n  // API call to calculate attribution\n  const calculateAttribution = async () => {\n    try {\n      const response = await fetch('/api/attribution/calculate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: selectedModel,\n          dateRange: '30d'\n        })\n      });\n      const data = await response.json();\n      setResults(data);\n    } catch (error) {\n      console.error('Attribution calculation failed:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedModel) {\n      calculateAttribution();\n    }\n  }, [selectedModel]);\n\n  // Revenue distribution data for different models\n  const revenueDistribution = {\n    lastClick: {\n      'Google Ads': 60,\n      'Meta Ads': 15,\n      'Instagram': 10,\n      'TikTok Ads': 8,\n      'Email': 4,\n      'Direkt': 3\n    },\n    firstClick: {\n      'Google Ads': 25,\n      'Meta Ads': 20,\n      'Instagram': 30,\n      'TikTok Ads': 15,\n      'Email': 5,\n      'Direkt': 5\n    },\n    linear: {\n      'Google Ads': 40,\n      'Meta Ads': 22,\n      'Instagram': 18,\n      'TikTok Ads': 12,\n      'Email': 5,\n      'Direkt': 3\n    },\n    smart: {\n      'Google Ads': 40,\n      'Meta Ads': 20,\n      'Instagram': 35,\n      'TikTok Ads': 3,\n      'Email': 1,\n      'Direkt': 1\n    }\n  };\n\n  const customerJourneys = [\n    {\n      percentage: 42,\n      path: [\n        { channel: 'Instagram', icon: <Eye className=\"w-5 h-5\" />, action: 'Reklam Gösterimi', color: 'from-pink-500 to-rose-500' },\n        { channel: 'Website', icon: <MousePointer className=\"w-5 h-5\" />, action: 'Ürün Sayfası', color: 'from-blue-500 to-cyan-500' },\n        { channel: 'Google', icon: <Search className=\"w-5 h-5\" />, action: 'Marka Araması', color: 'from-green-500 to-emerald-500' },\n        { channel: 'Satın Alma', icon: <ShoppingCart className=\"w-5 h-5\" />, action: 'Dönüşüm', color: 'from-purple-500 to-violet-500' }\n      ]\n    },\n    {\n      percentage: 28,\n      path: [\n        { channel: 'TikTok', icon: <Eye className=\"w-5 h-5\" />, action: 'Video İzleme', color: 'from-gray-800 to-gray-900' },\n        { channel: 'Website', icon: <MousePointer className=\"w-5 h-5\" />, action: 'Anasayfa', color: 'from-blue-500 to-cyan-500' },\n        { channel: 'Email', icon: <Users className=\"w-5 h-5\" />, action: 'Kampanya', color: 'from-orange-500 to-red-500' },\n        { channel: 'Satın Alma', icon: <ShoppingCart className=\"w-5 h-5\" />, action: 'Dönüşüm', color: 'from-purple-500 to-violet-500' }\n      ]\n    },\n    {\n      percentage: 30,\n      path: [\n        { channel: 'Google Ads', icon: <Search className=\"w-5 h-5\" />, action: 'Arama Reklamı', color: 'from-blue-600 to-blue-700' },\n        { channel: 'Website', icon: <MousePointer className=\"w-5 h-5\" />, action: 'Kategori Sayfası', color: 'from-blue-500 to-cyan-500' },\n        { channel: 'Satın Alma', icon: <ShoppingCart className=\"w-5 h-5\" />, action: 'Direkt Dönüşüm', color: 'from-purple-500 to-violet-500' }\n      ]\n    }\n  ];\n\n  const insights = [\n    {\n      id: 1,\n      icon: <Target className=\"w-5 h-5 text-blue-400\" />,\n      title: \"Hedef Kitle Analizi\",\n      content: \"Instagram'dan gelen müşterilerinizin %68'i 25-34 yaş aralığında. Bu segment için özel kampanyalar oluşturabilirsiniz.\",\n      type: \"info\"\n    },\n    {\n      id: 2,\n      icon: <TrendingUp className=\"w-5 h-5 text-green-400\" />,\n      title: \"Büyüme Fırsatı\",\n      content: \"Email Marketing kanalınızın dönüşüm oranı %12 ile sektör ortalamasının 3 katı. Bu başarıyı diğer kanallarda da uygulayabilirsiniz.\",\n      type: \"success\"\n    },\n    {\n      id: 3,\n      icon: <AlertTriangle className=\"w-5 h-5 text-yellow-400\" />,\n      title: \"Dikkat Edilmesi Gereken\",\n      content: \"Google Ads'teki tıklama maliyetleriniz son 2 haftada %15 arttı. Anahtar kelime stratejinizi gözden geçirmenizi öneriyorum.\",\n      type: \"warning\"\n    },\n    {\n      id: 4,\n      icon: <Lightbulb className=\"w-5 h-5 text-purple-400\" />,\n      title: \"Strateji Önerisi\",\n      content: \"TikTok'tan gelen genç kullanıcıları Instagram'da retargeting ile yakalayarak dönüşüm oranınızı %25 artırabilirsiniz.\",\n      type: \"tip\"\n    },\n    {\n      id: 5,\n      icon: <TrendingDown className=\"w-5 h-5 text-red-400\" />,\n      title: \"Performans Uyarısı\",\n      content: \"Meta Ads kampanyalarınızın CTR'ı düşüş eğiliminde. Kreatif materyallerinizi yenilemenin zamanı gelmiş olabilir.\",\n      type: \"alert\"\n    }\n  ];\n\n  const currentData = revenueDistribution[selectedModel as keyof typeof revenueDistribution];\n\n  const getChannelColor = (channel: string) => {\n    const colors: { [key: string]: string } = {\n      'Google Ads': 'bg-gradient-to-r from-blue-500 to-blue-600',\n      'Meta Ads': 'bg-gradient-to-r from-blue-600 to-blue-700',\n      'Instagram': 'bg-gradient-to-r from-pink-500 to-rose-500',\n      'TikTok Ads': 'bg-gradient-to-r from-gray-800 to-black',\n      'Email': 'bg-gradient-to-r from-green-500 to-emerald-500',\n      'Direkt': 'bg-gradient-to-r from-gray-500 to-gray-600'\n    };\n    return colors[channel] || 'bg-gradient-to-r from-gray-400 to-gray-500';\n  };\n\n  const modelOptions = [\n    { value: 'lastClick', label: 'Son Tıklama', desc: 'Satışı tamamlayan son adım' },\n    { value: 'firstClick', label: 'İlk Tıklama', desc: 'İlk tanışma adımı' },\n    { value: 'linear', label: 'Lineer Model', desc: 'Eşit dağılım' },\n    { value: 'smart', label: 'Akıllı Model', desc: 'AI tabanlı analiz', premium: true }\n  ];\n\n  return (\n        <main className=\"h-full overflow-y-auto bg-slate-800/50 p-4 sm:p-6 lg:p-8\">\n          <div className=\"space-y-8\">\n\n            {/* Header with Filters */}\n            <div className=\"flex flex-col gap-6\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-white mb-2\">Atıflandırma Komuta Merkezi</h1>\n                <p className=\"text-slate-400\">Merve'yi adım adım yönlendiren akıllı analiz platformu</p>\n              </div>\n\n              {/* Filter Controls */}\n              <Card className=\"bg-slate-800/60 border-slate-700/50 backdrop-blur-sm\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex flex-wrap items-center gap-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <Eye className=\"w-5 h-5 text-slate-400\" />\n                      <span className=\"text-sm font-medium text-slate-300\">Bakış Açısı:</span>\n                    </div>\n\n                    <div className=\"flex flex-wrap gap-2\">\n                      {modelOptions.map((option) => (\n                        <Button\n                          key={option.value}\n                          variant={selectedModel === option.value ? 'default' : 'outline'}\n                          size=\"sm\"\n                          className={`h-auto px-4 py-2 flex flex-col gap-1 min-w-[120px] relative transition-all duration-200 ${\n                            selectedModel === option.value \n                              ? option.premium \n                                ? 'bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 border-0' \n                                : 'bg-blue-600 hover:bg-blue-700 border-0'\n                              : 'bg-slate-700/50 hover:bg-slate-600/50 border-slate-600 text-slate-300'\n                          }`}\n                          onClick={() => setSelectedModel(option.value)}\n                        >\n                          <div className=\"flex items-center gap-1\">\n                            {option.premium && <Sparkles className=\"w-3 h-3\" />}\n                            <span className=\"font-medium text-xs\">{option.label}</span>\n                          </div>\n                          <span className=\"text-xs opacity-80 text-center\">{option.desc}</span>\n                          {option.premium && (\n                            <Badge className=\"absolute -top-1 -right-1 bg-yellow-500 text-black text-xs px-1 py-0\">\n                              AI\n                            </Badge>\n                          )}\n                        </Button>\n                      ))}\n                    </div>\n\n                    <div className=\"ml-auto flex items-center gap-4\">\n                      <Select value={timeRange} onValueChange={setTimeRange}>\n                        <SelectTrigger className=\"bg-slate-700/50 border-slate-600 text-slate-300 w-32\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-slate-800 border-slate-600\">\n                          <SelectItem value=\"7d\">Son 7 gün</SelectItem>\n                          <SelectItem value=\"30d\">Son 30 gün</SelectItem>\n                          <SelectItem value=\"90d\">Son 90 gün</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Revenue Distribution */}\n            <Card className=\"bg-slate-800/60 border-slate-700/50 backdrop-blur-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <DollarSign className=\"w-5 h-5\" />\n                  Hazine Dağılımı\n                </CardTitle>\n                <p className=\"text-slate-400 text-sm\">Toplam cironun kanallar arasındaki dağılımı</p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n                  {Object.entries(currentData).map(([channel, percentage]) => (\n                    <div key={channel} className=\"bg-slate-700/30 rounded-xl p-4 space-y-3\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-white font-medium\">{channel}</span>\n                        <span className=\"text-white font-bold text-lg\">%{percentage}</span>\n                      </div>\n                      <div className=\"w-full bg-slate-600/50 rounded-full h-2\">\n                        <div\n                          className={`h-2 rounded-full transition-all duration-1000 ease-out ${getChannelColor(channel)}`}\n                          style={{ width: `${percentage}%` }}\n                        />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Customer Journeys - Redesigned */}\n            <Card className=\"bg-slate-800/60 border-slate-700/50 backdrop-blur-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <TrendingUp className=\"w-5 h-5\" />\n                  Altın Patikalar\n                </CardTitle>\n                <p className=\"text-slate-400 text-sm\">En yaygın müşteri yolculukları</p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-8\">\n                  {customerJourneys.map((journey, index) => (\n                    <div key={index} className=\"relative\">\n                      <div className=\"flex items-center justify-between mb-6\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white font-bold text-sm\">\n                            {index + 1}\n                          </div>\n                          <span className=\"text-slate-300 font-medium\">Yolculuk {index + 1}</span>\n                        </div>\n                        <Badge variant=\"secondary\" className=\"bg-gradient-to-r from-green-500/20 to-emerald-500/20 text-green-400 border-green-500/30\">\n                          %{journey.percentage} Dönüşüm\n                        </Badge>\n                      </div>\n\n                      <div className=\"relative\">\n                        {/* Connection line */}\n                        <div className=\"absolute top-1/2 left-0 right-0 h-0.5 bg-gradient-to-r from-slate-600 via-slate-500 to-slate-600 -translate-y-1/2 z-0\" />\n\n                        <div className=\"relative z-10 flex items-center justify-between\">\n                          {journey.path.map((step, stepIndex) => (\n                            <div key={stepIndex} className=\"flex flex-col items-center group\">\n                              <div className={`w-16 h-16 bg-gradient-to-br ${step.color} rounded-2xl flex items-center justify-center mb-3 shadow-lg transform transition-all duration-300 group-hover:scale-110 group-hover:shadow-xl`}>\n                                {step.icon}\n                              </div>\n                              <div className=\"text-center space-y-1\">\n                                <span className=\"text-sm font-medium text-white\">{step.channel}</span>\n                                <span className=\"text-xs text-slate-400\">{step.action}</span>\n                              </div>\n\n                              {stepIndex < journey.path.length - 1 && (\n                                <div className=\"absolute top-8 left-full w-full flex items-center justify-center pointer-events-none\">\n                                  <ArrowRight className=\"w-5 h-5 text-slate-400\" />\n                                </div>\n                              )}\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* AI Insights with Chat */}\n            <AIChatPanel \n              pageContext=\"Atıflandırma Analizi\"\n              insights={insights}\n              suggestions={[\n                'En etkili kanal hangisi?',\n                'Instagram vs Google performans karşılaştırması',\n                'Müşteri yolculuğunu analiz et',\n                'Bütçe dağılımı öner'\n              ]}\n            />\n\n          </div>\n        </main>\n  );\n}","size_bytes":15617},"client/src/pages/auth.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Eye, EyeOff, Loader2 } from \"lucide-react\";\n\nexport default function Auth() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    confirmPassword: '',\n    firstName: '',\n    lastName: '',\n    companyName: ''\n  });\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      // Redirect to onboarding after successful login\n      window.location.href = '/onboarding';\n    } catch (error) {\n      console.error('Login error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSignup = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    if (formData.password !== formData.confirmPassword) {\n      alert('Şifreler eşleşmiyor');\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      // Redirect to onboarding after successful signup\n      window.location.href = '/onboarding';\n    } catch (error) {\n      console.error('Signup error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Pazar Zekası</h1>\n          <p className=\"text-gray-600\">Pazarlama zekası platformuna hoş geldiniz</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-center\">Hesabınıza Erişin</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"login\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"login\">Giriş Yap</TabsTrigger>\n                <TabsTrigger value=\"signup\">Hesap Oluştur</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"login\">\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">E-posta</Label>\n                    <Input\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      placeholder=\"ornek@sirket.com\"\n                      value={formData.email}\n                      onChange={handleInputChange}\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"password\">Şifre</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"password\"\n                        name=\"password\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"••••••••\"\n                        value={formData.password}\n                        onChange={handleInputChange}\n                        required\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                        onClick={() => setShowPassword(!showPassword)}\n                      >\n                        {showPassword ? (\n                          <EyeOff className=\"h-4 w-4\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4\" />\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n\n                  <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                    {isLoading ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Giriş yapılıyor...\n                      </>\n                    ) : (\n                      'Giriş Yap'\n                    )}\n                  </Button>\n                </form>\n              </TabsContent>\n\n              <TabsContent value=\"signup\">\n                <form onSubmit={handleSignup} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"firstName\">Ad</Label>\n                      <Input\n                        id=\"firstName\"\n                        name=\"firstName\"\n                        placeholder=\"Adınız\"\n                        value={formData.firstName}\n                        onChange={handleInputChange}\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"lastName\">Soyad</Label>\n                      <Input\n                        id=\"lastName\"\n                        name=\"lastName\"\n                        placeholder=\"Soyadınız\"\n                        value={formData.lastName}\n                        onChange={handleInputChange}\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"companyName\">Şirket Adı</Label>\n                    <Input\n                      id=\"companyName\"\n                      name=\"companyName\"\n                      placeholder=\"Şirket Adı\"\n                      value={formData.companyName}\n                      onChange={handleInputChange}\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"signupEmail\">E-posta</Label>\n                    <Input\n                      id=\"signupEmail\"\n                      name=\"email\"\n                      type=\"email\"\n                      placeholder=\"ornek@sirket.com\"\n                      value={formData.email}\n                      onChange={handleInputChange}\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"signupPassword\">Şifre</Label>\n                    <Input\n                      id=\"signupPassword\"\n                      name=\"password\"\n                      type=\"password\"\n                      placeholder=\"••••••••\"\n                      value={formData.password}\n                      onChange={handleInputChange}\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"confirmPassword\">Şifre Tekrar</Label>\n                    <Input\n                      id=\"confirmPassword\"\n                      name=\"confirmPassword\"\n                      type=\"password\"\n                      placeholder=\"••••••••\"\n                      value={formData.confirmPassword}\n                      onChange={handleInputChange}\n                      required\n                    />\n                  </div>\n\n                  <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                    {isLoading ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Hesap oluşturuluyor...\n                      </>\n                    ) : (\n                      'Hesap Oluştur'\n                    )}\n                  </Button>\n                </form>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8529},"client/src/pages/channels.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport AIChatPanel from \"@/components/ai-chat-panel\";\nimport { \n  BarChart3, \n  TrendingUp, \n  TrendingDown, \n  DollarSign, \n  Target, \n  MousePointer2, \n  Eye, \n  Users,\n  Calendar,\n  Download,\n  Play,\n  Pause,\n  Settings,\n  Filter,\n  Search,\n  ArrowUpDown,\n  ChevronUp,\n  ChevronDown,\n  Zap,\n  AlertTriangle,\n  CheckCircle,\n  Info,\n  Lightbulb,\n  Activity,\n  PieChart,\n  LineChart\n} from \"lucide-react\";\nimport { LineChart as RechartsLineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart as RechartsPieChart, Cell, BarChart as RechartsBarChart, Bar } from 'recharts';\n\n// Genişletilmiş veri simülasyonu\nconst ADVANCED_CHANNEL_DATA = {\n  google: {\n    summary: {\n      spend: \"₺45,750\",\n      revenue: \"₺198,650\",\n      roas: \"4.34\",\n      conversions: 1256,\n      ctr: \"3.2%\",\n      cpc: \"₺2.45\",\n      impressions: \"1,450,000\",\n      clicks: \"46,400\"\n    },\n    campaigns: [\n      { \n        id: 1, \n        name: \"Marka Aramaları - TR\", \n        spend: \"₺12,400\", \n        revenue: \"₺89,200\", \n        roas: \"7.19\", \n        conversions: 445, \n        status: \"Aktif\",\n        ctr: \"8.5%\",\n        cpc: \"₺1.85\",\n        impressions: \"320,000\",\n        trend: \"up\"\n      },\n      { \n        id: 2, \n        name: \"Alışveriş - Elbiseler\", \n        spend: \"₺18,750\", \n        revenue: \"₺76,850\", \n        roas: \"4.10\", \n        conversions: 387, \n        status: \"Aktif\",\n        ctr: \"2.8%\",\n        cpc: \"₺2.95\",\n        impressions: \"580,000\",\n        trend: \"up\"\n      },\n      { \n        id: 3, \n        name: \"Görüntülü Reklam Ağı\", \n        spend: \"₺8,950\", \n        revenue: \"₺19,450\", \n        roas: \"2.17\", \n        conversions: 142, \n        status: \"Optimize Ediliyor\",\n        ctr: \"1.2%\",\n        cpc: \"₺3.45\",\n        impressions: \"445,000\",\n        trend: \"down\"\n      },\n      { \n        id: 4, \n        name: \"YouTube Videoları\", \n        spend: \"₺5,650\", \n        revenue: \"₺13,150\", \n        roas: \"2.33\", \n        conversions: 89, \n        status: \"Test Aşaması\",\n        ctr: \"2.1%\",\n        cpc: \"₺2.87\",\n        impressions: \"195,000\",\n        trend: \"stable\"\n      }\n    ],\n    insights: [\n      {\n        type: \"success\",\n        title: \"Marka Kampanyan Mükemmel Performans Gösteriyor\",\n        description: \"ROAS 7.19x ile sektör ortalamasının %340 üzerinde. Bu kampanyanın bütçesini artırarak ölçeklendirebilirsin.\",\n        priority: \"high\"\n      },\n      {\n        type: \"warning\", \n        title: \"Görüntülü Reklam Optimizasyona İhtiyaç Duyuyor\",\n        description: \"CTR %1.2 ile düşük seviyede. Kreatif refresh ve audience targeting revizyonu öneriyoruz.\",\n        priority: \"medium\"\n      },\n      {\n        type: \"info\",\n        title: \"YouTube Kampanyası Umut Verici\",\n        description: \"Henüz test aşamasında ama erken sinyaller pozitif. 2 hafta daha test edip karar verebiliriz.\",\n        priority: \"low\"\n      }\n    ],\n    performanceChart: [\n      { date: \"1 Oca\", spend: 1200, revenue: 5800, roas: 4.83 },\n      { date: \"2 Oca\", spend: 1450, revenue: 6200, roas: 4.28 },\n      { date: \"3 Oca\", spend: 1380, revenue: 6950, roas: 5.04 },\n      { date: \"4 Oca\", spend: 1620, revenue: 7100, roas: 4.38 },\n      { date: \"5 Oca\", spend: 1550, revenue: 7450, roas: 4.81 },\n      { date: \"6 Oca\", spend: 1480, revenue: 6800, roas: 4.59 },\n      { date: \"7 Oca\", spend: 1650, revenue: 7350, roas: 4.45 }\n    ],\n    deviceBreakdown: [\n      { device: \"Mobil\", spend: 25650, revenue: 118750, share: 56 },\n      { device: \"Masaüstü\", spend: 15100, revenue: 59800, share: 33 },\n      { device: \"Tablet\", spend: 5000, revenue: 20100, share: 11 }\n    ]\n  },\n  meta: {\n    summary: {\n      spend: \"₺52,380\",\n      revenue: \"₺189,750\",\n      roas: \"3.62\",\n      conversions: 1842,\n      ctr: \"2.8%\",\n      cpc: \"₺1.95\",\n      impressions: \"2,150,000\",\n      clicks: \"60,200\"\n    },\n    campaigns: [\n      { \n        id: 1, \n        name: \"Yeniden Pazarlama - Sepet Terk\", \n        spend: \"₺18,500\", \n        revenue: \"₺95,750\", \n        roas: \"5.18\", \n        conversions: 672, \n        status: \"Aktif\",\n        ctr: \"4.2%\",\n        cpc: \"₺1.45\",\n        impressions: \"520,000\",\n        trend: \"up\"\n      },\n      { \n        id: 2, \n        name: \"Lookalike - Satın Alanlar %1\", \n        spend: \"₺22,100\", \n        revenue: \"₺64,850\", \n        roas: \"2.94\", \n        conversions: 518, \n        status: \"Aktif\",\n        ctr: \"2.1%\",\n        cpc: \"₺2.15\",\n        impressions: \"780,000\",\n        trend: \"stable\"\n      },\n      { \n        id: 3, \n        name: \"Video Engagement - Yeni Koleksiyon\", \n        spend: \"₺8,450\", \n        revenue: \"₺18,650\", \n        roas: \"2.21\", \n        conversions: 234, \n        status: \"Optimize Ediliyor\",\n        ctr: \"3.8%\",\n        cpc: \"₺1.85\",\n        impressions: \"445,000\",\n        trend: \"up\"\n      },\n      { \n        id: 4, \n        name: \"Instagram Stories - Influencer\", \n        spend: \"₺3,330\", \n        revenue: \"₺10,500\", \n        roas: \"3.15\", \n        conversions: 89, \n        status: \"Test Aşaması\",\n        ctr: \"5.2%\",\n        cpc: \"₺1.25\",\n        impressions: \"285,000\",\n        trend: \"up\"\n      }\n    ],\n    insights: [\n      {\n        type: \"success\",\n        title: \"Remarketing Kampanları Çok Başarılı\",\n        description: \"Sepet terk kampanyan 5.18x ROAS ile mükemmel performans gösteriyor. Bu segmente daha fazla bütçe ayırabilirsin.\",\n        priority: \"high\"\n      },\n      {\n        type: \"warning\",\n        title: \"Lookalike Audience Genişletilmeli\",\n        description: \"%1 lookalike audience doygunluğa yakın. %2-3 segmentleri de test etmeyi öneriyoruz.\",\n        priority: \"medium\"\n      },\n      {\n        type: \"info\",\n        title: \"Instagram Stories Yüksek Engagement\",\n        description: \"CTR %5.2 ile çok iyi, ancak hacim düşük. Kreatif setini genişletip ölçeklendirilebilir.\",\n        priority: \"medium\"\n      }\n    ],\n    performanceChart: [\n      { date: \"1 Oca\", spend: 1850, revenue: 6750, roas: 3.65 },\n      { date: \"2 Oca\", spend: 2100, revenue: 7450, roas: 3.55 },\n      { date: \"3 Oca\", spend: 1950, revenue: 7100, roas: 3.64 },\n      { date: \"4 Oca\", spend: 2250, revenue: 8200, roas: 3.64 },\n      { date: \"5 Oca\", spend: 2050, revenue: 7850, roas: 3.83 },\n      { date: \"6 Oca\", spend: 1980, revenue: 7200, roas: 3.64 },\n      { date: \"7 Oca\", spend: 2180, revenue: 8100, roas: 3.72 }\n    ],\n    deviceBreakdown: [\n      { device: \"Mobil\", spend: 39285, revenue: 142312, share: 75 },\n      { device: \"Masaüstü\", spend: 10476, revenue: 37950, share: 20 },\n      { device: \"Tablet\", spend: 2619, revenue: 9488, share: 5 }\n    ]\n  },\n  tiktok: {\n    summary: {\n      spend: \"₺28,950\",\n      revenue: \"₺98,750\",\n      roas: \"3.41\",\n      conversions: 892,\n      ctr: \"4.8%\",\n      cpc: \"₺1.25\",\n      impressions: \"1,850,000\",\n      clicks: \"88,800\"\n    },\n    campaigns: [\n      { \n        id: 1, \n        name: \"Video Tanıtım - Influencer Kollab\", \n        spend: \"₺18,200\", \n        revenue: \"₺68,450\", \n        roas: \"3.76\", \n        conversions: 524, \n        status: \"Aktif\",\n        ctr: \"6.2%\",\n        cpc: \"₺1.15\",\n        impressions: \"980,000\",\n        trend: \"up\"\n      },\n      { \n        id: 2, \n        name: \"Spark Ads - User Generated\", \n        spend: \"₺7,450\", \n        revenue: \"₺21,850\", \n        roas: \"2.93\", \n        conversions: 198, \n        status: \"Test Aşaması\",\n        ctr: \"3.8%\",\n        cpc: \"₺1.45\",\n        impressions: \"420,000\",\n        trend: \"stable\"\n      },\n      { \n        id: 3, \n        name: \"Brand Takeover - Weekend\", \n        spend: \"₺3,300\", \n        revenue: \"₺8,450\", \n        roas: \"2.56\", \n        conversions: 89, \n        status: \"Duraklatıldı\",\n        ctr: \"2.1%\",\n        cpc: \"₺1.85\",\n        impressions: \"450,000\",\n        trend: \"down\"\n      }\n    ],\n    insights: [\n      {\n        type: \"success\",\n        title: \"Influencer Kollaborasyonları Etkili\",\n        description: \"CTR %6.2 ile platform ortalamasının üzerinde. Bu format ile daha fazla kreatiflere yatırım yapılabilir.\",\n        priority: \"high\"\n      },\n      {\n        type: \"info\",\n        title: \"Spark Ads Potansiyel Gösteriyor\",\n        description: \"User generated content iyi performans gösteriyor. Daha fazla UGC toplayıp test edilebilir.\",\n        priority: \"medium\"\n      },\n      {\n        type: \"warning\",\n        title: \"Brand Takeover Maliyetli\",\n        description: \"CPC yüksek ve ROAS düşük. Bu format şu an için durduruluyor, audiencei diğer kampanyalara yönlendirelim.\",\n        priority: \"low\"\n      }\n    ],\n    performanceChart: [\n      { date: \"1 Oca\", spend: 950, revenue: 3200, roas: 3.37 },\n      { date: \"2 Oca\", spend: 1150, revenue: 3850, roas: 3.35 },\n      { date: \"3 Oca\", spend: 1050, revenue: 3950, roas: 3.76 },\n      { date: \"4 Oca\", spend: 1250, revenue: 4200, roas: 3.36 },\n      { date: \"5 Oca\", spend: 1100, revenue: 3850, roas: 3.50 },\n      { date: \"6 Oca\", spend: 1200, revenue: 4100, roas: 3.42 },\n      { date: \"7 Oca\", spend: 1350, revenue: 4450, roas: 3.30 }\n    ],\n    deviceBreakdown: [\n      { device: \"Mobil\", spend: 27521, revenue: 93912, share: 95 },\n      { device: \"Tablet\", spend: 1429, revenue: 4838, share: 5 }\n    ]\n  }\n};\n\nconst COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6'];\n\nexport default function ChannelsPage() {\n  const [selectedChannel, setSelectedChannel] = useState(\"google\");\n  const [dateRange, setDateRange] = useState(\"7d\");\n  const [sortBy, setSortBy] = useState(\"roas\");\n  const [sortOrder, setSortOrder] = useState(\"desc\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n\n  const currentChannelData = ADVANCED_CHANNEL_DATA[selectedChannel as keyof typeof ADVANCED_CHANNEL_DATA];\n\n  // Kampanya sıralama ve filtreleme\n  const filteredAndSortedCampaigns = currentChannelData.campaigns\n    .filter(campaign => {\n      const matchesSearch = campaign.name.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesStatus = statusFilter === \"all\" || campaign.status === statusFilter;\n      return matchesSearch && matchesStatus;\n    })\n    .sort((a, b) => {\n      const aValue = sortBy === \"roas\" ? parseFloat(a.roas) : parseFloat(a.spend.replace(/[₺,]/g, ''));\n      const bValue = sortBy === \"roas\" ? parseFloat(b.roas) : parseFloat(b.spend.replace(/[₺,]/g, ''));\n      return sortOrder === \"desc\" ? bValue - aValue : aValue - bValue;\n    });\n\n  const getChannelIcon = (channel: string) => {\n    switch(channel) {\n      case \"google\": return \"🔍\";\n      case \"meta\": return \"📘\";\n      case \"tiktok\": return \"🎵\";\n      default: return \"📊\";\n    }\n  };\n\n  const getChannelColor = (channel: string) => {\n    switch(channel) {\n      case \"google\": return \"from-red-500 to-yellow-500\";\n      case \"meta\": return \"from-blue-500 to-blue-700\";\n      case \"tiktok\": return \"from-pink-500 to-black\";\n      default: return \"from-gray-500 to-gray-700\";\n    }\n  };\n\n  const getTrendIcon = (trend: string) => {\n    switch(trend) {\n      case \"up\": return <TrendingUp className=\"w-4 h-4 text-green-400\" />;\n      case \"down\": return <TrendingDown className=\"w-4 h-4 text-red-400\" />;\n      default: return <Activity className=\"w-4 h-4 text-yellow-400\" />;\n    }\n  };\n\n  const getInsightIcon = (type: string) => {\n    switch(type) {\n      case \"success\": return <CheckCircle className=\"w-5 h-5 text-green-400\" />;\n      case \"warning\": return <AlertTriangle className=\"w-5 h-5 text-yellow-400\" />;\n      default: return <Info className=\"w-5 h-5 text-blue-400\" />;\n    }\n  };\n\n  const MetricWidget = ({ title, value, change, icon: Icon, color }: any) => (\n    <Card className=\"bg-slate-800 border-slate-700 hover:bg-slate-750 transition-colors\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-slate-400 text-xs font-medium uppercase tracking-wide\">{title}</p>\n            <p className=\"text-2xl font-bold text-white mt-1\">{value}</p>\n            {change && (\n              <p className={`text-sm mt-1 flex items-center gap-1 ${change.startsWith('+') ? 'text-green-400' : 'text-red-400'}`}>\n                {change.startsWith('+') ? <TrendingUp className=\"w-3 h-3\" /> : <TrendingDown className=\"w-3 h-3\" />}\n                {change}\n              </p>\n            )}\n          </div>\n          <div className={`w-12 h-12 rounded-xl bg-gradient-to-br ${color} flex items-center justify-center text-white`}>\n            <Icon className=\"w-6 h-6\" />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n\n            {/* Header Controls */}\n            <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-white mb-2 flex items-center gap-3\">\n                  <span className=\"text-4xl\">{getChannelIcon(selectedChannel)}</span>\n                  Kanal Performans Analizi\n                </h1>\n                <p className=\"text-slate-400 text-lg\">Detaylı reklam platformu analizi ve optimizasyon önerileri</p>\n              </div>\n\n              <div className=\"flex flex-wrap gap-3\">\n                <Select value={dateRange} onValueChange={setDateRange}>\n                  <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-300 w-40\">\n                    <Calendar className=\"w-4 h-4 mr-2\" />\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-slate-800 border-slate-600\">\n                    <SelectItem value=\"1d\">Bugün</SelectItem>\n                    <SelectItem value=\"7d\">Son 7 gün</SelectItem>\n                    <SelectItem value=\"30d\">Son 30 gün</SelectItem>\n                    <SelectItem value=\"90d\">Son 90 gün</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Rapor Al\n                </Button>\n              </div>\n            </div>\n\n            {/* Channel Selection Tabs */}\n            <Tabs value={selectedChannel} onValueChange={setSelectedChannel} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-3 bg-slate-800 border-slate-700 h-14\">\n                <TabsTrigger \n                  value=\"google\"\n                  className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-red-500 data-[state=active]:to-yellow-500 data-[state=active]:text-white text-slate-300 font-medium\"\n                >\n                  <span className=\"text-xl mr-2\">🔍</span>\n                  Google Ads\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"meta\"\n                  className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-blue-700 data-[state=active]:text-white text-slate-300 font-medium\"\n                >\n                  <span className=\"text-xl mr-2\">📘</span>\n                  Meta Ads\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"tiktok\"\n                  className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-pink-500 data-[state=active]:to-black data-[state=active]:text-white text-slate-300 font-medium\"\n                >\n                  <span className=\"text-xl mr-2\">🎵</span>\n                  TikTok Ads\n                </TabsTrigger>\n              </TabsList>\n\n              {/* Channel Content */}\n              <TabsContent value={selectedChannel} className=\"space-y-6 mt-6\">\n                \n                {/* Summary Widgets */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  <MetricWidget \n                    title=\"Toplam Harcama\" \n                    value={currentChannelData.summary.spend}\n                    change=\"+12.5%\"\n                    icon={DollarSign}\n                    color=\"from-red-500 to-pink-500\"\n                  />\n                  <MetricWidget \n                    title=\"Toplam Gelir\" \n                    value={currentChannelData.summary.revenue}\n                    change=\"+18.7%\"\n                    icon={TrendingUp}\n                    color=\"from-green-500 to-emerald-500\"\n                  />\n                  <MetricWidget \n                    title=\"ROAS\" \n                    value={`${currentChannelData.summary.roas}x`}\n                    change=\"+0.3x\"\n                    icon={Target}\n                    color=\"from-blue-500 to-cyan-500\"\n                  />\n                  <MetricWidget \n                    title=\"Dönüşümler\" \n                    value={currentChannelData.summary.conversions.toLocaleString()}\n                    change=\"+15.2%\"\n                    icon={MousePointer2}\n                    color=\"from-purple-500 to-indigo-500\"\n                  />\n                </div>\n\n                {/* Performance Chart & Device Breakdown */}\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                  <Card className=\"lg:col-span-2 bg-slate-800 border-slate-700\">\n                    <CardHeader>\n                      <CardTitle className=\"text-white flex items-center gap-2\">\n                        <LineChart className=\"w-5 h-5 text-blue-400\" />\n                        Son 7 Günlük Performans Trendi\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={300}>\n                        <RechartsLineChart data={currentChannelData.performanceChart}>\n                          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                          <XAxis dataKey=\"date\" stroke=\"#9CA3AF\" />\n                          <YAxis stroke=\"#9CA3AF\" />\n                          <Tooltip \n                            contentStyle={{ \n                              backgroundColor: '#1F2937', \n                              border: '1px solid #374151',\n                              borderRadius: '8px'\n                            }} \n                          />\n                          <Line type=\"monotone\" dataKey=\"roas\" stroke=\"#3B82F6\" strokeWidth={3} />\n                          <Line type=\"monotone\" dataKey=\"spend\" stroke=\"#EF4444\" strokeWidth={2} />\n                        </RechartsLineChart>\n                      </ResponsiveContainer>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-slate-800 border-slate-700\">\n                    <CardHeader>\n                      <CardTitle className=\"text-white flex items-center gap-2\">\n                        <PieChart className=\"w-5 h-5 text-purple-400\" />\n                        Cihaz Dağılımı\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={300}>\n                        <RechartsPieChart>\n                          <Tooltip />\n                          <RechartsPieChart data={currentChannelData.deviceBreakdown}>\n                            {currentChannelData.deviceBreakdown.map((entry: any, index: number) => (\n                              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                            ))}\n                          </RechartsPieChart>\n                        </RechartsPieChart>\n                      </ResponsiveContainer>\n                      <div className=\"mt-4 space-y-2\">\n                        {currentChannelData.deviceBreakdown.map((item: any, index: number) => (\n                          <div key={item.device} className=\"flex justify-between text-sm\">\n                            <div className=\"flex items-center gap-2\">\n                              <div \n                                className=\"w-3 h-3 rounded-full\" \n                                style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                              />\n                              <span className=\"text-slate-300\">{item.device}</span>\n                            </div>\n                            <span className=\"text-white font-medium\">%{item.share}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Filters & Search */}\n                <Card className=\"bg-slate-800 border-slate-700\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white flex items-center gap-2\">\n                      <Filter className=\"w-5 h-5 text-blue-400\" />\n                      Kampanya Filtreleri\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex flex-wrap gap-4\">\n                      <div className=\"flex-1 min-w-64\">\n                        <Input\n                          placeholder=\"Kampanya adı ara...\"\n                          value={searchTerm}\n                          onChange={(e) => setSearchTerm(e.target.value)}\n                          className=\"bg-slate-700 border-slate-600 text-white\"\n                          icon={<Search className=\"w-4 h-4\" />}\n                        />\n                      </div>\n                      \n                      <Select value={statusFilter} onValueChange={setStatusFilter}>\n                        <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-300 w-48\">\n                          <SelectValue placeholder=\"Durum filtrele\" />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-slate-800 border-slate-600\">\n                          <SelectItem value=\"all\">Tüm Durumlar</SelectItem>\n                          <SelectItem value=\"Aktif\">Aktif</SelectItem>\n                          <SelectItem value=\"Duraklatıldı\">Duraklatıldı</SelectItem>\n                          <SelectItem value=\"Test Aşaması\">Test Aşaması</SelectItem>\n                          <SelectItem value=\"Optimize Ediliyor\">Optimize Ediliyor</SelectItem>\n                        </SelectContent>\n                      </Select>\n\n                      <Select value={sortBy} onValueChange={setSortBy}>\n                        <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-300 w-40\">\n                          <ArrowUpDown className=\"w-4 h-4 mr-2\" />\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-slate-800 border-slate-600\">\n                          <SelectItem value=\"roas\">ROAS'a göre</SelectItem>\n                          <SelectItem value=\"spend\">Harcamaya göre</SelectItem>\n                          <SelectItem value=\"revenue\">Gelire göre</SelectItem>\n                        </SelectContent>\n                      </Select>\n\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setSortOrder(sortOrder === \"desc\" ? \"asc\" : \"desc\")}\n                        className=\"border-slate-600 text-slate-300 hover:bg-slate-700\"\n                      >\n                        {sortOrder === \"desc\" ? <ChevronDown className=\"w-4 h-4\" /> : <ChevronUp className=\"w-4 h-4\" />}\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Campaign Performance Table */}\n                <Card className=\"bg-slate-800 border-slate-700\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white flex items-center gap-2\">\n                      <BarChart3 className=\"w-5 h-5 text-green-400\" />\n                      Kampanya Performansları ({filteredAndSortedCampaigns.length})\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead>\n                          <tr className=\"border-b border-slate-700\">\n                            <th className=\"text-left py-3 px-4 text-slate-300 font-medium\">Kampanya</th>\n                            <th className=\"text-left py-3 px-4 text-slate-300 font-medium\">Durum</th>\n                            <th className=\"text-left py-3 px-4 text-slate-300 font-medium\">Harcama</th>\n                            <th className=\"text-left py-3 px-4 text-slate-300 font-medium\">Gelir</th>\n                            <th className=\"text-left py-3 px-4 text-slate-300 font-medium\">ROAS</th>\n                            <th className=\"text-left py-3 px-4 text-slate-300 font-medium\">CTR</th>\n                            <th className=\"text-left py-3 px-4 text-slate-300 font-medium\">CPC</th>\n                            <th className=\"text-left py-3 px-4 text-slate-300 font-medium\">Trend</th>\n                            <th className=\"text-left py-3 px-4 text-slate-300 font-medium\">Aksiyon</th>\n                          </tr>\n                        </thead>\n                        <tbody className=\"divide-y divide-slate-700\">\n                          {filteredAndSortedCampaigns.map((campaign) => (\n                            <tr key={campaign.id} className=\"hover:bg-slate-700/30 transition-colors\">\n                              <td className=\"py-3 px-4\">\n                                <div className=\"font-medium text-white\">{campaign.name}</div>\n                                <div className=\"text-sm text-slate-400\">\n                                  {campaign.impressions} gösterim • {campaign.conversions} dönüşüm\n                                </div>\n                              </td>\n                              <td className=\"py-3 px-4\">\n                                <Badge \n                                  variant={campaign.status === \"Aktif\" ? \"default\" : \"secondary\"}\n                                  className={\n                                    campaign.status === \"Aktif\" ? \"bg-green-600 hover:bg-green-700\" :\n                                    campaign.status === \"Test Aşaması\" ? \"bg-blue-600 hover:bg-blue-700\" :\n                                    campaign.status === \"Optimize Ediliyor\" ? \"bg-yellow-600 hover:bg-yellow-700\" :\n                                    \"bg-gray-600 hover:bg-gray-700\"\n                                  }\n                                >\n                                  {campaign.status}\n                                </Badge>\n                              </td>\n                              <td className=\"py-3 px-4 text-slate-300 font-medium\">{campaign.spend}</td>\n                              <td className=\"py-3 px-4 text-green-400 font-bold\">{campaign.revenue}</td>\n                              <td className=\"py-3 px-4\">\n                                <span className={`font-bold ${parseFloat(campaign.roas) >= 4 ? 'text-green-400' : parseFloat(campaign.roas) >= 2 ? 'text-yellow-400' : 'text-red-400'}`}>\n                                  {campaign.roas}x\n                                </span>\n                              </td>\n                              <td className=\"py-3 px-4 text-slate-300\">{campaign.ctr}</td>\n                              <td className=\"py-3 px-4 text-slate-300\">{campaign.cpc}</td>\n                              <td className=\"py-3 px-4\">\n                                {getTrendIcon(campaign.trend)}\n                              </td>\n                              <td className=\"py-3 px-4\">\n                                <div className=\"flex gap-2\">\n                                  <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-slate-700\">\n                                    <Settings className=\"w-3 h-3\" />\n                                  </Button>\n                                  <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-slate-700\">\n                                    {campaign.status === \"Aktif\" ? <Pause className=\"w-3 h-3\" /> : <Play className=\"w-3 h-3\" />}\n                                  </Button>\n                                </div>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* AI Insights */}\n                <Card className=\"bg-slate-800 border-slate-700\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white flex items-center gap-2\">\n                      <Lightbulb className=\"w-5 h-5 text-yellow-400\" />\n                      AI Performans İçgörüleri\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {currentChannelData.insights.map((insight, index) => (\n                        <div key={index} className={`p-4 rounded-lg border-l-4 ${\n                          insight.type === 'success' ? 'bg-green-900/20 border-green-400' :\n                          insight.type === 'warning' ? 'bg-yellow-900/20 border-yellow-400' :\n                          'bg-blue-900/20 border-blue-400'\n                        }`}>\n                          <div className=\"flex items-start gap-3\">\n                            {getInsightIcon(insight.type)}\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-semibold text-white mb-1\">{insight.title}</h4>\n                              <p className=\"text-slate-300 text-sm\">{insight.description}</p>\n                              <Badge \n                                variant=\"outline\" \n                                className={`mt-2 ${\n                                  insight.priority === 'high' ? 'border-red-400 text-red-400' :\n                                  insight.priority === 'medium' ? 'border-yellow-400 text-yellow-400' :\n                                  'border-blue-400 text-blue-400'\n                                }`}\n                              >\n                                {insight.priority === 'high' ? 'Yüksek Öncelik' :\n                                 insight.priority === 'medium' ? 'Orta Öncelik' : 'Düşük Öncelik'}\n                              </Badge>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n              </TabsContent>\n            </Tabs>\n\n      {/* AI Chat Panel */}\n      <AIChatPanel pageContext=\"channels\" />\n    </div>\n  );\n}\n","size_bytes":31620},"client/src/pages/competitor-analysis.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Target, \n  Users, \n  Search, \n  TrendingUp, \n  Globe, \n  Lightbulb,\n  X,\n  BarChart3,\n  Activity,\n  Zap,\n  Eye,\n  Share2,\n  MessageCircle\n} from \"lucide-react\";\n\ninterface Competitor {\n  id: string;\n  name: string;\n}\n\nexport default function CompetitorAnalysis() {\n  const [competitors, setCompetitors] = useState<Competitor[]>([]);\n  const [newCompetitor, setNewCompetitor] = useState('');\n  const [analysisPrompt, setAnalysisPrompt] = useState('');\n  const [showRadar, setShowRadar] = useState(false);\n  const [activeTab, setActiveTab] = useState('flow');\n\n  const addCompetitor = () => {\n    if (newCompetitor.trim()) {\n      const competitor: Competitor = {\n        id: Date.now().toString(),\n        name: newCompetitor.trim()\n      };\n      setCompetitors([...competitors, competitor]);\n      setNewCompetitor('');\n    }\n  };\n\n  const removeCompetitor = (id: string) => {\n    setCompetitors(competitors.filter(c => c.id !== id));\n  };\n\n  const discoverCompetitors = () => {\n    // Sahte rakipler ekle\n    const mockCompetitors = [\n      'Amazon Turkey', 'Trendyol', 'Hepsiburada', 'N11', 'GittiGidiyor'\n    ];\n    const newCompetitors = mockCompetitors.map(name => ({\n      id: Date.now() + Math.random().toString(),\n      name\n    }));\n    setCompetitors([...competitors, ...newCompetitors.slice(0, 3)]);\n  };\n\n  const startAnalysis = () => {\n    if (competitors.length > 0) {\n      setShowRadar(true);\n    }\n  };\n\n  if (showRadar) {\n    return (\n      <div className=\"space-y-6\">\n              \n              {/* Başlık */}\n              <div className=\"text-center mb-8\">\n                <h1 className=\"text-3xl font-bold text-white mb-2\">Pazar Radarı</h1>\n                <p className=\"text-slate-400\">\n                  Rakiplerinizi ve pazar trendlerini analiz ederek stratejinizi bir adım öteye taşıyın.\n                </p>\n              </div>\n\n              {/* Radar Paneli */}\n              <Card className=\"bg-slate-800 border-slate-700\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"flex items-center gap-2 text-white\">\n                      <Target className=\"w-5 h-5\" />\n                      Rakip Radar Paneli\n                    </CardTitle>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => setShowRadar(false)}\n                      className=\"border-slate-600 text-slate-300 hover:bg-slate-700\"\n                    >\n                      Kuruluma Dön\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <Tabs value={activeTab} onValueChange={setActiveTab}>\n                    <TabsList className=\"bg-slate-700 border-slate-600\">\n                      <TabsTrigger value=\"flow\" className=\"data-[state=active]:bg-blue-600\">\n                        Rakip Akışı\n                      </TabsTrigger>\n                      <TabsTrigger value=\"social\" className=\"data-[state=active]:bg-blue-600\">\n                        Sosyal Medya\n                      </TabsTrigger>\n                      <TabsTrigger value=\"seo\" className=\"data-[state=active]:bg-blue-600\">\n                        SEO & Web\n                      </TabsTrigger>\n                      <TabsTrigger value=\"opportunities\" className=\"data-[state=active]:bg-blue-600\">\n                        Fırsat Motoru\n                      </TabsTrigger>\n                    </TabsList>\n\n                    <TabsContent value=\"flow\" className=\"mt-6\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                        {competitors.map((competitor) => (\n                          <Card key={competitor.id} className=\"bg-slate-700 border-slate-600\">\n                            <CardContent className=\"p-4\">\n                              <div className=\"flex items-center gap-3 mb-3\">\n                                <Activity className=\"w-5 h-5 text-blue-400\" />\n                                <h3 className=\"font-semibold text-white\">{competitor.name}</h3>\n                              </div>\n                              <div className=\"space-y-2 text-sm text-slate-300\">\n                                <div className=\"flex justify-between\">\n                                  <span>Günlük Ziyaret:</span>\n                                  <span className=\"text-green-400\">\n                                    {Math.floor(Math.random() * 50000 + 10000).toLocaleString()}\n                                  </span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                  <span>Trend:</span>\n                                  <span className=\"text-orange-400\">↗ +{Math.floor(Math.random() * 20 + 5)}%</span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                  <span>Pazar Payı:</span>\n                                  <span className=\"text-blue-400\">{Math.floor(Math.random() * 15 + 5)}%</span>\n                                </div>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))}\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"social\" className=\"mt-6\">\n                      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                        {competitors.slice(0, 4).map((competitor) => (\n                          <Card key={competitor.id} className=\"bg-slate-700 border-slate-600\">\n                            <CardContent className=\"p-4\">\n                              <h3 className=\"font-semibold text-white mb-4 flex items-center gap-2\">\n                                <Share2 className=\"w-4 h-4\" />\n                                {competitor.name}\n                              </h3>\n                              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                                <div className=\"space-y-2\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <MessageCircle className=\"w-4 h-4 text-blue-400\" />\n                                    <span className=\"text-slate-300\">Instagram:</span>\n                                  </div>\n                                  <div className=\"text-white\">{Math.floor(Math.random() * 500000 + 50000).toLocaleString()} takipçi</div>\n                                </div>\n                                <div className=\"space-y-2\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <Users className=\"w-4 h-4 text-green-400\" />\n                                    <span className=\"text-slate-300\">Etkileşim:</span>\n                                  </div>\n                                  <div className=\"text-white\">{(Math.random() * 3 + 1).toFixed(1)}%</div>\n                                </div>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))}\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"seo\" className=\"mt-6\">\n                      <div className=\"space-y-4\">\n                        {competitors.map((competitor) => (\n                          <Card key={competitor.id} className=\"bg-slate-700 border-slate-600\">\n                            <CardContent className=\"p-4\">\n                              <div className=\"flex items-center justify-between mb-4\">\n                                <h3 className=\"font-semibold text-white flex items-center gap-2\">\n                                  <Globe className=\"w-4 h-4\" />\n                                  {competitor.name}\n                                </h3>\n                                <Badge variant=\"outline\" className=\"border-green-500 text-green-400\">\n                                  DA: {Math.floor(Math.random() * 30 + 40)}\n                                </Badge>\n                              </div>\n                              <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                                <div>\n                                  <div className=\"text-slate-400\">Organik Anahtar Kelime</div>\n                                  <div className=\"text-white font-semibold\">\n                                    {Math.floor(Math.random() * 50000 + 10000).toLocaleString()}\n                                  </div>\n                                </div>\n                                <div>\n                                  <div className=\"text-slate-400\">Backlink</div>\n                                  <div className=\"text-white font-semibold\">\n                                    {Math.floor(Math.random() * 100000 + 20000).toLocaleString()}\n                                  </div>\n                                </div>\n                                <div>\n                                  <div className=\"text-slate-400\">Sayfa Hızı</div>\n                                  <div className=\"text-white font-semibold\">{Math.floor(Math.random() * 30 + 60)}/100</div>\n                                </div>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))}\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"opportunities\" className=\"mt-6\">\n                      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                        <Card className=\"bg-slate-700 border-slate-600\">\n                          <CardHeader>\n                            <CardTitle className=\"flex items-center gap-2 text-white\">\n                              <Lightbulb className=\"w-5 h-5 text-yellow-400\" />\n                              Fırsat Alanları\n                            </CardTitle>\n                          </CardHeader>\n                          <CardContent>\n                            <div className=\"space-y-3\">\n                              <div className=\"flex items-start gap-3\">\n                                <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\n                                <div>\n                                  <div className=\"text-white font-medium\">Mobil Optimizasyon</div>\n                                  <div className=\"text-slate-400 text-sm\">Rakiplerin %40'ı mobilde zayıf performans gösteriyor</div>\n                                </div>\n                              </div>\n                              <div className=\"flex items-start gap-3\">\n                                <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2\"></div>\n                                <div>\n                                  <div className=\"text-white font-medium\">Video İçerik</div>\n                                  <div className=\"text-slate-400 text-sm\">Video pazarlamasında boşluk tespit edildi</div>\n                                </div>\n                              </div>\n                              <div className=\"flex items-start gap-3\">\n                                <div className=\"w-2 h-2 bg-orange-500 rounded-full mt-2\"></div>\n                                <div>\n                                  <div className=\"text-white font-medium\">Yerel SEO</div>\n                                  <div className=\"text-slate-400 text-sm\">Yerel aramalar için optimizasyon eksikliği</div>\n                                </div>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n\n                        <Card className=\"bg-slate-700 border-slate-600\">\n                          <CardHeader>\n                            <CardTitle className=\"flex items-center gap-2 text-white\">\n                              <Zap className=\"w-5 h-5 text-blue-400\" />\n                              Hızlı Aksiyonlar\n                            </CardTitle>\n                          </CardHeader>\n                          <CardContent>\n                            <div className=\"space-y-3\">\n                              <Button className=\"w-full justify-start bg-green-600 hover:bg-green-700\">\n                                <Eye className=\"w-4 h-4 mr-2\" />\n                                Rakip İçerik Analizini Başlat\n                              </Button>\n                              <Button className=\"w-full justify-start bg-blue-600 hover:bg-blue-700\">\n                                <Search className=\"w-4 h-4 mr-2\" />\n                                Anahtar Kelime Boşluklarını Keşfet\n                              </Button>\n                              <Button className=\"w-full justify-start bg-orange-600 hover:bg-orange-700\">\n                                <BarChart3 className=\"w-4 h-4 mr-2\" />\n                                Fiyat Karşılaştırması Yap\n                              </Button>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      </div>\n                    </TabsContent>\n                  </Tabs>\n                </CardContent>\n              </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n            \n            {/* Başlık */}\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold text-white mb-2\">Pazar Radarı</h1>\n              <p className=\"text-slate-400\">\n                Rakiplerinizi ve pazar trendlerini analiz ederek stratejinizi bir adım öteye taşıyın.\n              </p>\n            </div>\n\n            {/* Kurulum Bölümü */}\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardContent className=\"p-6 space-y-6\">\n                \n                {/* AI ile Rakip Keşfet */}\n                <div>\n                  <h2 className=\"text-xl font-semibold text-white mb-2\">AI ile Rakipleri Keşfet</h2>\n                  <p className=\"text-slate-400 mb-4\">\n                    Sektörünüzü veya ürününüzü anlatın, AI potansiyel rakipleri bulsun.\n                  </p>\n                  <Textarea\n                    placeholder=\"Örn: E-ticaret sektöründe elektronik ürünler satıyoruz, özellikle akıllı telefon ve aksesuar alanında faaliyet gösteriyoruz...\"\n                    value={analysisPrompt}\n                    onChange={(e) => setAnalysisPrompt(e.target.value)}\n                    className=\"bg-slate-900 border-slate-600 text-slate-300 min-h-[100px] mb-4\"\n                  />\n                  <Button \n                    onClick={discoverCompetitors}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                  >\n                    <Target className=\"w-4 h-4 mr-2\" />\n                    Rakipleri Keşfet\n                  </Button>\n                </div>\n\n                <hr className=\"border-slate-600\" />\n\n                {/* Manuel Rakip Ekleme */}\n                <div>\n                  <h2 className=\"text-xl font-semibold text-white mb-2\">Manuel Olarak Rakip Ekle</h2>\n                  <div className=\"flex gap-2 mb-4\">\n                    <Input\n                      placeholder=\"Rakip firma adını girin...\"\n                      value={newCompetitor}\n                      onChange={(e) => setNewCompetitor(e.target.value)}\n                      onKeyPress={(e) => e.key === 'Enter' && addCompetitor()}\n                      className=\"bg-slate-900 border-slate-600 text-slate-300 flex-1\"\n                    />\n                    <Button \n                      onClick={addCompetitor}\n                      variant=\"outline\"\n                      className=\"border-slate-600 text-slate-300 hover:bg-slate-700\"\n                    >\n                      Ekle\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Takip Edilen Rakipler */}\n                <div>\n                  <h3 className=\"text-lg font-medium text-white mb-3\">Takip Edilen Rakipler</h3>\n                  <div className=\"flex flex-wrap gap-2 mb-6 min-h-[50px] p-3 bg-slate-900 border border-slate-600 rounded-md\">\n                    {competitors.length === 0 ? (\n                      <div className=\"text-slate-500 italic\">Henüz rakip eklenmedi...</div>\n                    ) : (\n                      competitors.map((competitor) => (\n                        <Badge \n                          key={competitor.id}\n                          variant=\"outline\" \n                          className=\"border-slate-500 text-slate-300 bg-slate-800 flex items-center gap-2 px-3 py-1\"\n                        >\n                          {competitor.name}\n                          <button\n                            onClick={() => removeCompetitor(competitor.id)}\n                            className=\"hover:bg-slate-600 rounded-full p-0.5\"\n                          >\n                            <X className=\"w-3 h-3\" />\n                          </button>\n                        </Badge>\n                      ))\n                    )}\n                  </div>\n                </div>\n\n                {/* Analizi Başlat */}\n                <div className=\"text-center\">\n                  <Button \n                    onClick={startAnalysis}\n                    disabled={competitors.length === 0}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 text-lg disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <BarChart3 className=\"w-5 h-5 mr-2\" />\n                    Analizi Başlat\n                  </Button>\n                  {competitors.length === 0 && (\n                    <p className=\"text-slate-500 text-sm mt-2\">\n                      Analizi başlatmak için en az bir rakip ekleyin\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n    </div>\n  );\n}\n","size_bytes":18664},"client/src/pages/creative.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Palette, TrendingUp, Eye, MousePointer, Heart, Share, Download, Plus } from \"lucide-react\";\n\nexport default function Creative() {\n  const [platform, setPlatform] = useState('all');\n  const [creativeType, setCreativeType] = useState('all');\n\n  const creatives = [\n    {\n      id: 1,\n      title: 'Bahar Koleksiyonu Video',\n      type: 'video',\n      platform: 'meta',\n      status: 'active',\n      impressions: 125430,\n      clicks: 3890,\n      ctr: 3.1,\n      engagement: 8.2,\n      spend: 4250,\n      conversions: 89,\n      thumbnail: '/api/placeholder/300/200'\n    },\n    {\n      id: 2,\n      title: 'İndirim Kampanyası Banner',\n      type: 'image',\n      platform: 'google',\n      status: 'paused',\n      impressions: 89650,\n      clicks: 2340,\n      ctr: 2.6,\n      engagement: 5.8,\n      spend: 3180,\n      conversions: 67,\n      thumbnail: '/api/placeholder/300/200'\n    },\n    {\n      id: 3,\n      title: 'Ürün Tanıtım Carousel',\n      type: 'carousel',\n      platform: 'tiktok',\n      status: 'active',\n      impressions: 156780,\n      clicks: 4590,\n      ctr: 2.9,\n      engagement: 12.4,\n      spend: 2890,\n      conversions: 124,\n      thumbnail: '/api/placeholder/300/200'\n    }\n  ];\n\n  const creativeInsights = [\n    { metric: 'En İyi CTR', value: '3.1%', creative: 'Bahar Koleksiyonu Video', change: '+0.5%' },\n    { metric: 'En Yüksek Engagement', value: '12.4%', creative: 'Ürün Tanıtım Carousel', change: '+2.1%' },\n    { metric: 'En Düşük CPC', value: '₺1.85', creative: 'İndirim Kampanyası Banner', change: '-₺0.25' },\n    { metric: 'En İyi ROAS', value: '4.8x', creative: 'Bahar Koleksiyonu Video', change: '+0.3x' }\n  ];\n\n  const getPlatformColor = (platform) => {\n    const colors = {\n      meta: 'bg-blue-500/20 text-blue-400',\n      google: 'bg-red-500/20 text-red-400',\n      tiktok: 'bg-black/20 text-white'\n    };\n    return colors[platform] || 'bg-gray-500/20 text-gray-400';\n  };\n\n  const getTypeIcon = (type) => {\n    switch(type) {\n      case 'video': return '🎥';\n      case 'image': return '🖼️';\n      case 'carousel': return '📱';\n      default: return '📄';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n            \n            {/* Header */}\n            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-white mb-2\">Kreatif Yönetimi</h1>\n                <p className=\"text-slate-400\">Reklamlarınızın görsel performansını analiz edin</p>\n              </div>\n              \n              <div className=\"flex items-center gap-4\">\n                <Select value={platform} onValueChange={setPlatform}>\n                  <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-300 w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-slate-800 border-slate-600\">\n                    <SelectItem value=\"all\">Tüm Platformlar</SelectItem>\n                    <SelectItem value=\"meta\">Meta</SelectItem>\n                    <SelectItem value=\"google\">Google</SelectItem>\n                    <SelectItem value=\"tiktok\">TikTok</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <Select value={creativeType} onValueChange={setCreativeType}>\n                  <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-300 w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-slate-800 border-slate-600\">\n                    <SelectItem value=\"all\">Tüm Tipler</SelectItem>\n                    <SelectItem value=\"video\">Video</SelectItem>\n                    <SelectItem value=\"image\">Görsel</SelectItem>\n                    <SelectItem value=\"carousel\">Carousel</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Yeni Kreatif\n                </Button>\n              </div>\n            </div>\n\n            {/* Creative Insights */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {creativeInsights.map((insight, index) => (\n                <Card key={index} className=\"bg-slate-800 border-slate-700\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <Palette className=\"w-8 h-8 text-purple-400\" />\n                      <Badge variant=\"secondary\" className=\"bg-green-500/20 text-green-500\">\n                        {insight.change}\n                      </Badge>\n                    </div>\n                    <h4 className=\"text-slate-400 text-sm mb-2\">{insight.metric}</h4>\n                    <p className=\"text-2xl font-bold text-white mb-1\">{insight.value}</p>\n                    <p className=\"text-slate-500 text-xs\">{insight.creative}</p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Creative Performance */}\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Kreatif Performansı</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {creatives.map((creative) => (\n                    <div key={creative.id} className=\"bg-slate-700/50 rounded-lg overflow-hidden\">\n                      <div className=\"aspect-video bg-slate-600 flex items-center justify-center text-4xl\">\n                        {getTypeIcon(creative.type)}\n                      </div>\n                      \n                      <div className=\"p-4\">\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <h4 className=\"text-white font-medium\">{creative.title}</h4>\n                          <Badge variant=\"secondary\" className={getPlatformColor(creative.platform)}>\n                            {creative.platform.toUpperCase()}\n                          </Badge>\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-3 text-sm mb-4\">\n                          <div>\n                            <span className=\"text-slate-400\">Gösterim:</span>\n                            <span className=\"text-white ml-1\">{creative.impressions.toLocaleString()}</span>\n                          </div>\n                          <div>\n                            <span className=\"text-slate-400\">Tıklama:</span>\n                            <span className=\"text-white ml-1\">{creative.clicks.toLocaleString()}</span>\n                          </div>\n                          <div>\n                            <span className=\"text-slate-400\">CTR:</span>\n                            <span className=\"text-green-400 ml-1\">{creative.ctr}%</span>\n                          </div>\n                          <div>\n                            <span className=\"text-slate-400\">Engagement:</span>\n                            <span className=\"text-blue-400 ml-1\">{creative.engagement}%</span>\n                          </div>\n                          <div>\n                            <span className=\"text-slate-400\">Harcama:</span>\n                            <span className=\"text-white ml-1\">₺{creative.spend.toLocaleString()}</span>\n                          </div>\n                          <div>\n                            <span className=\"text-slate-400\">Dönüşüm:</span>\n                            <span className=\"text-white ml-1\">{creative.conversions}</span>\n                          </div>\n                        </div>\n\n                        <div className=\"flex justify-between items-center\">\n                          <Badge variant=\"secondary\" className={`${\n                            creative.status === 'active' ? 'bg-green-500/20 text-green-400' : 'bg-gray-500/20 text-gray-400'\n                          }`}>\n                            {creative.status === 'active' ? 'Aktif' : 'Duraklatıldı'}\n                          </Badge>\n                          \n                          <div className=\"flex gap-2\">\n                            <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300\">\n                              <Eye className=\"w-4 h-4\" />\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300\">\n                              <Download className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n    </div>\n  );\n}\n","size_bytes":9362},"client/src/pages/customers.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  User, Search, Plus, Target, Brain, Zap, \n  Users, Calendar, MapPin, Heart, Eye, \n  TrendingUp, Smartphone, Monitor, Globe,\n  RefreshCw, AlertCircle, CheckCircle,\n  PieChart, BarChart3, LineChart,\n  DollarSign, ShoppingCart, Clock,\n  Filter, Download, Settings\n} from \"lucide-react\";\n\nexport default function CustomersPage() {\n  const [activeTab, setActiveTab] = useState('dashboard');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedSegment, setSelectedSegment] = useState(null);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n\n  // Dashboard Metrics\n  const dashboardMetrics = {\n    totalCustomers: 12450,\n    avgLTV: 5250,\n    avgCAC: 185,\n    customerGrowth: 12.5\n  };\n\n  // Saved Segments\n  const savedSegments = [\n    {\n      id: 1,\n      name: 'Yüksek LTV\\'li Müşteriler (VIP)',\n      customerCount: 420,\n      avgLTV: 12500,\n      rules: 'LTV > 10000 TL VE Son alışveriş < 30 gün',\n      lastUpdate: '2 saat önce',\n      status: 'active'\n    },\n    {\n      id: 2,\n      name: 'Riskli Müşteriler',\n      customerCount: 180,\n      avgLTV: 3200,\n      rules: 'Son alışveriş > 90 gün VE LTV > 2000 TL',\n      lastUpdate: '1 saat önce',\n      status: 'active'\n    },\n    {\n      id: 3,\n      name: 'Sadık Müşteriler',\n      customerCount: 890,\n      avgLTV: 8750,\n      rules: 'Sipariş sayısı >= 5 VE Tekrar satın alma oranı > 60%',\n      lastUpdate: '30 dakika önce',\n      status: 'active'\n    }\n  ];\n\n  // Personas\n  const personas = [\n    {\n      id: 1,\n      name: 'Girişimci Gökhan',\n      description: '28-35 yaş arası teknoloji girişimcisi',\n      targetSize: '~15,000',\n      matchedCustomers: 342,\n      accuracy: 85,\n      demographics: {\n        age: '28-35',\n        gender: 'Erkek',\n        location: 'İstanbul, Ankara',\n        income: '₺15,000+'\n      },\n      interests: ['Teknoloji', 'Girişimcilik', 'SaaS'],\n      channels: ['LinkedIn Ads', 'Google Search']\n    },\n    {\n      id: 2,\n      name: 'Üniversiteli Zeynep',\n      description: '19-24 yaş arası üniversite öğrencisi',\n      targetSize: '~45,000',\n      matchedCustomers: 856,\n      accuracy: 92,\n      demographics: {\n        age: '19-24',\n        gender: 'Kadın',\n        location: 'İstanbul, İzmir, Ankara',\n        income: '₺3,000-8,000'\n      },\n      interests: ['Moda', 'Sosyal Medya', 'Müzik'],\n      channels: ['Instagram Ads', 'TikTok Ads']\n    }\n  ];\n\n  // Action Recommendations\n  const actionRecommendations = [\n    {\n      id: 1,\n      type: 'campaign',\n      title: 'VIP Müşteriler İçin Özel Kampanya',\n      description: 'Yüksek LTV\\'li müşterilerinize özel indirim kampanyası düzenleyin',\n      segment: 'Yüksek LTV\\'li Müşteriler (VIP)',\n      estimatedImpact: '+₺25,000 gelir',\n      effort: 'Orta',\n      priority: 'Yüksek',\n      icon: <Target className=\"w-5 h-5\" />,\n      color: 'text-green-400',\n      bgColor: 'bg-green-500/10 border-green-500/20'\n    },\n    {\n      id: 2,\n      type: 'retention',\n      title: 'Riskli Müşteri Geri Kazanım',\n      description: 'Son 90 günde alışveriş yapmayan müşterilere e-posta serisi gönder',\n      segment: 'Riskli Müşteriler',\n      estimatedImpact: '+180 müşteri geri kazanım',\n      effort: 'Düşük',\n      priority: 'Yüksek',\n      icon: <RefreshCw className=\"w-5 h-5\" />,\n      color: 'text-orange-400',\n      bgColor: 'bg-orange-500/10 border-orange-500/20'\n    },\n    {\n      id: 3,\n      type: 'lookalike',\n      title: 'Girişimci Gökhan Lookalike Kitle',\n      description: 'En başarılı persona\\'nıza benzer yeni kitleler oluşturun',\n      segment: 'Girişimci Gökhan Personası',\n      estimatedImpact: '+15,000 kişilik yeni kitle',\n      effort: 'Düşük',\n      priority: 'Orta',\n      icon: <Users className=\"w-5 h-5\" />,\n      color: 'text-blue-400',\n      bgColor: 'bg-blue-500/10 border-blue-500/20'\n    },\n    {\n      id: 4,\n      type: 'crosssell',\n      title: 'Sadık Müşteri Cross-Sell',\n      description: 'Sadık müşterilerinize komplementer ürün önerileri sunun',\n      segment: 'Sadık Müşteriler',\n      estimatedImpact: '+₺18,500 cross-sell geliri',\n      effort: 'Orta',\n      priority: 'Orta',\n      icon: <ShoppingCart className=\"w-5 h-5\" />,\n      color: 'text-purple-400',\n      bgColor: 'bg-purple-500/10 border-purple-500/20'\n    },\n    {\n      id: 5,\n      type: 'automation',\n      title: 'Otomatik Segment Güncelleme',\n      description: 'Müşteri davranışlarına göre segmentleri otomatik güncelleyin',\n      segment: 'Tüm Segmentler',\n      estimatedImpact: '+%25 segmentasyon doğruluğu',\n      effort: 'Yüksek',\n      priority: 'Düşük',\n      icon: <Zap className=\"w-5 h-5\" />,\n      color: 'text-yellow-400',\n      bgColor: 'bg-yellow-500/10 border-yellow-500/20'\n    },\n    {\n      id: 6,\n      type: 'insights',\n      title: 'Müşteri Davranış Analizi',\n      description: 'AI ile müşteri davranış kalıplarını analiz edin',\n      segment: 'Tüm Müşteriler',\n      estimatedImpact: 'Yeni içgörüler keşfet',\n      effort: 'Düşük',\n      priority: 'Orta',\n      icon: <Brain className=\"w-5 h-5\" />,\n      color: 'text-cyan-400',\n      bgColor: 'bg-cyan-500/10 border-cyan-500/20'\n    }\n  ];\n\n  const CreateSegmentModal = () => (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n      <div className=\"bg-slate-800 rounded-lg p-6 max-w-2xl w-full mx-4 max-h-[80vh] overflow-y-auto\">\n        <h3 className=\"text-xl font-bold text-white mb-6\">Akıllı Segment Oluşturucu</h3>\n        \n        <div className=\"space-y-6\">\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">Segment Adı</label>\n            <Input \n              placeholder=\"Örn: Yüksek Değerli Müşteriler\"\n              className=\"bg-slate-700 border-slate-600 text-white\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-3\">Koşullar</label>\n            <div className=\"bg-slate-700 rounded-lg p-4 space-y-4\">\n              <div className=\"text-center text-slate-300 font-medium\">\n                Tüm Müşteriler Arasından ŞU Koşulları Sağlayanları Getir:\n              </div>\n              \n              <div className=\"grid grid-cols-3 gap-3 items-center\">\n                <Select>\n                  <SelectTrigger className=\"bg-slate-600 border-slate-500\">\n                    <SelectValue placeholder=\"LTV\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"ltv\">LTV</SelectItem>\n                    <SelectItem value=\"last-order\">Son Alışveriş Tarihi</SelectItem>\n                    <SelectItem value=\"order-count\">Sipariş Sayısı</SelectItem>\n                    <SelectItem value=\"channel\">Geldiği Kanal</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Select>\n                  <SelectTrigger className=\"bg-slate-600 border-slate-500\">\n                    <SelectValue placeholder=\"büyüktür\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"gt\">büyüktür</SelectItem>\n                    <SelectItem value=\"lt\">küçüktür</SelectItem>\n                    <SelectItem value=\"eq\">eşittir</SelectItem>\n                    <SelectItem value=\"between\">arasında</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Input \n                  placeholder=\"5000\"\n                  className=\"bg-slate-600 border-slate-500 text-white\"\n                />\n              </div>\n\n              <div className=\"text-center\">\n                <Badge variant=\"secondary\" className=\"bg-blue-500/20 text-blue-300\">VE</Badge>\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-3 items-center\">\n                <Select>\n                  <SelectTrigger className=\"bg-slate-600 border-slate-500\">\n                    <SelectValue placeholder=\"Son Alışveriş Tarihi\" />\n                  </SelectTrigger>\n                </Select>\n\n                <Select>\n                  <SelectTrigger className=\"bg-slate-600 border-slate-500\">\n                    <SelectValue placeholder=\"30 günden daha önceydi\" />\n                  </SelectTrigger>\n                </Select>\n\n                <Input \n                  placeholder=\"30\"\n                  className=\"bg-slate-600 border-slate-500 text-white\"\n                />\n              </div>\n\n              <Button variant=\"outline\" className=\"w-full bg-slate-600 border-slate-500 text-slate-300\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Koşul Ekle\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"bg-green-500/10 border border-green-500/20 rounded-lg p-4\">\n            <h4 className=\"text-green-400 font-medium mb-2\">SONUÇLAR (Anlık Güncellenir):</h4>\n            <div className=\"space-y-2 text-slate-300\">\n              <div>Bu koşullara uyan <span className=\"text-white font-bold\">42 Müşteri</span> bulundu.</div>\n              <div>Bu segmentin Ortalama LTV'si: <span className=\"text-green-400 font-bold\">₺7,250</span></div>\n            </div>\n          </div>\n\n          <div className=\"flex gap-3\">\n            <Button className=\"flex-1 bg-blue-600 hover:bg-blue-700\">\n              Segmenti Kaydet\n            </Button>\n            <Button variant=\"outline\" className=\"flex-1 bg-slate-700 border-slate-600\">\n              Bu Segmentten Remarketing Kitlesi Oluştur\n            </Button>\n          </div>\n\n          <Button \n            variant=\"ghost\" \n            className=\"w-full text-slate-400\"\n            onClick={() => setShowCreateModal(false)}\n          >\n            İptal\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n            \n            {/* Header */}\n            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-white mb-2\">Akıllı Kitle Merkezi</h1>\n                <p className=\"text-slate-400\">Gösterge paneli, segmentler, personalar ve AI keşifleri</p>\n              </div>\n              \n              <Button \n                onClick={() => setShowCreateModal(true)}\n                className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Yeni Segment Oluştur\n              </Button>\n            </div>\n\n            {/* Main Tabs */}\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n              <TabsList className=\"bg-slate-800 border border-slate-700\">\n                <TabsTrigger value=\"dashboard\" className=\"data-[state=active]:bg-slate-700\">\n                  <BarChart3 className=\"w-4 h-4 mr-2\" />\n                  Gösterge Paneli\n                </TabsTrigger>\n                <TabsTrigger value=\"segments\" className=\"data-[state=active]:bg-slate-700\">\n                  <Users className=\"w-4 h-4 mr-2\" />\n                  Segmentler\n                </TabsTrigger>\n                <TabsTrigger value=\"personas\" className=\"data-[state=active]:bg-slate-700\">\n                  <User className=\"w-4 h-4 mr-2\" />\n                  Personalar\n                </TabsTrigger>\n                <TabsTrigger value=\"actions\" className=\"data-[state=active]:bg-slate-700\">\n                  <Zap className=\"w-4 h-4 mr-2\" />\n                  Aksiyon Önerileri\n                </TabsTrigger>\n                <TabsTrigger value=\"discover\" className=\"data-[state=active]:bg-slate-700\">\n                  <Brain className=\"w-4 h-4 mr-2\" />\n                  Keşfet\n                </TabsTrigger>\n              </TabsList>\n\n              {/* Dashboard Tab */}\n              <TabsContent value=\"dashboard\" className=\"space-y-6\">\n                {/* Metric Cards */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  <Card className=\"bg-slate-800 border-slate-700\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-slate-400 text-sm\">Toplam Müşteri Sayısı</p>\n                          <p className=\"text-2xl font-bold text-white\">{dashboardMetrics.totalCustomers.toLocaleString()}</p>\n                        </div>\n                        <Users className=\"w-8 h-8 text-blue-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-slate-800 border-slate-700\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-slate-400 text-sm\">Ortalama Müşteri LTV</p>\n                          <p className=\"text-2xl font-bold text-white\">₺{dashboardMetrics.avgLTV.toLocaleString()}</p>\n                        </div>\n                        <DollarSign className=\"w-8 h-8 text-green-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-slate-800 border-slate-700\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-slate-400 text-sm\">Müşteri Edinme Maliyeti</p>\n                          <p className=\"text-2xl font-bold text-white\">₺{dashboardMetrics.avgCAC}</p>\n                        </div>\n                        <TrendingUp className=\"w-8 h-8 text-orange-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-slate-800 border-slate-700\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-slate-400 text-sm\">Müşteri Artışı</p>\n                          <p className=\"text-2xl font-bold text-green-400\">+{dashboardMetrics.customerGrowth}%</p>\n                        </div>\n                        <LineChart className=\"w-8 h-8 text-purple-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Charts */}\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <Card className=\"bg-slate-800 border-slate-700\">\n                    <CardHeader>\n                      <CardTitle className=\"text-white\">LTV'ye Göre Müşteri Dağılımı</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"h-64 flex items-center justify-center\">\n                        <PieChart className=\"w-32 h-32 text-slate-600\" />\n                        <div className=\"text-center text-slate-400 ml-4\">\n                          <p>Pasta Grafiği</p>\n                          <p className=\"text-sm\">Veri yüklenecek</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-slate-800 border-slate-700\">\n                    <CardHeader>\n                      <CardTitle className=\"text-white\">Müşterilerin Geldiği Kanallar</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"h-64 flex items-center justify-center\">\n                        <BarChart3 className=\"w-32 h-32 text-slate-600\" />\n                        <div className=\"text-center text-slate-400 ml-4\">\n                          <p>Çubuk Grafik</p>\n                          <p className=\"text-sm\">Veri yüklenecek</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              {/* Segments Tab */}\n              <TabsContent value=\"segments\" className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"relative flex-1 max-w-md\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n                    <Input\n                      placeholder=\"Segment ara...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"bg-slate-800 border-slate-600 text-slate-300 pl-10\"\n                    />\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button variant=\"outline\" className=\"bg-slate-800 border-slate-600\">\n                      <Filter className=\"w-4 h-4 mr-2\" />\n                      Filtrele\n                    </Button>\n                    <Button variant=\"outline\" className=\"bg-slate-800 border-slate-600\">\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Dışa Aktar\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n                  {savedSegments.map((segment) => (\n                    <Card key={segment.id} className=\"bg-slate-800 border-slate-700 hover:bg-slate-700/50 cursor-pointer\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex justify-between items-start mb-4\">\n                          <h4 className=\"text-white font-medium text-lg\">{segment.name}</h4>\n                          <Badge variant=\"secondary\" className=\"bg-green-500/20 text-green-400\">\n                            Aktif\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"space-y-3 mb-4\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-slate-400\">Müşteri Sayısı:</span>\n                            <span className=\"text-white font-medium\">{segment.customerCount}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-slate-400\">Ortalama LTV:</span>\n                            <span className=\"text-green-400 font-medium\">₺{segment.avgLTV.toLocaleString()}</span>\n                          </div>\n                          <div className=\"text-sm text-slate-400\">\n                            <span className=\"font-medium\">Kurallar:</span> {segment.rules}\n                          </div>\n                          <div className=\"text-xs text-slate-500\">\n                            Son güncelleme: {segment.lastUpdate}\n                          </div>\n                        </div>\n\n                        <div className=\"flex gap-2\">\n                          <Button size=\"sm\" variant=\"outline\" className=\"flex-1 bg-slate-700 border-slate-600\">\n                            Detaylar\n                          </Button>\n                          <Button size=\"sm\" className=\"flex-1 bg-blue-600 hover:bg-blue-700\">\n                            Kampanyada Kullan\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </TabsContent>\n\n              {/* Personas Tab */}\n              <TabsContent value=\"personas\" className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {personas.map((persona) => (\n                    <Card key={persona.id} className=\"bg-slate-800 border-slate-700\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex justify-between items-start mb-4\">\n                          <div>\n                            <h4 className=\"text-white font-medium text-lg\">{persona.name}</h4>\n                            <p className=\"text-slate-400 text-sm\">{persona.description}</p>\n                          </div>\n                          <Badge variant=\"secondary\" className=\"bg-blue-500/20 text-blue-300\">\n                            {persona.accuracy}% İsabet\n                          </Badge>\n                        </div>\n\n                        <div className=\"space-y-3 mb-4\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-slate-400\">Hedef Büyüklük:</span>\n                            <span className=\"text-white\">{persona.targetSize}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-slate-400\">Eşleşen Müşteri:</span>\n                            <span className=\"text-green-400 font-medium\">{persona.matchedCustomers}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-slate-400\">Yaş:</span>\n                            <span className=\"text-white\">{persona.demographics.age}</span>\n                          </div>\n                        </div>\n\n                        <div className=\"mb-4\">\n                          <h5 className=\"text-slate-300 font-medium mb-2\">İlgi Alanları</h5>\n                          <div className=\"flex flex-wrap gap-1\">\n                            {persona.interests.map((interest, i) => (\n                              <Badge key={i} variant=\"secondary\" className=\"bg-purple-500/20 text-purple-300 text-xs\">\n                                {interest}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n\n                        <div className=\"flex gap-2\">\n                          <Button size=\"sm\" variant=\"outline\" className=\"flex-1 bg-slate-700 border-slate-600\">\n                            Düzenle\n                          </Button>\n                          <Button size=\"sm\" className=\"flex-1 bg-blue-600 hover:bg-blue-700\">\n                            Segment İle Eşleştir\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </TabsContent>\n\n              {/* Action Recommendations Tab */}\n              <TabsContent value=\"actions\" className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"text-xl font-bold text-white mb-2\">Aksiyon Önerileri</h3>\n                    <p className=\"text-slate-400\">Segmentleriniz ve personalarınız temelinde önerilen pazarlama aksiyonları</p>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button variant=\"outline\" className=\"bg-slate-800 border-slate-600\">\n                      <Filter className=\"w-4 h-4 mr-2\" />\n                      Filtrele\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Priority Actions */}\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-lg font-semibold text-white flex items-center\">\n                    <AlertCircle className=\"w-5 h-5 mr-2 text-red-400\" />\n                    Yüksek Öncelikli Aksiyonlar\n                  </h4>\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                    {actionRecommendations\n                      .filter(action => action.priority === 'Yüksek')\n                      .map((action) => (\n                        <Card key={action.id} className={`${action.bgColor} border ${action.bgColor.replace('bg-', 'border-').replace('/10', '/20')} hover:bg-opacity-20 cursor-pointer`}>\n                          <CardContent className=\"p-6\">\n                            <div className=\"flex items-start justify-between mb-4\">\n                              <div className=\"flex items-center\">\n                                <div className={`p-2 rounded-lg bg-slate-800/50 mr-3`}>\n                                  <div className={action.color}>\n                                    {action.icon}\n                                  </div>\n                                </div>\n                                <div>\n                                  <h5 className=\"text-white font-semibold\">{action.title}</h5>\n                                  <p className=\"text-slate-400 text-sm\">{action.description}</p>\n                                </div>\n                              </div>\n                              <Badge variant=\"secondary\" className=\"bg-red-500/20 text-red-300 text-xs\">\n                                {action.priority}\n                              </Badge>\n                            </div>\n                            \n                            <div className=\"space-y-2 mb-4\">\n                              <div className=\"flex justify-between text-sm\">\n                                <span className=\"text-slate-400\">Hedef Segment:</span>\n                                <span className=\"text-white font-medium\">{action.segment}</span>\n                              </div>\n                              <div className=\"flex justify-between text-sm\">\n                                <span className=\"text-slate-400\">Tahmini Etki:</span>\n                                <span className={action.color}>{action.estimatedImpact}</span>\n                              </div>\n                              <div className=\"flex justify-between text-sm\">\n                                <span className=\"text-slate-400\">Çaba Seviyesi:</span>\n                                <span className=\"text-white\">{action.effort}</span>\n                              </div>\n                            </div>\n\n                            <div className=\"flex gap-2\">\n                              <Button size=\"sm\" className=\"flex-1 bg-blue-600 hover:bg-blue-700\">\n                                Aksiyonu Başlat\n                              </Button>\n                              <Button size=\"sm\" variant=\"outline\" className=\"bg-slate-700 border-slate-600\">\n                                Detaylar\n                              </Button>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))\n                    }\n                  </div>\n                </div>\n\n                {/* Other Actions */}\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-lg font-semibold text-white flex items-center\">\n                    <CheckCircle className=\"w-5 h-5 mr-2 text-green-400\" />\n                    Diğer Öneriler\n                  </h4>\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4\">\n                    {actionRecommendations\n                      .filter(action => action.priority !== 'Yüksek')\n                      .map((action) => (\n                        <Card key={action.id} className=\"bg-slate-800 border-slate-700 hover:bg-slate-700/50 cursor-pointer\">\n                          <CardContent className=\"p-5\">\n                            <div className=\"flex items-start justify-between mb-3\">\n                              <div className=\"flex items-center\">\n                                <div className={`p-2 rounded-lg bg-slate-700 mr-3`}>\n                                  <div className={action.color}>\n                                    {action.icon}\n                                  </div>\n                                </div>\n                                <div className=\"flex-1\">\n                                  <h5 className=\"text-white font-medium text-sm\">{action.title}</h5>\n                                </div>\n                              </div>\n                              <Badge \n                                variant=\"secondary\" \n                                className={`text-xs ${\n                                  action.priority === 'Orta' \n                                    ? 'bg-yellow-500/20 text-yellow-300' \n                                    : 'bg-slate-500/20 text-slate-300'\n                                }`}\n                              >\n                                {action.priority}\n                              </Badge>\n                            </div>\n                            \n                            <p className=\"text-slate-400 text-xs mb-3\">{action.description}</p>\n                            \n                            <div className=\"space-y-2 mb-3\">\n                              <div className=\"flex justify-between text-xs\">\n                                <span className=\"text-slate-400\">Etki:</span>\n                                <span className={action.color}>{action.estimatedImpact}</span>\n                              </div>\n                              <div className=\"flex justify-between text-xs\">\n                                <span className=\"text-slate-400\">Çaba:</span>\n                                <span className=\"text-white\">{action.effort}</span>\n                              </div>\n                            </div>\n\n                            <Button size=\"sm\" className=\"w-full bg-slate-700 hover:bg-slate-600 text-xs\">\n                              Başlat\n                            </Button>\n                          </CardContent>\n                        </Card>\n                      ))\n                    }\n                  </div>\n                </div>\n\n                {/* Quick Stats */}\n                <Card className=\"bg-slate-800 border-slate-700\">\n                  <CardContent className=\"p-6\">\n                    <h4 className=\"text-white font-semibold mb-4\">Aksiyon İstatistikleri</h4>\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-red-400\">2</div>\n                        <div className=\"text-slate-400 text-sm\">Yüksek Öncelik</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-yellow-400\">3</div>\n                        <div className=\"text-slate-400 text-sm\">Orta Öncelik</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-green-400\">₺43,500</div>\n                        <div className=\"text-slate-400 text-sm\">Tahmini Etki</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-blue-400\">6</div>\n                        <div className=\"text-slate-400 text-sm\">Toplam Öneri</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Discover Tab */}\n              <TabsContent value=\"discover\" className=\"space-y-6\">\n                <Card className=\"bg-slate-800 border-slate-700\">\n                  <CardContent className=\"p-8 text-center\">\n                    <Brain className=\"w-16 h-16 text-slate-600 mx-auto mb-4\" />\n                    <h3 className=\"text-xl font-bold text-white mb-2\">Akıllı Kitle Keşfi</h3>\n                    <p className=\"text-slate-400 mb-6\">\n                      Veri kaynaklarınızı bağlayın ve AI'nın sizin için yeni hedef kitle önerileri bulmasını izleyin\n                    </p>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                      <Card className=\"bg-slate-700 border-slate-600\">\n                        <CardContent className=\"p-4 text-center\">\n                          <ShoppingCart className=\"w-8 h-8 text-blue-400 mx-auto mb-2\" />\n                          <h4 className=\"text-white font-medium mb-1\">E-ticaret Verileri</h4>\n                          <p className=\"text-slate-400 text-sm\">Shopify, WooCommerce</p>\n                        </CardContent>\n                      </Card>\n                      \n                      <Card className=\"bg-slate-700 border-slate-600\">\n                        <CardContent className=\"p-4 text-center\">\n                          <Globe className=\"w-8 h-8 text-green-400 mx-auto mb-2\" />\n                          <h4 className=\"text-white font-medium mb-1\">Web Analytics</h4>\n                          <p className=\"text-slate-400 text-sm\">Google Analytics</p>\n                        </CardContent>\n                      </Card>\n                      \n                      <Card className=\"bg-slate-700 border-slate-600\">\n                        <CardContent className=\"p-4 text-center\">\n                          <Eye className=\"w-8 h-8 text-purple-400 mx-auto mb-2\" />\n                          <h4 className=\"text-white font-medium mb-1\">Reklam Platformları</h4>\n                          <p className=\"text-slate-400 text-sm\">Meta, Google, TikTok</p>\n                        </CardContent>\n                      </Card>\n                    </div>\n                    \n                    <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                      <Settings className=\"w-4 h-4 mr-2\" />\n                      Veri Kaynaklarını Yapılandır\n                    </Button>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n\n      {showCreateModal && <CreateSegmentModal />}\n    </div>\n  );\n}\n","size_bytes":34545},"client/src/pages/dashboard.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  TrendingUp,\n  TrendingDown,\n  Users,\n  ShoppingCart,\n  DollarSign,\n  Eye,\n  Calendar,\n  Filter,\n  Target,\n  Send,\n  Bot,\n  Lightbulb,\n  AlertTriangle,\n  BarChart3,\n  PieChart,\n  AlertCircle,\n  Layers,\n  ArrowUpRight,\n  ArrowDownRight,\n  Zap,\n  Activity,\n  Play,\n  CheckCircle\n} from \"lucide-react\";\nimport AIChatPanel from \"@/components/ai-chat-panel\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, AreaChart, Area, ComposedChart, Bar } from 'recharts';\n\ntype DateRangeKey = '7d' | '30d' | '90d' | 'custom';\ntype ChannelKey = 'all' | 'google' | 'meta' | 'tiktok' | 'email' | 'organic';\ntype MetricKey = 'revenue' | 'roas' | 'conversions' | 'traffic' | 'cost';\n\ninterface DashboardData {\n  totalRevenue: number;\n  totalAdSpend: number;\n  avgRoas: number;\n  totalConversions: number;\n  metrics: any[];\n}\n\nexport default function Dashboard() {\n  const { user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [dateRange, setDateRange] = useState<DateRangeKey>('30d');\n  const [compareEnabled, setCompareEnabled] = useState(false);\n  const [compareDateRange, setCompareDateRange] = useState<DateRangeKey>('30d');\n  const [selectedChannel, setSelectedChannel] = useState<ChannelKey>('all');\n  const [selectedMetric, setSelectedMetric] = useState<MetricKey>('revenue');\n  const [timeRange, setTimeRange] = useState('7d');\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !user) {\n      const isTestMode = window.location.search.includes('test=true');\n      if (!isTestMode) {\n        toast({\n          title: \"Giriş Gerekli\", \n          description: \"Lütfen giriş yapın veya test modunu deneyin\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/?test=true\";\n        }, 1000);\n      }\n    }\n  }, [user, authLoading, toast]);\n\n  const { data: dashboardData, isLoading } = useQuery({\n    queryKey: ['/api/dashboard', dateRange, selectedChannel],\n    enabled: !!user,\n  });\n\n  // Channel options\n  const channelOptions = [\n    { value: 'all', label: 'Tüm Kanallar', color: 'bg-blue-500' },\n    { value: 'google', label: 'Google Ads', color: 'bg-green-500' },\n    { value: 'meta', label: 'Meta Ads', color: 'bg-blue-600' },\n    { value: 'tiktok', label: 'TikTok Ads', color: 'bg-pink-500' },\n    { value: 'email', label: 'Email Marketing', color: 'bg-purple-500' },\n    { value: 'organic', label: 'Organik', color: 'bg-emerald-500' }\n  ];\n\n  // Metric options\n  const metricOptions = [\n    { value: 'revenue', label: 'Gelir', icon: DollarSign },\n    { value: 'roas', label: 'ROAS', icon: Target },\n    { value: 'conversions', label: 'Dönüşümler', icon: ShoppingCart },\n    { value: 'traffic', label: 'Trafik', icon: TrendingUp },\n    { value: 'cost', label: 'Maliyet', icon: BarChart3 }\n  ];\n\n  // Mock data for demo - now includes comparison data\n  const kpiData = [\n    {\n      title: \"Toplam Gelir\",\n      value: \"₺847,650\",\n      previousValue: \"₺753,200\",\n      change: \"+12.5%\",\n      changeType: \"positive\" as const,\n      icon: DollarSign,\n      color: \"text-emerald-500\",\n      bgColor: \"bg-emerald-500/10\"\n    },\n    {\n      title: \"ROAS\",\n      value: \"4.2x\",\n      previousValue: \"3.9x\",\n      change: \"+8.1%\",\n      changeType: \"positive\" as const,\n      icon: Target,\n      color: \"text-blue-500\",\n      bgColor: \"bg-blue-500/10\"\n    },\n    {\n      title: \"Dönüşüm Oranı\",\n      value: \"3.84%\",\n      previousValue: \"3.32%\",\n      change: \"+15.2%\",\n      changeType: \"positive\" as const,\n      icon: TrendingUp,\n      color: \"text-purple-500\",\n      bgColor: \"bg-purple-500/10\"\n    },\n    {\n      title: \"Aktif Müşteriler\",\n      value: \"12,847\",\n      previousValue: \"11,983\",\n      change: \"+7.3%\",\n      changeType: \"positive\" as const,\n      icon: Users,\n      color: \"text-orange-500\",\n      bgColor: \"bg-orange-500/10\"\n    }\n  ];\n\n  const chartData = [\n    { date: '1 Ara', revenue: 65000, conversions: 245, previousRevenue: 58000, previousConversions: 220 },\n    { date: '5 Ara', revenue: 72000, conversions: 267, previousRevenue: 64000, previousConversions: 240 },\n    { date: '10 Ara', revenue: 68000, conversions: 251, previousRevenue: 61000, previousConversions: 225 },\n    { date: '15 Ara', revenue: 84000, conversions: 312, previousRevenue: 75000, previousConversions: 280 },\n    { date: '20 Ara', revenue: 91000, conversions: 338, previousRevenue: 82000, previousConversions: 305 },\n    { date: '25 Ara', revenue: 87000, conversions: 325, previousRevenue: 78000, previousConversions: 290 },\n    { date: '30 Ara', revenue: 95000, conversions: 356, previousRevenue: 85000, previousConversions: 315 }\n  ];\n\n  const insights = [\n    {\n      type: \"opportunity\",\n      title: \"TikTok Kampanya Fırsatı\",\n      description: \"TikTok kampanyanızın ROAS değeri %40 artış gösteriyor. Bütçe artırımı ile potansiyel +₺25,000 ek gelir.\",\n      priority: \"Yüksek\",\n      timeAgo: \"2 saat önce\",\n      impact: \"+₺25,000\",\n      confidence: \"92%\"\n    }\n  ];\n\n  const teamTasks = [\n    {\n      id: 1,\n      title: \"Meta kampanya optimizasyonu\",\n      assignee: \"Ahmet K.\",\n      priority: \"Yüksek\",\n      dueDate: \"Bugün\",\n      status: \"progress\"\n    },\n    {\n      id: 2,\n      title: \"A/B test sonuçları analizi\",\n      assignee: \"Elif S.\",\n      priority: \"Orta\",\n      dueDate: \"Yarın\",\n      status: \"pending\"\n    }\n  ];\n\n  const actionableItems = [\n    {\n      type: \"action\",\n      title: \"Google Ads bütçesini %15 artır\",\n      description: \"Son 7 günde %23 ROAS artışı. Önerilen günlük bütçe: ₺850\",\n      impact: \"Yüksek\",\n      estimatedReturn: \"+₺12,400\",\n      status: \"suggested\"\n    },\n    {\n      type: \"action\", \n      title: \"Lookalike kitle oluştur\",\n      description: \"En yüksek LTV müşterilerinden %1 lookalike kitle\",\n      impact: \"Orta\",\n      estimatedReturn: \"+₺8,200\",\n      status: \"suggested\"\n    }\n  ];\n\n  const anomalies = [\n    {\n      type: \"warning\",\n      title: \"CPC ani artış\",\n      description: \"Google Ads CPC son 3 günde %28 arttı\",\n      severity: \"Orta\",\n      affectedCampaigns: 3,\n      timeDetected: \"1 saat önce\"\n    },\n    {\n      type: \"alert\",\n      title: \"Stok uyarısı\",\n      description: \"En çok satan 5 üründen 2'si kritik stok seviyesinde\",\n      severity: \"Yüksek\", \n      affectedProducts: 2,\n      timeDetected: \"30 dakika önce\"\n    }\n  ];\n\n  const automatedActions = [\n    {\n      title: \"Otomatik bid ayarlaması\",\n      description: \"Düşük performanslı anahtar kelimelerin bidleri %20 azaltıldı\",\n      status: \"completed\",\n      timeExecuted: \"45 dakika önce\",\n      impact: \"₺320 tasarruf\"\n    },\n    {\n      title: \"Audience genişletmesi\",\n      description: \"Yüksek performanslı kitlelerde otomatik genişletme aktifleştirildi\",\n      status: \"completed\", \n      timeExecuted: \"2 saat önce\",\n      impact: \"+15% reach\"\n    }\n  ];\n\n  if (authLoading || isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-white text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* AI Assistant Bar - Improved Design */}\n      <div className=\"w-full\">\n        <AIChatPanel pageContext=\"dashboard\" />\n      </div>\n\n      {/* Enhanced Controls Section */}\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold text-white\">Genel Bakış</h1>\n        <div className=\"flex items-center gap-4\">\n          {/* Channel Selector */}\n          <div className=\"flex items-center gap-2\">\n            <Layers className=\"w-4 h-4 text-slate-400\" />\n            <Select value={selectedChannel} onValueChange={(value: ChannelKey) => setSelectedChannel(value)}>\n              <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-300 w-40\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent className=\"bg-slate-800 border-slate-600\">\n                {channelOptions.map((channel) => (\n                  <SelectItem key={channel.value} value={channel.value}>\n                    <div className=\"flex items-center gap-2\">\n                      <div className={`w-3 h-3 rounded-full ${channel.color}`}></div>\n                      {channel.label}\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Metric Selector */}\n          <div className=\"flex items-center gap-2\">\n            <BarChart3 className=\"w-4 h-4 text-slate-400\" />\n            <Select value={selectedMetric} onValueChange={(value: MetricKey) => setSelectedMetric(value)}>\n              <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-300 w-40\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent className=\"bg-slate-800 border-slate-600\">\n                {metricOptions.map((metric) => {\n                  const Icon = metric.icon;\n                  return (\n                    <SelectItem key={metric.value} value={metric.value}>\n                      <div className=\"flex items-center gap-2\">\n                        <Icon className=\"w-4 h-4\" />\n                        {metric.label}\n                      </div>\n                    </SelectItem>\n                  );\n                })}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Date Range Selector */}\n          <div className=\"flex items-center gap-2\">\n            <Calendar className=\"w-4 h-4 text-slate-400\" />\n            <Select value={dateRange} onValueChange={(value: DateRangeKey) => setDateRange(value)}>\n              <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-300 w-40\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent className=\"bg-slate-800 border-slate-600\">\n                <SelectItem value=\"7d\">Son 7 Gün</SelectItem>\n                <SelectItem value=\"30d\">Son 30 Gün</SelectItem>\n                <SelectItem value=\"90d\">Son 90 Gün</SelectItem>\n                <SelectItem value=\"custom\">Özel Tarih</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Compare Toggle */}\n          <div className=\"flex items-center space-x-2 bg-slate-800 rounded-lg p-2 border border-slate-600\">\n            <Switch \n              id=\"compare-mode\" \n              checked={compareEnabled}\n              onCheckedChange={setCompareEnabled}\n            />\n            <Label htmlFor=\"compare-mode\" className=\"text-sm text-slate-300\">\n              Karşılaştır\n            </Label>\n          </div>\n\n          {/* Compare Date Range (if enabled) */}\n          {compareEnabled && (\n            <Select value={compareDateRange} onValueChange={(value: DateRangeKey) => setCompareDateRange(value)}>\n              <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-300 w-40\">\n                <SelectValue placeholder=\"Karşılaştırma dönemi\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-slate-800 border-slate-600\">\n                <SelectItem value=\"7d\">Önceki 7 Gün</SelectItem>\n                <SelectItem value=\"30d\">Önceki 30 Gün</SelectItem>\n                <SelectItem value=\"90d\">Önceki 90 Gün</SelectItem>\n              </SelectContent>\n            </Select>\n          )}\n        </div>\n      </div>\n\n      {/* Enhanced KPI Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {kpiData.map((kpi, index) => {\n          const Icon = kpi.icon;\n          return (\n            <Card key={index} className=\"bg-slate-800/80 border-slate-700/50 hover:border-slate-600 transition-all cursor-pointer backdrop-blur-sm hover:bg-slate-800/90\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className={`w-12 h-12 rounded-xl flex items-center justify-center ${kpi.bgColor} shadow-lg`}>\n                    <Icon className={`w-6 h-6 ${kpi.color}`} />\n                  </div>\n                  <Badge variant=\"secondary\" className={`${kpi.changeType === 'positive' ? 'bg-emerald-500/20 text-emerald-400 border-emerald-500/30' : 'bg-red-500/20 text-red-400 border-red-500/30'}`}>\n                    {kpi.change}\n                  </Badge>\n                </div>\n                <h4 className=\"text-slate-400 text-sm mb-2\">{kpi.title}</h4>\n                <p className=\"text-2xl font-bold text-white mb-1\">{kpi.value}</p>\n                {compareEnabled && (\n                  <div className=\"flex items-center gap-2 text-xs\">\n                    <span className=\"text-slate-500\">Önceki: {kpi.previousValue}</span>\n                    <div className=\"flex items-center gap-1\">\n                      {kpi.changeType === 'positive' ? (\n                        <ArrowUpRight className=\"w-3 h-3 text-emerald-400\" />\n                      ) : (\n                        <ArrowDownRight className=\"w-3 h-3 text-red-400\" />\n                      )}\n                      <span className={kpi.changeType === 'positive' ? 'text-emerald-400' : 'text-red-400'}>\n                        {kpi.change}\n                      </span>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Enhanced Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"bg-slate-800/80 border-slate-700/50 backdrop-blur-sm\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center gap-2\">\n              <TrendingUp className=\"w-5 h-5\" />\n              Gelir Trendi\n              {compareEnabled && (\n                <Badge variant=\"outline\" className=\"text-xs border-slate-600 text-slate-400\">\n                  Karşılaştırmalı\n                </Badge>\n              )}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <ComposedChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                  <XAxis dataKey=\"date\" stroke=\"#9CA3AF\" />\n                  <YAxis stroke=\"#9CA3AF\" />\n                  <Tooltip \n                    contentStyle={{ \n                      backgroundColor: '#1F2937', \n                      border: '1px solid #374151',\n                      borderRadius: '8px',\n                      color: '#F3F4F6'\n                    }} \n                  />\n                  <Area type=\"monotone\" dataKey=\"revenue\" stroke=\"#3B82F6\" fill=\"#3B82F680\" />\n                  {compareEnabled && (\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"previousRevenue\" \n                      stroke=\"#94A3B8\" \n                      strokeDasharray=\"5 5\"\n                      strokeWidth={2}\n                    />\n                  )}\n                </ComposedChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800/80 border-slate-700/50 backdrop-blur-sm\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center gap-2\">\n              <ShoppingCart className=\"w-5 h-5\" />\n              Dönüşüm Trendi\n              {compareEnabled && (\n                <Badge variant=\"outline\" className=\"text-xs border-slate-600 text-slate-400\">\n                  Karşılaştırmalı\n                </Badge>\n              )}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                  <XAxis dataKey=\"date\" stroke=\"#9CA3AF\" />\n                  <YAxis stroke=\"#9CA3AF\" />\n                  <Tooltip \n                    contentStyle={{ \n                      backgroundColor: '#1F2937', \n                      border: '1px solid #374151',\n                      borderRadius: '8px',\n                      color: '#F3F4F6'\n                    }} \n                  />\n                  <Line type=\"monotone\" dataKey=\"conversions\" stroke=\"#10B981\" strokeWidth={3} />\n                  {compareEnabled && (\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"previousConversions\" \n                      stroke=\"#94A3B8\" \n                      strokeDasharray=\"5 5\"\n                      strokeWidth={2}\n                    />\n                  )}\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Two Column Layout */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n\n        {/* Left Column - Enhanced Daily Insight & Team Tasks */}\n        <div className=\"space-y-6\">\n\n          {/* Enhanced Daily Insight */}\n          <Card className=\"bg-gradient-to-br from-slate-800 via-slate-700 to-slate-800 border-slate-600/50 shadow-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Zap className=\"w-5 h-5 text-yellow-400\" />\n                Günün İçgörüsü\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {insights.map((insight, index) => (\n                <div key={index} className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Badge className=\"bg-emerald-500/20 text-emerald-300 border-emerald-500/30\">Fırsat</Badge>\n                      <span className=\"text-xs text-slate-400\">{insight.timeAgo}</span>\n                    </div>\n                    <Badge variant=\"outline\" className=\"text-xs border-slate-600 text-slate-300\">\n                      {insight.confidence} güven\n                    </Badge>\n                  </div>\n                  <h4 className=\"font-semibold text-white\">{insight.title}</h4>\n                  <p className=\"text-slate-300 text-sm leading-relaxed\">{insight.description}</p>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <DollarSign className=\"w-4 h-4 text-emerald-400\" />\n                      <span className=\"text-emerald-400 font-medium\">{insight.impact}</span>\n                      <span className=\"text-slate-400 text-sm\">potansiyel</span>\n                    </div>\n                    <Button size=\"sm\" className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white\">\n                      Detayları Gör\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n\n          {/* Enhanced Team Tasks */}\n          <Card className=\"bg-slate-800/80 border-slate-700/50 backdrop-blur-sm\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Users className=\"w-5 h-5\" />\n                Ekip Görevleri\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {teamTasks.map((task) => (\n                  <div key={task.id} className=\"p-3 bg-slate-700/30 rounded-lg border border-slate-600/30 hover:bg-slate-700/50 transition-colors\">\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h5 className=\"font-medium text-white text-sm\">{task.title}</h5>\n                      <Badge \n                        variant=\"outline\" \n                        className={`text-xs ${task.priority === 'Yüksek' ? 'border-red-500/50 text-red-400 bg-red-500/10' : 'border-yellow-500/50 text-yellow-400 bg-yellow-500/10'}`}\n                      >\n                        {task.priority}\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <span className=\"text-slate-400\">{task.assignee}</span>\n                      <span className=\"text-slate-400\">{task.dueDate}</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Right Column - Enhanced Action Center */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"bg-slate-800/80 border-slate-700/50 h-[600px] backdrop-blur-sm\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Activity className=\"w-5 h-5\" />\n                Aksiyon Merkezi\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <ScrollArea className=\"h-[520px] px-6\">\n                <div className=\"space-y-6\">\n\n                  {/* Actionable Items */}\n                  <div>\n                    <h4 className=\"font-semibold text-white mb-4 flex items-center gap-2\">\n                      <Target className=\"w-4 h-4\" />\n                      Uygulanabilir Aksiyonlar\n                    </h4>\n                    <div className=\"space-y-3\">\n                      {actionableItems.map((action, index) => (\n                        <div key={index} className=\"p-4 bg-blue-500/10 border border-blue-500/30 rounded-lg hover:bg-blue-500/15 transition-colors\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex-1\">\n                              <h5 className=\"font-medium text-white mb-1\">{action.title}</h5>\n                              <p className=\"text-slate-300 text-sm\">{action.description}</p>\n                            </div>\n                            <Badge className=\"bg-emerald-500/20 text-emerald-400 border-emerald-500/30 ml-3\">\n                              {action.estimatedReturn}\n                            </Badge>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-xs text-slate-400\">Etki: {action.impact}</span>\n                            <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700 text-white\">\n                              <Play className=\"w-3 h-3 mr-1\" />\n                              Uygula\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Anomalies */}\n                  <div>\n                    <h4 className=\"font-semibold text-white mb-4 flex items-center gap-2\">\n                      <AlertTriangle className=\"w-4 h-4\" />\n                      Anomaliler ve Uyarılar\n                    </h4>\n                    <div className=\"space-y-3\">\n                      {anomalies.map((anomaly, index) => (\n                        <div key={index} className={`p-4 rounded-lg border transition-colors ${\n                          anomaly.severity === 'Yüksek' \n                            ? 'bg-red-500/10 border-red-500/30 hover:bg-red-500/15' \n                            : 'bg-yellow-500/10 border-yellow-500/30 hover:bg-yellow-500/15'\n                        }`}>\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex-1\">\n                              <h5 className=\"font-medium text-white mb-1\">{anomaly.title}</h5>\n                              <p className=\"text-slate-300 text-sm\">{anomaly.description}</p>\n                            </div>\n                            <Badge \n                              className={`ml-3 ${\n                                anomaly.severity === 'Yüksek' \n                                  ? 'bg-red-500/20 text-red-400 border-red-500/30' \n                                  : 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30'\n                              }`}\n                            >\n                              {anomaly.severity}\n                            </Badge>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-xs text-slate-400\">{anomaly.timeDetected}</span>\n                            <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-slate-700\">\n                              <Eye className=\"w-3 h-3 mr-1\" />\n                              İncele\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Automated Actions */}\n                  <div>\n                    <h4 className=\"font-semibold text-white mb-4 flex items-center gap-2\">\n                      <CheckCircle className=\"w-4 h-4\" />\n                      Otomatik Uygulamalar\n                    </h4>\n                    <div className=\"space-y-3\">\n                      {automatedActions.map((auto, index) => (\n                        <div key={index} className=\"p-4 bg-emerald-500/10 border border-emerald-500/30 rounded-lg hover:bg-emerald-500/15 transition-colors\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex-1\">\n                              <h5 className=\"font-medium text-white mb-1\">{auto.title}</h5>\n                              <p className=\"text-slate-300 text-sm\">{auto.description}</p>\n                            </div>\n                            <Badge className=\"bg-emerald-500/20 text-emerald-400 border-emerald-500/30 ml-3\">\n                              {auto.impact}\n                            </Badge>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-xs text-slate-400\">{auto.timeExecuted}</span>\n                            <div className=\"flex items-center gap-2\">\n                              <CheckCircle className=\"w-4 h-4 text-emerald-400\" />\n                              <span className=\"text-xs text-emerald-400\">Tamamlandı</span>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":27839},"client/src/pages/kpi-analysis.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport AIChatPanel from \"@/components/ai-chat-panel\";\nimport { \n  BarChart3, TrendingUp, Target, AlertTriangle, DollarSign, \n  ShoppingCart, Users, Calendar, Filter, Eye, Sparkles,\n  Brain, ArrowUpRight, ArrowDownRight, MousePointer, \n  Clock, Heart, Share2, MessageCircle, Mail, Phone,\n  Zap, Activity, Play, Pause, Download, Upload,\n  Smartphone, Monitor, Tablet, Globe, Search, Star\n} from \"lucide-react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell, ComposedChart, Area, AreaChart } from 'recharts';\n\nexport default function KpiAnalysis() {\n  const [selectedKPI, setSelectedKPI] = useState<string>(\"roas\");\n  const [timeRange, setTimeRange] = useState<string>(\"30d\");\n  const [compareRange, setCompareRange] = useState<string>(\"previous_period\");\n  const [isChatOpen, setIsChatOpen] = useState<boolean>(false);\n\n  // KPI verileri\n  const kpiData = {\n    // Temel Gelir Metrikleri\n    revenue: { \n      name: \"Toplam Ciro\", \n      icon: DollarSign, \n      value: \"₺847,650\", \n      previousValue: \"₺753,200\",\n      change: \"+12.5%\", \n      trend: \"up\",\n      color: \"emerald\",\n      category: \"revenue\"\n    },\n    roas: { \n      name: \"ROAS\", \n      icon: Target, \n      value: \"4.2x\", \n      previousValue: \"3.9x\",\n      change: \"+8.1%\", \n      trend: \"up\",\n      color: \"blue\",\n      category: \"revenue\"\n    },\n    roi: { \n      name: \"ROI\", \n      icon: TrendingUp, \n      value: \"320%\", \n      previousValue: \"290%\",\n      change: \"+10.3%\", \n      trend: \"up\",\n      color: \"purple\",\n      category: \"revenue\"\n    },\n\n    // Müşteri Metrikleri\n    cpa: { \n      name: \"CPA\", \n      icon: Users, \n      value: \"₺125\", \n      previousValue: \"₺132\",\n      change: \"-5.3%\", \n      trend: \"down\",\n      color: \"purple\",\n      category: \"customer\"\n    },\n    aov: { \n      name: \"AOV\", \n      icon: ShoppingCart, \n      value: \"₺385\", \n      previousValue: \"₺359\",\n      change: \"+7.2%\", \n      trend: \"up\",\n      color: \"orange\",\n      category: \"customer\"\n    },\n    ltv: { \n      name: \"LTV\", \n      icon: Eye, \n      value: \"₺1,250\", \n      previousValue: \"₺1,138\",\n      change: \"+9.8%\", \n      trend: \"up\",\n      color: \"indigo\",\n      category: \"customer\"\n    },\n    clv_cac: { \n      name: \"LTV/CAC\", \n      icon: Star, \n      value: \"10.0x\", \n      previousValue: \"8.6x\",\n      change: \"+16.3%\", \n      trend: \"up\",\n      color: \"emerald\",\n      category: \"customer\"\n    },\n\n    // Dönüşüm Metrikleri\n    conversion: { \n      name: \"Dönüşüm Oranı\", \n      icon: Target, \n      value: \"3.84%\", \n      previousValue: \"3.33%\",\n      change: \"+15.2%\", \n      trend: \"up\",\n      color: \"green\",\n      category: \"conversion\"\n    },\n    add_to_cart: { \n      name: \"Sepete Ekleme\", \n      icon: ShoppingCart, \n      value: \"8.2%\", \n      previousValue: \"7.5%\",\n      change: \"+9.3%\", \n      trend: \"up\",\n      color: \"blue\",\n      category: \"conversion\"\n    },\n    checkout_rate: { \n      name: \"Ödeme Başlatma\", \n      icon: Play, \n      value: \"46.8%\", \n      previousValue: \"44.2%\",\n      change: \"+5.9%\", \n      trend: \"up\",\n      color: \"purple\",\n      category: \"conversion\"\n    },\n\n    // Trafik Metrikleri\n    impressions: { \n      name: \"Gösterimler\", \n      icon: Eye, \n      value: \"2.4M\", \n      previousValue: \"2.1M\",\n      change: \"+14.3%\", \n      trend: \"up\",\n      color: \"blue\",\n      category: \"traffic\"\n    },\n    clicks: { \n      name: \"Tıklamalar\", \n      icon: MousePointer, \n      value: \"156K\", \n      previousValue: \"142K\",\n      change: \"+9.9%\", \n      trend: \"up\",\n      color: \"green\",\n      category: \"traffic\"\n    },\n    ctr: { \n      name: \"CTR\", \n      icon: Target, \n      value: \"6.5%\", \n      previousValue: \"6.8%\",\n      change: \"-4.4%\", \n      trend: \"down\",\n      color: \"orange\",\n      category: \"traffic\"\n    },\n    cpc: { \n      name: \"CPC\", \n      icon: DollarSign, \n      value: \"₺3.2\", \n      previousValue: \"₺3.5\",\n      change: \"-8.6%\", \n      trend: \"down\",\n      color: \"emerald\",\n      category: \"traffic\"\n    },\n    cpm: { \n      name: \"CPM\", \n      icon: Eye, \n      value: \"₺21.5\", \n      previousValue: \"₺24.2\",\n      change: \"-11.2%\", \n      trend: \"down\",\n      color: \"blue\",\n      category: \"traffic\"\n    },\n\n    // Engagement Metrikleri\n    sessions: { \n      name: \"Oturumlar\", \n      icon: Globe, \n      value: \"89.2K\", \n      previousValue: \"81.4K\",\n      change: \"+9.6%\", \n      trend: \"up\",\n      color: \"purple\",\n      category: \"engagement\"\n    },\n    bounce_rate: { \n      name: \"Çıkış Oranı\", \n      icon: ArrowDownRight, \n      value: \"32.4%\", \n      previousValue: \"38.1%\",\n      change: \"-15.0%\", \n      trend: \"down\",\n      color: \"green\",\n      category: \"engagement\"\n    },\n    session_duration: { \n      name: \"Oturum Süresi\", \n      icon: Clock, \n      value: \"2:34\", \n      previousValue: \"2:18\",\n      change: \"+11.6%\", \n      trend: \"up\",\n      color: \"indigo\",\n      category: \"engagement\"\n    },\n    page_views: { \n      name: \"Sayfa Görüntüleme\", \n      icon: Eye, \n      value: \"234K\", \n      previousValue: \"213K\",\n      change: \"+9.9%\", \n      trend: \"up\",\n      color: \"orange\",\n      category: \"engagement\"\n    },\n\n    // Sosyal Medya Metrikleri\n    likes: { \n      name: \"Beğeniler\", \n      icon: Heart, \n      value: \"12.4K\", \n      previousValue: \"10.8K\",\n      change: \"+14.8%\", \n      trend: \"up\",\n      color: \"red\",\n      category: \"social\"\n    },\n    shares: { \n      name: \"Paylaşımlar\", \n      icon: Share2, \n      value: \"3.2K\", \n      previousValue: \"2.9K\",\n      change: \"+10.3%\", \n      trend: \"up\",\n      color: \"blue\",\n      category: \"social\"\n    },\n    comments: { \n      name: \"Yorumlar\", \n      icon: MessageCircle, \n      value: \"1.8K\", \n      previousValue: \"1.6K\",\n      change: \"+12.5%\", \n      trend: \"up\",\n      color: \"green\",\n      category: \"social\"\n    },\n    engagement_rate: { \n      name: \"Etkileşim Oranı\", \n      icon: Activity, \n      value: \"4.2%\", \n      previousValue: \"3.8%\",\n      change: \"+10.5%\", \n      trend: \"up\",\n      color: \"purple\",\n      category: \"social\"\n    }\n  };\n\n  // Kategori filtreleme\n  const categories = [\n    { id: \"revenue\", name: \"Gelir\", icon: DollarSign },\n    { id: \"customer\", name: \"Müşteri\", icon: Users },\n    { id: \"conversion\", name: \"Dönüşüm\", icon: Target },\n    { id: \"traffic\", name: \"Trafik\", icon: MousePointer },\n    { id: \"engagement\", name: \"Etkileşim\", icon: Activity },\n    { id: \"social\", name: \"Sosyal Medya\", icon: Heart }\n  ];\n\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"revenue\");\n\n  const getKPIsByCategory = (category: string) => {\n    return Object.entries(kpiData).filter(([key, kpi]) => kpi.category === category);\n  };\n\n  // Zaman serisi mock data\n  const timeSeriesData = [\n    { date: '1 Oca', current: 3.8, previous: 3.4 },\n    { date: '5 Oca', current: 4.1, previous: 3.7 },\n    { date: '10 Oca', current: 3.9, previous: 3.5 },\n    { date: '15 Oca', current: 4.3, previous: 3.9 },\n    { date: '20 Oca', current: 4.0, previous: 3.6 },\n    { date: '25 Oca', current: 4.5, previous: 4.1 },\n    { date: '30 Oca', current: 4.2, previous: 3.8 }\n  ];\n\n  // Kanal bazında data\n  const channelDimensions = [\n    {\n      id: \"channel\",\n      name: \"Kanal\",\n      data: [\n        { name: 'Google Ads', current: 4.8, previous: 4.3, spend: 45000, clicks: 28000, impressions: 890000 },\n        { name: 'Meta Ads', current: 4.2, previous: 3.9, spend: 38000, clicks: 24000, impressions: 750000 },\n        { name: 'TikTok Ads', current: 3.1, previous: 2.8, spend: 15000, clicks: 12000, impressions: 420000 },\n        { name: 'Organik', current: 5.2, previous: 4.9, spend: 0, clicks: 8000, impressions: 180000 }\n      ]\n    },\n    {\n      id: \"device\",\n      name: \"Cihaz\",\n      data: [\n        { name: 'Mobil', current: 4.1, previous: 3.8, spend: 52000, clicks: 42000, impressions: 980000 },\n        { name: 'Masaüstü', current: 4.6, previous: 4.2, spend: 38000, clicks: 26000, impressions: 580000 },\n        { name: 'Tablet', current: 3.8, previous: 3.5, spend: 8000, clicks: 4000, impressions: 180000 }\n      ]\n    },\n    {\n      id: \"location\",\n      name: \"Konum\",\n      data: [\n        { name: 'İstanbul', current: 4.5, previous: 4.1, spend: 35000, clicks: 28000, impressions: 650000 },\n        { name: 'Ankara', current: 4.2, previous: 3.9, spend: 22000, clicks: 18000, impressions: 420000 },\n        { name: 'İzmir', current: 4.0, previous: 3.7, spend: 18000, clicks: 14000, impressions: 320000 },\n        { name: 'Diğer', current: 3.9, previous: 3.6, spend: 23000, clicks: 12000, impressions: 350000 }\n      ]\n    },\n    {\n      id: \"age\",\n      name: \"Yaş Grubu\",\n      data: [\n        { name: '18-24', current: 3.8, previous: 3.4, spend: 18000, clicks: 15000, impressions: 380000 },\n        { name: '25-34', current: 4.5, previous: 4.1, spend: 42000, clicks: 32000, impressions: 720000 },\n        { name: '35-44', current: 4.3, previous: 3.9, spend: 28000, clicks: 20000, impressions: 480000 },\n        { name: '45+', current: 4.0, previous: 3.7, spend: 10000, clicks: 5000, impressions: 160000 }\n      ]\n    }\n  ];\n\n  const [selectedDimension, setSelectedDimension] = useState<string>(\"channel\");\n  const selectedKPIData = kpiData[selectedKPI as keyof typeof kpiData];\n  const currentDimensionData = channelDimensions.find(dim => dim.id === selectedDimension);\n\n  // AI Insights\n  const getAIInsight = (dimension: string) => {\n    const insights = {\n      channel: \"Son 30 günde ROAS genel olarak iyi seviyede (4.2x). Google Ads'ınız 4.8x ile en yüksek performansı gösteriyor, önceki dönemden %11.6 artış var. TikTok Ads'da 3.1x ile iyileştirme fırsatı var ancak trend pozitif (+10.7%).\",\n      device: \"Masaüstü kullanıcıları 4.6x ROAS ile en yüksek performansı gösteriyor. Mobil trafik %60'ı oluştururken ROAS 4.1x seviyesinde. Mobil optimizasyonu ile büyük potansiyel var.\",\n      location: \"İstanbul %38 harcama payı ile 4.5x ROAS sağlıyor. Tüm şehirlerde pozitif trend var, özellikle Ankara'da %7.7 artış dikkat çekiyor.\",\n      age: \"25-34 yaş grubu hem en yüksek ROAS'ı (4.5x) hem de en büyük bütçe payını (%43) alıyor. Bu segmente odaklanarak ölçeklendirme yapılabilir.\"\n    };\n    return insights[dimension as keyof typeof insights] || \"Bu boyut için henüz analiz yapılmamış.\";\n  };\n\n  return (\n    <div className=\"flex h-full\">\n      {/* Main Content */}\n      <div className=\"flex-1 overflow-y-auto p-6\">\n        <div className=\"space-y-6\">\n          {/* Header ve Chat Butonu */}\n          <div className=\"bg-slate-800/50 p-4 border border-slate-700 rounded-lg\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-xl font-bold text-white\">KPI Analizi</h1>\n                <p className=\"text-sm text-slate-400\">Performans göstergelerinizi seçin ve derinlemesine analiz edin</p>\n              </div>\n              <Button \n                onClick={() => setIsChatOpen(!isChatOpen)}\n                className=\"bg-purple-600 hover:bg-purple-700 text-white flex-shrink-0\"\n                size=\"sm\"\n              >\n                <Brain className=\"w-4 h-4 mr-2\" />\n                AI Asistan\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"space-y-6\">\n\n              {/* 1. Bölüm: KPI Seçimi - Compact */}\n              <section className=\"space-y-3\">\n                <h2 className=\"text-lg font-semibold text-white flex items-center gap-2\">\n                  📊 Merceğini Seç\n                </h2>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-3\">\n                  {/* Kategori Seçimi */}\n                  <div>\n                    <label className=\"block text-xs font-medium text-slate-400 mb-1\">Kategori</label>\n                    <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                      <SelectTrigger className=\"w-full bg-slate-800 border-slate-700 h-9\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-slate-800 border-slate-700\">\n                        {categories.map((category) => {\n                          const Icon = category.icon;\n                          return (\n                            <SelectItem key={category.id} value={category.id}>\n                              <div className=\"flex items-center gap-2\">\n                                <Icon className=\"w-4 h-4\" />\n                                {category.name}\n                              </div>\n                            </SelectItem>\n                          );\n                        })}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* KPI Seçimi */}\n                  <div>\n                    <label className=\"block text-xs font-medium text-slate-400 mb-1\">KPI</label>\n                    <Select value={selectedKPI} onValueChange={setSelectedKPI}>\n                      <SelectTrigger className=\"w-full bg-slate-800 border-slate-700 h-9\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-slate-800 border-slate-700\">\n                        {getKPIsByCategory(selectedCategory).map(([key, kpi]) => {\n                          const Icon = kpi.icon;\n                          return (\n                            <SelectItem key={key} value={key}>\n                              <div className=\"flex items-center gap-2\">\n                                <Icon className=\"w-4 h-4\" />\n                                {kpi.name}\n                              </div>\n                            </SelectItem>\n                          );\n                        })}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Karşılaştırma */}\n                  <div>\n                    <label className=\"block text-xs font-medium text-slate-400 mb-1\">Karşılaştırma</label>\n                    <Select value={compareRange} onValueChange={setCompareRange}>\n                      <SelectTrigger className=\"w-full bg-slate-800 border-slate-700 h-9\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-slate-800 border-slate-700\">\n                        <SelectItem value=\"previous_period\">Önceki Dönem</SelectItem>\n                        <SelectItem value=\"previous_year\">Geçen Yıl</SelectItem>\n                        <SelectItem value=\"custom\">Özel Tarih</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Zaman Aralığı */}\n                  <div>\n                    <label className=\"block text-xs font-medium text-slate-400 mb-1\">Zaman Aralığı</label>\n                    <Select value={timeRange} onValueChange={setTimeRange}>\n                      <SelectTrigger className=\"w-full bg-slate-800 border-slate-700 h-9\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-slate-800 border-slate-700\">\n                        <SelectItem value=\"7d\">Son 7 Gün</SelectItem>\n                        <SelectItem value=\"30d\">Son 30 Gün</SelectItem>\n                        <SelectItem value=\"90d\">Bu Çeyrek</SelectItem>\n                        <SelectItem value=\"1y\">Bu Yıl</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                {/* Seçilen KPI Özeti - Kompakt */}\n                {selectedKPIData && (\n                  <Card className=\"bg-slate-800 border-slate-700\">\n                    <CardContent className=\"p-3\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-8 h-8 bg-blue-500/20 rounded-lg flex items-center justify-center flex-shrink-0\">\n                          <selectedKPIData.icon className=\"w-4 h-4 text-blue-400\" />\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <h4 className=\"text-white font-medium text-sm\">{selectedKPIData.name}</h4>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-lg font-bold text-white\">{selectedKPIData.value}</span>\n                            <div className=\"flex items-center gap-1\">\n                              {selectedKPIData.trend === 'up' ? (\n                                <ArrowUpRight className=\"w-3 h-3 text-emerald-400\" />\n                              ) : (\n                                <ArrowDownRight className=\"w-3 h-3 text-red-400\" />\n                              )}\n                              <span className={`text-xs ${\n                                selectedKPIData.trend === 'up' ? 'text-emerald-400' : 'text-red-400'\n                              }`}>\n                                {selectedKPIData.change}\n                              </span>\n                            </div>\n                          </div>\n                          <span className=\"text-xs text-slate-400\">vs {selectedKPIData.previousValue}</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </section>\n\n              {/* 2. Bölüm: Zaman Serisi Grafiği */}\n              <section className=\"space-y-3\">\n                <h2 className=\"text-lg font-semibold text-white flex items-center gap-2\">\n                  📈 Büyük Resmi Gör\n                </h2>\n\n                <Card className=\"bg-slate-800 border-slate-700\">\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"flex items-center gap-2 text-white text-base\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      {selectedKPIData?.name} Trendi\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-3 pt-0\">\n                    <div className=\"h-64\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <ComposedChart data={timeSeriesData} margin={{ top: 5, right: 10, left: 10, bottom: 5 }}>\n                          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                          <XAxis \n                            dataKey=\"date\" \n                            stroke=\"#9CA3AF\" \n                            fontSize={11}\n                            tickLine={false}\n                          />\n                          <YAxis \n                            stroke=\"#9CA3AF\" \n                            fontSize={11}\n                            tickLine={false}\n                            axisLine={false}\n                          />\n                          <Tooltip \n                            contentStyle={{ \n                              backgroundColor: '#1F2937', \n                              border: '1px solid #374151',\n                              borderRadius: '8px',\n                              fontSize: '12px'\n                            }} \n                          />\n                          <Area\n                            type=\"monotone\"\n                            dataKey=\"previous\"\n                            stroke=\"#6B7280\"\n                            fill=\"#6B7280\"\n                            fillOpacity={0.1}\n                            strokeDasharray=\"5 5\"\n                          />\n                          <Line \n                            type=\"monotone\" \n                            dataKey=\"current\" \n                            stroke=\"#3B82F6\" \n                            strokeWidth={2}\n                            dot={{ fill: '#3B82F6', strokeWidth: 1, r: 3 }}\n                          />\n                          <Line \n                            type=\"monotone\" \n                            dataKey=\"previous\" \n                            stroke=\"#6B7280\" \n                            strokeWidth={1}\n                            strokeDasharray=\"5 5\"\n                            dot={{ fill: '#6B7280', strokeWidth: 1, r: 2 }}\n                          />\n                        </ComposedChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </CardContent>\n                </Card>\n              </section>\n\n              {/* 3. Bölüm: Detaylı Boyut Analizi */}\n              <section className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <h2 className=\"text-lg font-semibold text-white flex items-center gap-2\">\n                    🔍 Detaylara İn\n                  </h2>\n                  <Select value={selectedDimension} onValueChange={setSelectedDimension}>\n                    <SelectTrigger className=\"w-32 bg-slate-800 border-slate-700 h-8\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-slate-800 border-slate-700\">\n                      {channelDimensions.map((dim) => (\n                        <SelectItem key={dim.id} value={dim.id}>{dim.name}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n                  {/* Performans Tablosu */}\n                  <div className=\"lg:col-span-2\">\n                    <Card className=\"bg-slate-800 border-slate-700\">\n                      <CardHeader className=\"pb-2\">\n                        <CardTitle className=\"text-white text-base\">{currentDimensionData?.name} Performansı</CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"p-3 pt-0\">\n                        <div className=\"space-y-3 max-h-80 overflow-y-auto pr-2\">\n                          {currentDimensionData?.data.map((item, index) => (\n                            <div key={index} className=\"bg-slate-700/50 rounded-md p-3\">\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <h4 className=\"text-white font-medium text-sm\">{item.name}</h4>\n                                <div className=\"flex items-center gap-2\">\n                                  <span className=\"text-white font-bold text-sm\">{item.current}x</span>\n                                  <div className=\"flex items-center gap-1\">\n                                    {item.current > item.previous ? (\n                                      <ArrowUpRight className=\"w-3 h-3 text-emerald-400\" />\n                                    ) : (\n                                      <ArrowDownRight className=\"w-3 h-3 text-red-400\" />\n                                    )}\n                                    <span className={`text-xs ${\n                                      item.current > item.previous ? 'text-emerald-400' : 'text-red-400'\n                                    }`}>\n                                      {((item.current - item.previous) / item.previous * 100).toFixed(1)}%\n                                    </span>\n                                  </div>\n                                </div>\n                              </div>\n                              <div className=\"grid grid-cols-3 gap-3 text-xs\">\n                                <div>\n                                  <p className=\"text-slate-400\">Harcama</p>\n                                  <p className=\"text-white font-medium\">₺{item.spend.toLocaleString()}</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-slate-400\">Tıklama</p>\n                                  <p className=\"text-white font-medium\">{item.clicks.toLocaleString()}</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-slate-400\">CTR</p>\n                                  <p className=\"text-white font-medium\">{((item.clicks / item.impressions) * 100).toFixed(2)}%</p>\n                                </div>\n                              </div>\n                              <div className=\"mt-2\">\n                                <div className=\"w-full bg-slate-600 rounded-full h-1.5\">\n                                  <div \n                                    className=\"bg-blue-500 h-1.5 rounded-full transition-all duration-300\" \n                                    style={{width: `${(item.current / 5) * 100}%`}}\n                                  ></div>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n\n                  {/* AI İçgörü */}\n                  <div>\n                    <Card className=\"bg-slate-800 border-slate-700\">\n                      <CardHeader className=\"pb-2\">\n                        <CardTitle className=\"flex items-center gap-2 text-white text-base\">\n                          <Brain className=\"w-4 h-4 text-purple-400\" />\n                          AI İçgörü\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"p-3 pt-0\">\n                        <div className=\"space-y-3 max-h-80 overflow-y-auto pr-2\">\n                          <div className=\"bg-purple-500/10 border border-purple-500/20 rounded-md p-3\">\n                            <p className=\"text-slate-300 text-xs leading-relaxed\">\n                              {getAIInsight(selectedDimension)}\n                            </p>\n                          </div>\n\n                          {/* Aksiyon Önerileri */}\n                          <div className=\"bg-emerald-500/10 border border-emerald-500/20 rounded-md p-3\">\n                            <h4 className=\"text-emerald-400 font-medium mb-2 flex items-center gap-2 text-sm\">\n                              <Zap className=\"w-3 h-3\" />\n                              Aksiyon Önerileri\n                            </h4>\n                            <div className=\"space-y-1 text-xs text-slate-300\">\n                              <div className=\"flex items-start gap-2\">\n                                <span className=\"text-emerald-400 text-xs\">•</span>\n                                <p>En yüksek performanslı segmente bütçe artışı yapın</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <span className=\"text-emerald-400 text-xs\">•</span>\n                                <p>Düşük performanslı segmentlerde A/B testi başlatın</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <span className=\"text-emerald-400 text-xs\">•</span>\n                                <p>Trend pozitif olan segmentleri ölçeklendirin</p>\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* Uyarılar */}\n                          <div className=\"bg-red-500/10 border border-red-500/20 rounded-md p-3\">\n                            <h4 className=\"text-red-400 font-medium mb-2 flex items-center gap-2 text-sm\">\n                              <AlertTriangle className=\"w-3 h-3\" />\n                              Dikkat Edilecekler\n                            </h4>\n                            <div className=\"space-y-1 text-xs text-slate-300\">\n                              <div className=\"flex items-start gap-2\">\n                                <span className=\"text-red-400 text-xs\">•</span>\n                                <p>CTR düşük olan segmentlerde kreatif yenileme gerekli</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <span className=\"text-red-400 text-xs\">•</span>\n                                <p>CPC artış trendinde, rekabet artıyor olabilir</p>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n              </section>\n\n          </div>\n        </div>\n      </div>\n\n      {/* AI Chat Panel - Conditional & Fixed Width */}\n      {isChatOpen && (\n        <div className=\"w-80 flex-shrink-0 border-l border-slate-700 overflow-hidden\">\n          <AIChatPanel \n            pageContext=\"KPI Analizi\"\n            insights={[]}\n            suggestions={[\n              'Hangi KPI\\'ya odaklanmalıyım?',\n              'Dönüşüm oranımı nasıl artırabilirim?',\n              'ROAS\\'ımı optimize etmenin yolları'\n            ]}\n          />\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":29805},"client/src/pages/landing.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  TrendingUp, \n  Database, \n  Brain, \n  Lightbulb, \n  Zap, \n  Map, \n  BarChart3,\n  Play,\n  Calendar,\n  Star,\n  Shield,\n  RefreshCw,\n  MessageCircle,\n  X,\n  Send,\n  ArrowRight,\n  CheckCircle,\n  Users,\n  Target,\n  Globe,\n  Smartphone\n} from \"lucide-react\";\nimport { translations, type Language } from \"@/lib/translations\";\n\nexport default function Landing() {\n  const [language, setLanguage] = useState<Language>('tr');\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [chatMessage, setChatMessage] = useState('');\n\n  // Load saved language preference\n  useEffect(() => {\n    const savedLang = localStorage.getItem('language') as Language;\n    if (savedLang && (savedLang === 'tr' || savedLang === 'en')) {\n      setLanguage(savedLang);\n    }\n  }, []);\n\n  // Save language preference\n  const handleLanguageChange = (newLang: Language) => {\n    setLanguage(newLang);\n    localStorage.setItem('language', newLang);\n  };\n\n  const t = translations[language];\n\n  const handleLogin = () => {\n    window.location.href = '/api/login';\n  };\n\n  const handleStartTrial = () => {\n    window.location.href = '/api/login';\n  };\n\n  const handleSendMessage = () => {\n    if (!chatMessage.trim()) return;\n    setChatMessage('');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white text-gray-900\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-gray-200 sticky top-0 z-40 backdrop-blur-md\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"w-5 h-5 text-white\" />\n              </div>\n              <span className=\"text-xl font-bold text-gray-900\">Pazarlama Zekası</span>\n            </div>\n\n            <nav className=\"hidden md:flex items-center gap-8\">\n              <a href=\"#features\" className=\"text-gray-600 hover:text-gray-900 transition-colors font-medium\">Özellikler</a>\n              <a href=\"#dashboard\" className=\"text-gray-600 hover:text-gray-900 transition-colors font-medium\">Dashboard</a>\n              <a href=\"#pricing\" className=\"text-gray-600 hover:text-gray-900 transition-colors font-medium\">Fiyatlandırma</a>\n              <a href=\"#contact\" className=\"text-gray-600 hover:text-gray-900 transition-colors font-medium\">İletişim</a>\n            </nav>\n\n            <div className=\"flex items-center gap-4\">\n              <select \n                value={language}\n                onChange={(e) => handleLanguageChange(e.target.value as Language)}\n                className=\"bg-gray-50 text-gray-700 rounded-lg px-3 py-2 text-sm border border-gray-200\"\n              >\n                <option value=\"tr\">🇹🇷 Türkçe</option>\n                <option value=\"en\">🇬🇧 English</option>\n              </select>\n              <Button \n                variant=\"ghost\" \n                onClick={handleLogin}\n                className=\"text-gray-600 hover:text-gray-900\"\n              >\n                Giriş Yap\n              </Button>\n              <Button \n                onClick={handleStartTrial}\n                className=\"bg-blue-600 hover:bg-blue-700 text-white rounded-lg px-6\"\n              >\n                Ücretsiz Başla\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-b from-gray-50 to-white py-20 lg:py-32\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center max-w-4xl mx-auto\">\n            <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 mb-6 px-4 py-2\">\n              🚀 KOBİ'ler için özel olarak tasarlandı\n            </Badge>\n\n            <h1 className=\"text-5xl lg:text-7xl font-bold text-gray-900 mb-6 leading-tight\">\n              Pazarlama\n              <span className=\"text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600 block\">\n                Performansınızı\n              </span>\n              <span className=\"text-gray-900\">AI ile Yönetin</span>\n            </h1>\n\n            <p className=\"text-xl text-gray-600 mb-8 leading-relaxed max-w-3xl mx-auto\">\n              Shopify, Meta, Google Ads ve TikTok verilerinizi birleştirin. \n              Yapay zeka ile pazarlama kararlarınızı otomatikleştirin ve kârınızı maksimize edin.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row justify-center gap-4 mb-12\">\n              <Button \n                size=\"lg\" \n                onClick={handleStartTrial}\n                className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-4 rounded-xl font-semibold text-lg\"\n              >\n                14 Gün Ücretsiz Dene\n                <ArrowRight className=\"w-5 h-5 ml-2\" />\n              </Button>\n              <Button \n                size=\"lg\" \n                variant=\"outline\"\n                className=\"border-2 border-gray-300 text-gray-700 hover:bg-gray-50 px-8 py-4 rounded-xl font-semibold text-lg\"\n              >\n                <Play className=\"w-5 h-5 mr-2\" />\n                Demo İzle\n              </Button>\n            </div>\n\n            {/* Social Proof */}\n            <div className=\"flex flex-col items-center gap-4 text-sm text-gray-500\">\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                <span>Kredi kartı gerektirmez</span>\n                <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                <span>5 dakikada kurulum</span>\n                <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                <span>24/7 destek</span>\n              </div>\n\n              <div className=\"flex items-center gap-6 mt-4\">\n                <span className=\"text-xs font-medium text-gray-400 uppercase tracking-wider\">Entegre Platformlar</span>\n                <Badge variant=\"secondary\" className=\"bg-gray-100 text-gray-700\">Shopify</Badge>\n                <Badge variant=\"secondary\" className=\"bg-gray-100 text-gray-700\">Meta Ads</Badge>\n                <Badge variant=\"secondary\" className=\"bg-gray-100 text-gray-700\">Google Ads</Badge>\n                <Badge variant=\"secondary\" className=\"bg-gray-100 text-gray-700\">TikTok Ads</Badge>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Dashboard Preview */}\n      <section id=\"dashboard\" className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">\n              Tüm Pazarlama Verileriniz Tek Noktada\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Real-time dashboard ile performansınızı takip edin, AI önerileri alın ve otomatik eylemler gerçekleştirin.\n            </p>\n          </div>\n\n          {/* Dashboard Interface */}\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-3xl blur-3xl\"></div>\n            <Card className=\"relative bg-white border border-gray-200 shadow-2xl rounded-3xl overflow-hidden\">\n              <CardHeader className=\"bg-gray-50 border-b border-gray-200\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"flex gap-2\">\n                      <div className=\"w-3 h-3 bg-red-400 rounded-full\"></div>\n                      <div className=\"w-3 h-3 bg-yellow-400 rounded-full\"></div>\n                      <div className=\"w-3 h-3 bg-green-400 rounded-full\"></div>\n                    </div>\n                    <span className=\"text-sm text-gray-500\">app.pazarlamazekasi.com</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                    <span className=\"text-xs text-gray-500\">Canlı Veri</span>\n                  </div>\n                </div>\n              </CardHeader>\n\n              <CardContent className=\"p-8\">\n                {/* KPI Cards Grid */}\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n                  <Card className=\"bg-white border border-gray-200 hover:shadow-lg transition-shadow\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center\">\n                          <TrendingUp className=\"w-6 h-6 text-green-600\" />\n                        </div>\n                        <span className=\"text-green-600 text-sm font-semibold bg-green-50 px-2 py-1 rounded\">+12.5%</span>\n                      </div>\n                      <h4 className=\"text-gray-500 text-sm mb-2\">Toplam Gelir</h4>\n                      <p className=\"text-2xl font-bold text-gray-900\">₺156,750</p>\n                      <p className=\"text-gray-400 text-xs mt-2\">Bu ay</p>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-white border border-gray-200 hover:shadow-lg transition-shadow\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"w-12 h-12 bg-orange-100 rounded-xl flex items-center justify-center\">\n                          <BarChart3 className=\"w-6 h-6 text-orange-600\" />\n                        </div>\n                        <span className=\"text-red-600 text-sm font-semibold bg-red-50 px-2 py-1 rounded\">+8.2%</span>\n                      </div>\n                      <h4 className=\"text-gray-500 text-sm mb-2\">Reklam Harcaması</h4>\n                      <p className=\"text-2xl font-bold text-gray-900\">₺42,350</p>\n                      <p className=\"text-gray-400 text-xs mt-2\">Bu ay</p>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-white border border-gray-200 hover:shadow-lg transition-shadow\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center\">\n                          <Zap className=\"w-6 h-6 text-blue-600\" />\n                        </div>\n                        <span className=\"text-green-600 text-sm font-semibold bg-green-50 px-2 py-1 rounded\">+5.1%</span>\n                      </div>\n                      <h4 className=\"text-gray-500 text-sm mb-2\">ROAS</h4>\n                      <p className=\"text-2xl font-bold text-gray-900\">3.7x</p>\n                      <p className=\"text-gray-400 text-xs mt-2\">Ortalama</p>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-white border border-gray-200 hover:shadow-lg transition-shadow\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"w-12 h-12 bg-purple-100 rounded-xl flex items-center justify-center\">\n                          <Users className=\"w-6 h-6 text-purple-600\" />\n                        </div>\n                        <span className=\"text-green-600 text-sm font-semibold bg-green-50 px-2 py-1 rounded\">+18.3%</span>\n                      </div>\n                      <h4 className=\"text-gray-500 text-sm mb-2\">Dönüşümler</h4>\n                      <p className=\"text-2xl font-bold text-gray-900\">1,247</p>\n                      <p className=\"text-gray-400 text-xs mt-2\">Bu ay</p>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* AI Recommendations */}\n                <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center gap-3 mb-4\">\n                      <div className=\"w-10 h-10 bg-blue-600 rounded-xl flex items-center justify-center\">\n                        <Brain className=\"w-6 h-6 text-white\" />\n                      </div>\n                      <div>\n                        <h4 className=\"text-lg font-semibold text-gray-900\">AI Önerileri</h4>\n                        <p className=\"text-gray-600 text-sm\">Performansınızı artırmak için kişiselleştirilmiş öneriler</p>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <Card className=\"bg-white/80 border border-green-200\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center gap-3 mb-3\">\n                            <div className=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center\">\n                              <TrendingUp className=\"w-4 h-4 text-green-600\" />\n                            </div>\n                            <span className=\"text-green-700 font-semibold\">Fırsat</span>\n                          </div>\n                          <p className=\"text-gray-900 font-medium mb-2\">TikTok bütçesini %30 artır</p>\n                          <p className=\"text-gray-600 text-sm mb-3\">En yüksek ROAS performansı gösteren kanal. Potansiyel +₺15,600 ek gelir.</p>\n                          <Button size=\"sm\" className=\"bg-blue-600 text-white hover:bg-blue-700\">\n                            Uygula\n                          </Button>\n                        </CardContent>\n                      </Card>\n\n                      <Card className=\"bg-white/80 border border-orange-200\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center gap-3 mb-3\">\n                            <div className=\"w-8 h-8 bg-orange-100 rounded-lg flex items-center justify-center\">\n                              <Zap className=\"w-4 h-4 text-orange-600\" />\n                            </div>\n                            <span className=\"text-orange-700 font-semibold\">Uyarı</span>\n                          </div>\n                          <p className=\"text-gray-900 font-medium mb-2\">Google Ads CPC artışı</p>\n                          <p className=\"text-gray-600 text-sm mb-3\">Son 7 günde %18 CPC artışı tespit edildi. Anahtar kelime optimizasyonu öneriliyor.</p>\n                          <Button size=\"sm\" variant=\"outline\" className=\"border-gray-300\">\n                            Detayları Gör\n                          </Button>\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </CardContent>\n                </Card>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">\n              Pazarlama Kararlarınızı AI ile Otomatize Edin\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Veri analizinden eylem planına kadar tüm pazarlama süreçlerinizi akıllı asistanımızla yönetin.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[\n              {\n                icon: Database,\n                title: \"Otomatik Veri Entegrasyonu\",\n                description: \"Shopify, Meta, Google Ads, TikTok verilerinizi tek tıkla bağlayın. Manuel veri girişine son verin.\",\n                features: [\"Real-time veri senkronizasyonu\", \"Güvenli API bağlantıları\"]\n              },\n              {\n                icon: Brain,\n                title: \"Yapay Zeka Analizi\", \n                description: \"Gelişmiş AI algoritmaları ile pazarlama performansınızı analiz edin ve gelecek trendleri öngörün.\",\n                features: [\"Tahmine dayalı analitik\", \"Anomali tespit sistemi\"]\n              },\n              {\n                icon: Lightbulb,\n                title: \"Akıllı Öneriler\",\n                description: \"AI asistanınız size hangi reklamları durdurmanız, hangi ürünleri öne çıkarmanız gerektiğini söyler.\",\n                features: [\"Tek tıkla uygulama\", \"ROI odaklı öneriler\"]\n              },\n              {\n                icon: Zap,\n                title: \"Otomatik Eylemler\",\n                description: \"Kârınızı korumak için otomatik budget ayarlamaları ve reklam optimizasyonları yapın.\",\n                features: [\"Budget koruma sistemi\", \"Performance monitöring\"]\n              },\n              {\n                icon: Map,\n                title: \"Müşteri Yolculuğu\",\n                description: \"Her müşterinin ilk reklamdan satın almaya kadar olan tüm yolculuğunu görselleştirin.\",\n                features: [\"Touchpoint analizi\", \"Attribution modeling\"]\n              },\n              {\n                icon: BarChart3,\n                title: \"Akıllı Raporlama\",\n                description: \"Özelleştirilebilir dashboard'lar ve otomatik raporlarla performansınızı takip edin.\",\n                features: [\"Özelleştirilebilir widget'lar\", \"Otomatik e-posta raporları\"]\n              }\n            ].map((feature, index) => (\n              <Card key={index} className=\"bg-white border border-gray-200 hover:shadow-lg transition-all hover:scale-105\">\n                <CardContent className=\"p-8\">\n                  <div className=\"w-16 h-16 bg-blue-100 rounded-2xl flex items-center justify-center mb-6\">\n                    <feature.icon className=\"w-8 h-8 text-blue-600\" />\n                  </div>\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-4\">{feature.title}</h3>\n                  <p className=\"text-gray-600 mb-6\">{feature.description}</p>\n                  <ul className=\"text-sm text-gray-500 space-y-2\">\n                    {feature.features.map((item, idx) => (\n                      <li key={idx} className=\"flex items-center gap-2\">\n                        <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                        {item}\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section id=\"pricing\" className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">\n              Basit ve Şeffaf Fiyatlandırma\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              KOBİ'ler için uygun fiyatlarla güçlü pazarlama zekası\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n            {/* Starter Plan */}\n            <Card className=\"bg-white border border-gray-200\">\n              <CardContent className=\"p-8\">\n                <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Başlangıç</h3>\n                <p className=\"text-gray-600 mb-6\">Küçük işletmeler için ideal</p>\n                <div className=\"mb-6\">\n                  <span className=\"text-4xl font-bold text-gray-900\">₺299</span>\n                  <span className=\"text-gray-600\">/ay</span>\n                </div>\n                <ul className=\"space-y-3 mb-8\">\n                  <li className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span className=\"text-gray-600\">2 platform entegrasyonu</span>\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span className=\"text-gray-600\">Temel AI analizi</span>\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span className=\"text-gray-600\">Haftalık raporlar</span>\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span className=\"text-gray-600\">E-posta desteği</span>\n                  </li>\n                </ul>\n                <Button className=\"w-full bg-gray-900 text-white hover:bg-gray-800\">\n                  Başla\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Pro Plan */}\n            <Card className=\"bg-white border-2 border-blue-600 relative\">\n              <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                <Badge className=\"bg-blue-600 text-white px-4 py-2\">En Popüler</Badge>\n              </div>\n              <CardContent className=\"p-8\">\n                <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Profesyonel</h3>\n                <p className=\"text-gray-600 mb-6\">Büyüyen işletmeler için</p>\n                <div className=\"mb-6\">\n                  <span className=\"text-4xl font-bold text-gray-900\">₺599</span>\n                  <span className=\"text-gray-600\">/ay</span>\n                </div>\n                <ul className=\"space-y-3 mb-8\">\n                  <li className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span className=\"text-gray-600\">Sınırsız platform entegrasyonu</span>\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span className=\"text-gray-600\">Gelişmiş AI analizi</span>\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span className=\"text-gray-600\">Otomatik optimizasyon</span>\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span className=\"text-gray-600\">Günlük raporlar</span>\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span className=\"text-gray-600\">Öncelikli destek</span>\n                  </li>\n                </ul>\n                <Button className=\"w-full bg-blue-600 text-white hover:bg-blue-700\">\n                  Başla\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Enterprise Plan */}\n            <Card className=\"bg-white border border-gray-200\">\n              <CardContent className=\"p-8\">\n                <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Kurumsal</h3>\n                <p className=\"text-gray-600 mb-6\">Büyük şirketler için</p>\n                <div className=\"mb-6\">\n                  <span className=\"text-4xl font-bold text-gray-900\">₺1,299</span>\n                  <span className=\"text-gray-600\">/ay</span>\n                </div>\n                <ul className=\"space-y-3 mb-8\">\n                  <li className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span className=\"text-gray-600\">Özel entegrasyonlar</span>\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span className=\"text-gray-600\">API erişimi</span>\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span className=\"text-gray-600\">Özel AI modelleri</span>\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span className=\"text-gray-600\">Real-time analitik</span>\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span className=\"text-gray-600\">Özel hesap yöneticisi</span>\n                  </li>\n                </ul>\n                <Button className=\"w-full bg-gray-900 text-white hover:bg-gray-800\">\n                  İletişime Geç\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-r from-blue-600 to-purple-600\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-4xl font-bold text-white mb-6\">\n            Pazarlama Performansınızı Bir Sonraki Seviyeye Taşımaya Hazır mısınız?\n          </h2>\n          <p className=\"text-xl text-blue-100 mb-8\">\n            14 gün ücretsiz deneme. Kredi kartı gerektirmez. \n            5 dakikada kurulum tamamlanır.\n          </p>\n          <div className=\"flex flex-col sm:flex-row justify-center gap-4\">\n            <Button \n              size=\"lg\"\n              onClick={() => window.location.href = '/auth'}\n              className=\"bg-white text-blue-600 px-8 py-4 rounded-xl font-bold text-lg hover:bg-gray-100\"\n            >\n              Ücretsiz Denemeyi Başlat\n              <ArrowRight className=\"w-5 h-5 ml-2\" />\n            </Button>\n            <Button \n              size=\"lg\"\n              variant=\"outline\"\n              className=\"border-2 border-white text-white px-8 py-4 rounded-xl font-bold text-lg hover:bg-white hover:text-blue-600\"\n            >\n              <Calendar className=\"w-5 h-5 mr-2\" />\n              Demo Rezervasyonu\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div className=\"md:col-span-2\">\n              <div className=\"flex items-center gap-3 mb-6\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"w-5 h-5 text-white\" />\n                </div>\n                <span className=\"text-xl font-bold text-white\">Pazarlama Zekası</span>\n              </div>\n              <p className=\"text-gray-400 mb-6 max-w-md\">\n                KOBİ'ler için tasarlanmış yapay zeka destekli pazarlama platformu. \n                Verilerinizi birleştirin, kârınızı artırın.\n              </p>\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex items-center gap-2\">\n                  <Star className=\"w-4 h-4 text-yellow-400\" />\n                  <Star className=\"w-4 h-4 text-yellow-400\" />\n                  <Star className=\"w-4 h-4 text-yellow-400\" />\n                  <Star className=\"w-4 h-4 text-yellow-400\" />\n                  <Star className=\"w-4 h-4 text-yellow-400\" />\n                </div>\n                <span className=\"text-sm text-gray-400\">500+ mutlu müşteri</span>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"text-white font-semibold mb-4\">Ürün</h4>\n              <ul className=\"space-y-3 text-gray-400\">\n                <li><a href=\"#features\" className=\"hover:text-white transition-colors\">Özellikler</a></li>\n                <li><a href=\"#pricing\" className=\"hover:text-white transition-colors\">Fiyatlandırma</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">API Dokümantasyonu</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Güvenlik</a></li>\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"text-white font-semibold mb-4\">Destek</h4>\n              <ul className=\"space-y-3 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Yardım Merkezi</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Video Eğitimler</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Canlı Destek</a></li>\n                <li><a href=\"#contact\" className=\"hover:text-white transition-colors\">İletişim</a></li>\n              </ul>\n            </div>\n          </div>\n\n          <div className=\"border-t border-gray-800 mt-12 pt-8\">\n            <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n              <p className=\"text-gray-500 text-sm\">\n                © 2024 Pazarlama Zekası. Tüm hakları saklıdır.\n              </p>\n              <div className=\"flex items-center gap-6 text-sm\">\n                <a href=\"#\" className=\"text-gray-500 hover:text-white transition-colors\">Gizlilik Politikası</a>\n                <a href=\"#\" className=\"text-gray-500 hover:text-white transition-colors\">Kullanım Şartları</a>\n                <a href=\"#\" className=\"text-gray-500 hover:text-white transition-colors\">Çerezler</a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </footer>\n\n      {/* AI Assistant Chat */}\n      <div className=\"fixed bottom-6 right-6 z-50\">\n        <Button\n          onClick={() => setIsChatOpen(!isChatOpen)}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white rounded-full p-4 shadow-lg transition-all hover:scale-110\"\n        >\n          <MessageCircle className=\"w-6 h-6\" />\n        </Button>\n\n        {isChatOpen && (\n          <Card className=\"absolute bottom-16 right-0 w-80 h-96 bg-white border border-gray-200 shadow-2xl rounded-2xl\">\n            <CardHeader className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white p-4 rounded-t-2xl\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center\">\n                    <Brain className=\"w-4 h-4\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold\">AI Asistanınız</h4>\n                    <p className=\"text-xs opacity-90\">Pazarlama konusunda size yardımcı olacağım</p>\n                  </div>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsChatOpen(false)}\n                  className=\"text-white/80 hover:text-white p-1\"\n                >\n                  <X className=\"w-5 h-5\" />\n                </Button>\n              </div>\n            </CardHeader>\n\n            <CardContent className=\"h-64 overflow-y-auto p-4 space-y-4\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0\">\n                  <Brain className=\"w-4 h-4 text-white\" />\n                </div>\n                <div className=\"bg-gray-100 rounded-2xl rounded-tl-sm p-3 max-w-xs\">\n                  <p className=\"text-gray-700 text-sm\">\n                    Merhaba! Size nasıl yardımcı olabilirim? \n                    ROAS analizi, bütçe optimizasyonu veya müşteri segmentasyonu hakkında sorularınızı sorabilirsiniz.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex flex-wrap gap-2\">\n                <Button size=\"sm\" variant=\"outline\" className=\"border-gray-200 text-gray-600 hover:bg-gray-50 text-xs\">\n                  📊 ROAS Analizi\n                </Button>\n                <Button size=\"sm\" variant=\"outline\" className=\"border-gray-200 text-gray-600 hover:bg-gray-50 text-xs\">\n                  💰 Bütçe Optimizasyonu\n                </Button>\n                <Button size=\"sm\" variant=\"outline\" className=\"border-gray-200 text-gray-600 hover:bg-gray-50 text-xs\">\n                  👥 Müşteri İnsights\n                </Button>\n              </div>\n            </CardContent>\n\n            <div className=\"p-4 border-t border-gray-200\">\n              <div className=\"flex items-center gap-2\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Sorunuzu yazın...\"\n                  value={chatMessage}\n                  onChange={(e) => setChatMessage(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                  className=\"flex-1 bg-gray-50 text-gray-700 rounded-lg px-3 py-2 text-sm border border-gray-200 focus:border-blue-500 focus:outline-none\"\n                />\n                <Button \n                  size=\"sm\"\n                  onClick={handleSendMessage}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white rounded-lg p-2\"\n                >\n                  <Send className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":34219},"client/src/pages/market-analysis.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  TrendingUp, \n  Users, \n  AlertTriangle, \n  CheckCircle, \n  Loader2,\n  BarChart3,\n  Target,\n  Lightbulb\n} from \"lucide-react\";\nimport { useEffect } from \"react\";\n\ninterface MarketAnalysisResult {\n  summary: string;\n  trends: string[];\n  competitors: { name: string; analysis: string }[];\n  opportunities: string[];\n  risks: string[];\n  targetAudience: string;\n}\n\nexport default function MarketAnalysis() {\n  const { user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [industry, setIndustry] = useState('');\n  const [websiteUrl, setWebsiteUrl] = useState('');\n  const [competitors, setCompetitors] = useState('');\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !user) {\n      const isTestMode = window.location.search.includes('test=true');\n      if (!isTestMode) {\n        toast({\n          title: \"Giriş Gerekli\",\n          description: \"Lütfen giriş yapın veya test modunu deneyin\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/?test=true\";\n        }, 1000);\n      }\n    }\n  }, [user, authLoading, toast]);\n\n  const analysisMutation = useMutation({\n    mutationFn: async (data: { industry: string; websiteUrl?: string; competitors?: string }) => {\n      const response = await apiRequest('POST', '/api/ai/market-analysis', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Market analysis completed successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/ai/analysis'] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to analyze market\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAnalyze = () => {\n    if (!industry.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter an industry\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    analysisMutation.mutate({\n      industry,\n      websiteUrl: websiteUrl || undefined,\n      competitors: competitors || undefined,\n    });\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 flex items-center justify-center\">\n        <div className=\"text-white text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null; // Will redirect in useEffect\n  }\n\n  const analysisData: MarketAnalysisResult | undefined = analysisMutation.data;\n\n  return (\n    <div className=\"space-y-6\">\n            \n            {/* Analysis Form */}\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-white\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  Pazar Analizi\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                    Sektör *\n                  </label>\n                  <Input\n                    placeholder=\"Örn: E-ticaret, SaaS, Fintech\"\n                    value={industry}\n                    onChange={(e) => setIndustry(e.target.value)}\n                    className=\"bg-slate-700 border-slate-600 text-slate-300\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                    Website URL (Opsiyonel)\n                  </label>\n                  <Input\n                    placeholder=\"https://yourwebsite.com\"\n                    value={websiteUrl}\n                    onChange={(e) => setWebsiteUrl(e.target.value)}\n                    className=\"bg-slate-700 border-slate-600 text-slate-300\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                    Ana Rakipler (Opsiyonel)\n                  </label>\n                  <Textarea\n                    placeholder=\"Rakip firma isimlerini virgülle ayırarak yazın\"\n                    value={competitors}\n                    onChange={(e) => setCompetitors(e.target.value)}\n                    className=\"bg-slate-700 border-slate-600 text-slate-300\"\n                    rows={3}\n                  />\n                </div>\n                \n                <Button \n                  onClick={handleAnalyze}\n                  disabled={analysisMutation.isPending}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  {analysisMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Analiz Ediliyor...\n                    </>\n                  ) : (\n                    'Pazar Analizini Başlat'\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Analysis Results */}\n            {analysisData && (\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                \n                {/* Summary */}\n                <Card className=\"bg-slate-800 border-slate-700 lg:col-span-2\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-white\">\n                      <TrendingUp className=\"w-5 h-5\" />\n                      Pazar Durumu Özeti\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-slate-300 leading-relaxed\">\n                      {analysisData.summary}\n                    </p>\n                  </CardContent>\n                </Card>\n\n                {/* Trends */}\n                <Card className=\"bg-slate-800 border-slate-700\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-white\">\n                      <TrendingUp className=\"w-5 h-5\" />\n                      Güncel Trendler\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {analysisData.trends.map((trend, index) => (\n                        <div key={index} className=\"flex items-start gap-3\">\n                          <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0\"></div>\n                          <p className=\"text-slate-300 text-sm\">{trend}</p>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Opportunities */}\n                <Card className=\"bg-slate-800 border-slate-700\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-white\">\n                      <Lightbulb className=\"w-5 h-5\" />\n                      Fırsatlar\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {analysisData.opportunities.map((opportunity, index) => (\n                        <div key={index} className=\"flex items-start gap-3\">\n                          <CheckCircle className=\"w-4 h-4 text-green-500 mt-0.5 flex-shrink-0\" />\n                          <p className=\"text-slate-300 text-sm\">{opportunity}</p>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Risks */}\n                <Card className=\"bg-slate-800 border-slate-700\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-white\">\n                      <AlertTriangle className=\"w-5 h-5\" />\n                      Riskler\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {analysisData.risks.map((risk, index) => (\n                        <div key={index} className=\"flex items-start gap-3\">\n                          <AlertTriangle className=\"w-4 h-4 text-orange-500 mt-0.5 flex-shrink-0\" />\n                          <p className=\"text-slate-300 text-sm\">{risk}</p>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Target Audience */}\n                <Card className=\"bg-slate-800 border-slate-700\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-white\">\n                      <Users className=\"w-5 h-5\" />\n                      Hedef Kitle Analizi\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-slate-300 leading-relaxed\">\n                      {analysisData.targetAudience}\n                    </p>\n                  </CardContent>\n                </Card>\n\n                {/* Competitors */}\n                {analysisData.competitors.length > 0 && (\n                  <Card className=\"bg-slate-800 border-slate-700 lg:col-span-2\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2 text-white\">\n                        <Target className=\"w-5 h-5\" />\n                        Rakip Analizi\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        {analysisData.competitors.map((competitor, index) => (\n                          <Card key={index} className=\"bg-slate-700 border-slate-600\">\n                            <CardContent className=\"p-4\">\n                              <div className=\"flex items-center gap-2 mb-3\">\n                                <Badge variant=\"outline\" className=\"border-slate-500 text-slate-300\">\n                                  {competitor.name}\n                                </Badge>\n                              </div>\n                              <p className=\"text-slate-300 text-sm leading-relaxed\">\n                                {competitor.analysis}\n                              </p>\n                            </CardContent>\n                          </Card>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            )}\n\n            {/* Empty State */}\n            {!analysisData && !analysisMutation.isPending && (\n              <Card className=\"bg-slate-800/50 border-slate-700\">\n                <CardContent className=\"p-12 text-center\">\n                  <BarChart3 className=\"w-16 h-16 text-slate-500 mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold text-white mb-2\">\n                    Pazar Analizinizi Başlatın\n                  </h3>\n                  <p className=\"text-slate-400 max-w-md mx-auto\">\n                    Sektörünüzü girin ve yapay zeka destekli pazar analizi alın. \n                    Trendler, rakipler, fırsatlar ve riskler hakkında detaylı bilgi edinin.\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n    </div>\n  );\n}\n","size_bytes":12454},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertCircle, ArrowLeft } from \"lucide-react\";\nimport { getNavigationUrl } from \"@/lib/navigation\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"max-w-2xl mx-auto\">\n        <Card className=\"bg-slate-800 border-slate-700\">\n          <CardContent className=\"pt-8 pb-8\">\n            <div className=\"text-center\">\n              <AlertCircle className=\"h-16 w-16 text-orange-500 mx-auto mb-4\" />\n              <h1 className=\"text-3xl font-bold text-white mb-2\">Sayfa Bulunamadı</h1>\n              <p className=\"text-slate-400 mb-6\">\n                Bu özellik henüz geliştirilme aşamasında. Şimdilik dashboard ve pazar analizi sayfalarını kullanabilirsin.\n              </p>\n              \n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Button \n                  onClick={() => window.location.href = getNavigationUrl('/')}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Dashboard'a Dön\n                </Button>\n                <Button \n                  onClick={() => window.location.href = getNavigationUrl('/market-analysis')}\n                  variant=\"outline\"\n                  className=\"bg-slate-700 hover:bg-slate-600 text-slate-300 border-slate-600\"\n                >\n                  Pazar Analizi\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1694},"client/src/pages/onboarding.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { CheckCircle, ArrowRight, ArrowLeft } from \"lucide-react\";\n\ninterface OnboardingData {\n  // Temel Bilgiler\n  industry: string;\n  businessModel: string;\n  companySize: string;\n  businessAge: string;\n  location: string;\n  \n  // Finansal Bilgiler\n  monthlyRevenue: string;\n  monthlyAdBudget: string;\n  averageOrderValue: string;\n  \n  // Hedef Kitle\n  targetAudience: string;\n  ageGroup: string;\n  geography: string;\n  \n  // Pazarlama Durumu\n  currentChannels: string[];\n  primaryGoal: string;\n  painPoints: string[];\n  \n  // Ürün/Hizmet\n  productCategory: string;\n  productCount: string;\n  seasonality: string;\n  \n  // Rakip Bilgileri\n  mainCompetitors: string;\n  competitiveAdvantage: string;\n}\n\nconst steps = [\n  { id: 1, title: \"Temel Bilgiler\", description: \"Şirketiniz hakkında\" },\n  { id: 2, title: \"Finansal Durum\", description: \"Bütçe ve gelir bilgileri\" },\n  { id: 3, title: \"Hedef Kitle\", description: \"Müşteri profili\" },\n  { id: 4, title: \"Pazarlama\", description: \"Mevcut durum ve hedefler\" },\n  { id: 5, title: \"Ürün & Rakipler\", description: \"Pazar pozisyonu\" },\n  { id: 6, title: \"Tamamlandı\", description: \"Hoş geldiniz!\" }\n];\n\nexport default function Onboarding() {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [formData, setFormData] = useState<OnboardingData>({\n    industry: '',\n    businessModel: '',\n    companySize: '',\n    businessAge: '',\n    location: '',\n    monthlyRevenue: '',\n    monthlyAdBudget: '',\n    averageOrderValue: '',\n    targetAudience: '',\n    ageGroup: '',\n    geography: '',\n    currentChannels: [],\n    primaryGoal: '',\n    painPoints: [],\n    productCategory: '',\n    productCount: '',\n    seasonality: '',\n    mainCompetitors: '',\n    competitiveAdvantage: ''\n  });\n\n  const handleInputChange = (field: keyof OnboardingData, value: string | string[]) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleNext = () => {\n    if (currentStep < 6) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleComplete = () => {\n    // Save onboarding data and redirect to dashboard\n    console.log('Onboarding completed:', formData);\n    window.location.href = '/dashboard';\n  };\n\n  const renderStep = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <div className=\"space-y-6\">\n            <div>\n              <Label className=\"text-base font-medium\">Sektörünüz nedir?</Label>\n              <RadioGroup \n                value={formData.industry} \n                onValueChange={(value) => handleInputChange('industry', value)}\n                className=\"mt-3\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"ecommerce\" id=\"ecommerce\" />\n                  <Label htmlFor=\"ecommerce\">E-ticaret</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"saas\" id=\"saas\" />\n                  <Label htmlFor=\"saas\">Yazılım/SaaS</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"retail\" id=\"retail\" />\n                  <Label htmlFor=\"retail\">Perakende</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"services\" id=\"services\" />\n                  <Label htmlFor=\"services\">Hizmet Sektörü</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"manufacturing\" id=\"manufacturing\" />\n                  <Label htmlFor=\"manufacturing\">Üretim</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"other\" id=\"other\" />\n                  <Label htmlFor=\"other\">Diğer</Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            <div>\n              <Label className=\"text-base font-medium\">İş modeliniz nedir?</Label>\n              <RadioGroup \n                value={formData.businessModel} \n                onValueChange={(value) => handleInputChange('businessModel', value)}\n                className=\"mt-3\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"b2c\" id=\"b2c\" />\n                  <Label htmlFor=\"b2c\">B2C (Tüketiciye Satış)</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"b2b\" id=\"b2b\" />\n                  <Label htmlFor=\"b2b\">B2B (İşletmelere Satış)</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"b2b2c\" id=\"b2b2c\" />\n                  <Label htmlFor=\"b2b2c\">B2B2C (Karma Model)</Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            <div>\n              <Label className=\"text-base font-medium\">Çalışan sayınız kaç kişi?</Label>\n              <RadioGroup \n                value={formData.companySize} \n                onValueChange={(value) => handleInputChange('companySize', value)}\n                className=\"mt-3\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"solo\" id=\"solo\" />\n                  <Label htmlFor=\"solo\">Sadece ben (1 kişi)</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"small\" id=\"small\" />\n                  <Label htmlFor=\"small\">2-10 kişi</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"medium\" id=\"medium\" />\n                  <Label htmlFor=\"medium\">11-50 kişi</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"large\" id=\"large\" />\n                  <Label htmlFor=\"large\">51-200 kişi</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"enterprise\" id=\"enterprise\" />\n                  <Label htmlFor=\"enterprise\">200+ kişi</Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            <div>\n              <Label className=\"text-base font-medium\">İşletmeniz kaç yaşında?</Label>\n              <RadioGroup \n                value={formData.businessAge} \n                onValueChange={(value) => handleInputChange('businessAge', value)}\n                className=\"mt-3\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"startup\" id=\"startup\" />\n                  <Label htmlFor=\"startup\">Yeni kuruluyor (0-1 yıl)</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"early\" id=\"early\" />\n                  <Label htmlFor=\"early\">Erken dönem (1-3 yıl)</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"growth\" id=\"growth\" />\n                  <Label htmlFor=\"growth\">Büyüme döneminde (3-7 yıl)</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"mature\" id=\"mature\" />\n                  <Label htmlFor=\"mature\">Olgun işletme (7+ yıl)</Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            <div>\n              <Label htmlFor=\"location\" className=\"text-base font-medium\">Ana faaliyet gösterdiğiniz şehir/bölge?</Label>\n              <Input\n                id=\"location\" \n                placeholder=\"Örn: İstanbul, Türkiye\"\n                value={formData.location}\n                onChange={(e) => handleInputChange('location', e.target.value)}\n                className=\"mt-2\"\n              />\n            </div>\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-6\">\n            <div>\n              <Label className=\"text-base font-medium\">Aylık ortalama cironuz ne kadar? (TL)</Label>\n              <RadioGroup \n                value={formData.monthlyRevenue} \n                onValueChange={(value) => handleInputChange('monthlyRevenue', value)}\n                className=\"mt-3\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"0-50k\" id=\"0-50k\" />\n                  <Label htmlFor=\"0-50k\">0 - 50.000 TL</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"50k-200k\" id=\"50k-200k\" />\n                  <Label htmlFor=\"50k-200k\">50.000 - 200.000 TL</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"200k-500k\" id=\"200k-500k\" />\n                  <Label htmlFor=\"200k-500k\">200.000 - 500.000 TL</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"500k-1m\" id=\"500k-1m\" />\n                  <Label htmlFor=\"500k-1m\">500.000 - 1.000.000 TL</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"1m+\" id=\"1m+\" />\n                  <Label htmlFor=\"1m+\">1.000.000 TL+</Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            <div>\n              <Label className=\"text-base font-medium\">Aylık reklam bütçeniz ne kadar? (TL)</Label>\n              <RadioGroup \n                value={formData.monthlyAdBudget} \n                onValueChange={(value) => handleInputChange('monthlyAdBudget', value)}\n                className=\"mt-3\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"0-5k\" id=\"0-5k\" />\n                  <Label htmlFor=\"0-5k\">0 - 5.000 TL</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"5k-15k\" id=\"5k-15k\" />\n                  <Label htmlFor=\"5k-15k\">5.000 - 15.000 TL</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"15k-50k\" id=\"15k-50k\" />\n                  <Label htmlFor=\"15k-50k\">15.000 - 50.000 TL</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"50k-100k\" id=\"50k-100k\" />\n                  <Label htmlFor=\"50k-100k\">50.000 - 100.000 TL</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"100k+\" id=\"100k+\" />\n                  <Label htmlFor=\"100k+\">100.000 TL+</Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            <div>\n              <Label className=\"text-base font-medium\">Ortalama sipariş tutarınız ne kadar? (TL)</Label>\n              <RadioGroup \n                value={formData.averageOrderValue} \n                onValueChange={(value) => handleInputChange('averageOrderValue', value)}\n                className=\"mt-3\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"0-100\" id=\"0-100\" />\n                  <Label htmlFor=\"0-100\">0 - 100 TL</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"100-500\" id=\"100-500\" />\n                  <Label htmlFor=\"100-500\">100 - 500 TL</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"500-1000\" id=\"500-1000\" />\n                  <Label htmlFor=\"500-1000\">500 - 1.000 TL</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"1000-5000\" id=\"1000-5000\" />\n                  <Label htmlFor=\"1000-5000\">1.000 - 5.000 TL</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"5000+\" id=\"5000+\" />\n                  <Label htmlFor=\"5000+\">5.000 TL+</Label>\n                </div>\n              </RadioGroup>\n            </div>\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"space-y-6\">\n            <div>\n              <Label className=\"text-base font-medium\">Hedef kitleniz kimler?</Label>\n              <RadioGroup \n                value={formData.targetAudience} \n                onValueChange={(value) => handleInputChange('targetAudience', value)}\n                className=\"mt-3\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"general-consumer\" id=\"general-consumer\" />\n                  <Label htmlFor=\"general-consumer\">Genel tüketiciler</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"women\" id=\"women\" />\n                  <Label htmlFor=\"women\">Kadınlar</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"men\" id=\"men\" />\n                  <Label htmlFor=\"men\">Erkekler</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"professionals\" id=\"professionals\" />\n                  <Label htmlFor=\"professionals\">Profesyoneller/İş insanları</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"parents\" id=\"parents\" />\n                  <Label htmlFor=\"parents\">Ebeveynler</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"students\" id=\"students\" />\n                  <Label htmlFor=\"students\">Öğrenciler</Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            <div>\n              <Label className=\"text-base font-medium\">Hedef yaş grubunuz?</Label>\n              <RadioGroup \n                value={formData.ageGroup} \n                onValueChange={(value) => handleInputChange('ageGroup', value)}\n                className=\"mt-3\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"18-24\" id=\"18-24\" />\n                  <Label htmlFor=\"18-24\">18-24 yaş</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"25-34\" id=\"25-34\" />\n                  <Label htmlFor=\"25-34\">25-34 yaş</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"35-44\" id=\"35-44\" />\n                  <Label htmlFor=\"35-44\">35-44 yaş</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"45-54\" id=\"45-54\" />\n                  <Label htmlFor=\"45-54\">45-54 yaş</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"55+\" id=\"55+\" />\n                  <Label htmlFor=\"55+\">55+ yaş</Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            <div>\n              <Label className=\"text-base font-medium\">Coğrafi hedeflemeniz?</Label>\n              <RadioGroup \n                value={formData.geography} \n                onValueChange={(value) => handleInputChange('geography', value)}\n                className=\"mt-3\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"local\" id=\"local\" />\n                  <Label htmlFor=\"local\">Yerel (şehir/bölge)</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"national\" id=\"national\" />\n                  <Label htmlFor=\"national\">Ulusal (Türkiye geneli)</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"international\" id=\"international\" />\n                  <Label htmlFor=\"international\">Uluslararası</Label>\n                </div>\n              </RadioGroup>\n            </div>\n          </div>\n        );\n\n      case 4:\n        return (\n          <div className=\"space-y-6\">\n            <div>\n              <Label className=\"text-base font-medium\">Şu anda hangi pazarlama kanallarını kullanıyorsunuz? (Birden fazla seçebilirsiniz)</Label>\n              <div className=\"mt-3 space-y-2\">\n                {[\n                  { id: 'google-ads', label: 'Google Ads' },\n                  { id: 'facebook-ads', label: 'Facebook/Instagram Ads' },\n                  { id: 'tiktok-ads', label: 'TikTok Ads' },\n                  { id: 'seo', label: 'SEO' },\n                  { id: 'email', label: 'E-posta Pazarlama' },\n                  { id: 'influencer', label: 'Influencer Marketing' },\n                  { id: 'content', label: 'İçerik Pazarlama' },\n                  { id: 'traditional', label: 'Geleneksel Medya' }\n                ].map((channel) => (\n                  <div key={channel.id} className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      id={channel.id}\n                      checked={formData.currentChannels.includes(channel.id)}\n                      onChange={(e) => {\n                        const newChannels = e.target.checked\n                          ? [...formData.currentChannels, channel.id]\n                          : formData.currentChannels.filter(c => c !== channel.id);\n                        handleInputChange('currentChannels', newChannels);\n                      }}\n                    />\n                    <Label htmlFor={channel.id}>{channel.label}</Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <Label className=\"text-base font-medium\">Birincil pazarlama hedefiniz nedir?</Label>\n              <RadioGroup \n                value={formData.primaryGoal} \n                onValueChange={(value) => handleInputChange('primaryGoal', value)}\n                className=\"mt-3\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"awareness\" id=\"awareness\" />\n                  <Label htmlFor=\"awareness\">Marka bilinirliği artırmak</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"leads\" id=\"leads\" />\n                  <Label htmlFor=\"leads\">Potansiyel müşteri elde etmek</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"sales\" id=\"sales\" />\n                  <Label htmlFor=\"sales\">Satışları artırmak</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"retention\" id=\"retention\" />\n                  <Label htmlFor=\"retention\">Müşteri sadakatini artırmak</Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            <div>\n              <Label className=\"text-base font-medium\">En büyük pazarlama zorluklarınız nelerdir? (Birden fazla seçebilirsiniz)</Label>\n              <div className=\"mt-3 space-y-2\">\n                {[\n                  { id: 'budget', label: 'Sınırlı bütçe' },\n                  { id: 'targeting', label: 'Doğru kitleye ulaşamama' },\n                  { id: 'measurement', label: 'Sonuçları ölçememe' },\n                  { id: 'time', label: 'Zaman yetersizliği' },\n                  { id: 'expertise', label: 'Teknik bilgi eksikliği' },\n                  { id: 'competition', label: 'Yoğun rekabet' }\n                ].map((pain) => (\n                  <div key={pain.id} className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      id={pain.id}\n                      checked={formData.painPoints.includes(pain.id)}\n                      onChange={(e) => {\n                        const newPains = e.target.checked\n                          ? [...formData.painPoints, pain.id]\n                          : formData.painPoints.filter(p => p !== pain.id);\n                        handleInputChange('painPoints', newPains);\n                      }}\n                    />\n                    <Label htmlFor={pain.id}>{pain.label}</Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        );\n\n      case 5:\n        return (\n          <div className=\"space-y-6\">\n            <div>\n              <Label className=\"text-base font-medium\">Ürün/hizmet kategoriniz nedir?</Label>\n              <RadioGroup \n                value={formData.productCategory} \n                onValueChange={(value) => handleInputChange('productCategory', value)}\n                className=\"mt-3\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"fashion\" id=\"fashion\" />\n                  <Label htmlFor=\"fashion\">Moda & Aksesuar</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"electronics\" id=\"electronics\" />\n                  <Label htmlFor=\"electronics\">Elektronik</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"beauty\" id=\"beauty\" />\n                  <Label htmlFor=\"beauty\">Kozmetik & Güzellik</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"food\" id=\"food\" />\n                  <Label htmlFor=\"food\">Gıda & İçecek</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"home\" id=\"home\" />\n                  <Label htmlFor=\"home\">Ev & Yaşam</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"services\" id=\"services-cat\" />\n                  <Label htmlFor=\"services-cat\">Hizmetler</Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            <div>\n              <Label className=\"text-base font-medium\">Kaç farklı ürün/hizmetiniz var?</Label>\n              <RadioGroup \n                value={formData.productCount} \n                onValueChange={(value) => handleInputChange('productCount', value)}\n                className=\"mt-3\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"1-10\" id=\"1-10\" />\n                  <Label htmlFor=\"1-10\">1-10 ürün</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"11-50\" id=\"11-50\" />\n                  <Label htmlFor=\"11-50\">11-50 ürün</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"51-200\" id=\"51-200\" />\n                  <Label htmlFor=\"51-200\">51-200 ürün</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"200+\" id=\"200+\" />\n                  <Label htmlFor=\"200+\">200+ ürün</Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            <div>\n              <Label className=\"text-base font-medium\">İşinizde mevsimsellik var mı?</Label>\n              <RadioGroup \n                value={formData.seasonality} \n                onValueChange={(value) => handleInputChange('seasonality', value)}\n                className=\"mt-3\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"none\" id=\"none\" />\n                  <Label htmlFor=\"none\">Yok, yıl boyunca stabil</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"summer\" id=\"summer\" />\n                  <Label htmlFor=\"summer\">Yaz aylarında yoğun</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"winter\" id=\"winter\" />\n                  <Label htmlFor=\"winter\">Kış aylarında yoğun</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"holiday\" id=\"holiday\" />\n                  <Label htmlFor=\"holiday\">Bayram/tatil dönemlerinde yoğun</Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            <div>\n              <Label htmlFor=\"competitors\" className=\"text-base font-medium\">Ana rakiplerinizi belirtir misiniz? (İsteğe bağlı)</Label>\n              <Textarea\n                id=\"competitors\"\n                placeholder=\"Örn: Nike, Adidas, Puma...\"\n                value={formData.mainCompetitors}\n                onChange={(e) => handleInputChange('mainCompetitors', e.target.value)}\n                className=\"mt-2\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"advantage\" className=\"text-base font-medium\">Rakiplerinizden farklı kılan özelliğiniz nedir?</Label>\n              <Textarea\n                id=\"advantage\"  \n                placeholder=\"Örn: Daha hızlı teslimat, daha uygun fiyat, daha kaliteli ürün...\"\n                value={formData.competitiveAdvantage}\n                onChange={(e) => handleInputChange('competitiveAdvantage', e.target.value)}\n                className=\"mt-2\"\n              />\n            </div>\n          </div>\n        );\n\n      case 6:\n        return (\n          <div className=\"text-center space-y-6\">\n            <CheckCircle className=\"w-16 h-16 mx-auto text-green-500\" />\n            <div>\n              <h3 className=\"text-2xl font-bold text-gray-900\">Kurulum Tamamlandı! 🎉</h3>\n              <p className=\"text-gray-600 mt-2\">\n                Artık markanızı tanıyoruz ve size özel analizler hazırlayabiliriz.\n              </p>\n            </div>\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <h4 className=\"font-semibold text-blue-900\">Kolektif Zeka Aktif!</h4>\n              <p className=\"text-blue-700 text-sm mt-1\">\n                AI asistanınız, aynı sektörden yüzlerce markanın anonimleştirilmiş verisiyle eğitildi. \n                Sıfırdan değil, sektörünüzün bilgeliğiyle başlıyorsunuz.\n              </p>\n            </div>\n            <Button onClick={handleComplete} size=\"lg\" className=\"w-full\">\n              Dashboard'a Git\n              <ArrowRight className=\"ml-2 h-4 w-4\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4\">\n      <div className=\"max-w-2xl mx-auto\">\n        {/* Progress Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">Markanızı Tanıyalım</h1>\n            <span className=\"text-sm text-gray-500\">\n              {currentStep}/5 Adım\n            </span>\n          </div>\n          <Progress value={(currentStep / 5) * 100} className=\"w-full\" />\n          \n          {currentStep <= 5 && (\n            <div className=\"mt-4\">\n              <h2 className=\"text-lg font-semibold text-gray-800\">\n                {steps[currentStep - 1].title}\n              </h2>\n              <p className=\"text-gray-600 text-sm\">\n                {steps[currentStep - 1].description}\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Form Content */}\n        <Card>\n          <CardHeader className=\"pb-6\">\n            <div className=\"flex justify-between items-center\">\n              <div className=\"flex space-x-2\">\n                {steps.slice(0, 5).map((step) => (\n                  <div\n                    key={step.id}\n                    className={`w-3 h-3 rounded-full ${\n                      step.id <= currentStep ? 'bg-blue-500' : 'bg-gray-200'\n                    }`}\n                  />\n                ))}\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {renderStep()}\n            \n            {currentStep <= 5 && (\n              <div className=\"flex justify-between mt-8\">\n                <Button\n                  variant=\"outline\"\n                  onClick={handlePrevious}\n                  disabled={currentStep === 1}\n                >\n                  <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                  Geri\n                </Button>\n                <Button onClick={handleNext}>\n                  {currentStep === 5 ? 'Tamamla' : 'İleri'}\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":30410},"client/src/pages/opportunities.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { \n  Lightbulb, \n  TrendingUp, \n  Target, \n  DollarSign, \n  AlertTriangle, \n  CheckCircle, \n  Clock,\n  Users,\n  Play,\n  Plus\n} from \"lucide-react\";\n\nexport default function Opportunities() {\n  const [priority, setPriority] = useState('all');\n  const [category, setCategory] = useState('all');\n  const [channel, setChannel] = useState('all');\n  const [assignDialogOpen, setAssignDialogOpen] = useState(false);\n  const [selectedAction, setSelectedAction] = useState(null);\n\n  const teamMembers = [\n    { id: 1, name: \"Ahmet Kaya\", role: \"Pazarlama Müdürü\", avatar: \"/api/placeholder/32/32\" },\n    { id: 2, name: \"Zeynep Demir\", role: \"İçerik Uzmanı\", avatar: \"/api/placeholder/32/32\" },\n    { id: 3, name: \"Mehmet Yılmaz\", role: \"Veri Analisti\", avatar: \"/api/placeholder/32/32\" },\n    { id: 4, name: \"Selin Özkan\", role: \"Sosyal Medya Uzmanı\", avatar: \"/api/placeholder/32/32\" }\n  ];\n\n  const opportunities = [\n    {\n      id: 1,\n      title: 'Google Ads Anahtar Kelime Genişletme',\n      description: 'Yüksek performanslı anahtar kelimelerin benzerlerini hedefleyerek %25 daha fazla trafik elde edebilirsiniz.',\n      category: 'search',\n      priority: 'high',\n      channel: 'google_ads',\n      potentialImpact: 25,\n      estimatedROI: 3.8,\n      effort: 'medium',\n      status: 'new',\n      dueDate: '2024-02-15'\n    },\n    {\n      id: 2,\n      title: 'Meta Ads Lookalike Audience Optimizasyonu',\n      description: 'En iyi müşterilerinize benzer kitleleri hedefleyerek dönüşüm oranını %18 artırabilirsiniz.',\n      category: 'audience',\n      priority: 'high',\n      channel: 'meta_ads',\n      potentialImpact: 18,\n      estimatedROI: 4.2,\n      effort: 'low',\n      status: 'in_progress',\n      dueDate: '2024-02-10'\n    },\n    {\n      id: 3,\n      title: 'Email Remarketing Kampanyası',\n      description: 'Sepetini terk eden müşterilere otomatik email göndererek %12 ek dönüşüm elde edebilirsiniz.',\n      category: 'retention',\n      priority: 'medium',\n      channel: 'email',\n      potentialImpact: 12,\n      estimatedROI: 6.5,\n      effort: 'high',\n      status: 'new',\n      dueDate: '2024-02-20'\n    },\n    {\n      id: 4,\n      title: 'TikTok Video Kreatif Çeşitliliği',\n      description: 'Farklı video formatları deneyerek engagement oranını %30 artırma potansiyeli bulunuyor.',\n      category: 'creative',\n      priority: 'medium',\n      channel: 'tiktok_ads',\n      potentialImpact: 30,\n      estimatedROI: 2.9,\n      effort: 'medium',\n      status: 'completed',\n      dueDate: '2024-01-30'\n    },\n    {\n      id: 5,\n      title: 'Mobil Landing Page Optimizasyonu',\n      description: 'Mobil sayfa hızını iyileştirerek bounce rate\\'i %22 azaltabilir ve dönüşümleri artırabilirsiniz.',\n      category: 'conversion',\n      priority: 'high',\n      channel: 'website',\n      potentialImpact: 22,\n      estimatedROI: 5.1,\n      effort: 'high',\n      status: 'new',\n      dueDate: '2024-02-25'\n    }\n  ];\n\n  const actions = [\n    {\n      id: 1,\n      type: \"opportunity\",\n      title: \"Remarketing Kampanyanı Ölçeklendir\",\n      description: \"Sepet terk kampanyan 4.27x ROAS ile mükemmel performans gösteriyor. Bütçesini %50 artırarak daha fazla gelir elde edebilirsin.\",\n      priority: \"high\",\n      channel: \"meta_ads\",\n      estimatedImpact: \"+₺32,000 aylık gelir\",\n      dueDate: \"2024-02-10\",\n      assignedTo: null,\n      status: \"new\"\n    },\n    {\n      id: 2,\n      type: \"warning\",\n      title: \"Google Kampanyası Optimizasyona İhtiyaç Duyuyor\",\n      description: \"Marka farkındalık kampanyan düşük ROAS gösteriyor. Hedef kitle segmentasyonu ve teklif stratejisi gözden geçirilmeli.\",\n      priority: \"medium\",\n      channel: \"google_ads\",\n      estimatedImpact: \"+₺15,000 potansiyel tasarruf\",\n      dueDate: \"2024-02-15\",\n      assignedTo: { id: 1, name: \"Ahmet Kaya\" },\n      status: \"in_progress\"\n    },\n    {\n      id: 3,\n      type: \"insight\",\n      title: \"TikTok Kampanyası Umut Verici\",\n      description: \"Gen Z hedef kitlen TikTok'ta yüksek engagement gösteriyor. Test süresini uzatıp daha fazla kreatif ekleyebilirsin.\",\n      priority: \"low\",\n      channel: \"tiktok_ads\",\n      estimatedImpact: \"+₺8,000 potansiyel gelir\",\n      dueDate: \"2024-02-20\",\n      assignedTo: null,\n      status: \"new\"\n    },\n    {\n      id: 4,\n      type: \"opportunity\",\n      title: \"Email Automation Kurulumu\",\n      description: \"Hoş geldin email serisi kurarak yeni müşteri retention'ı %15 artırabilirsin.\",\n      priority: \"medium\",\n      channel: \"email\",\n      estimatedImpact: \"+₺12,000 potansiyel gelir\",\n      dueDate: \"2024-02-18\",\n      assignedTo: { id: 2, name: \"Zeynep Demir\" },\n      status: \"completed\"\n    }\n  ];\n\n  const getPriorityColor = (priority) => {\n    switch(priority) {\n      case 'high': return 'bg-red-500/20 text-red-400';\n      case 'medium': return 'bg-orange-500/20 text-orange-400';\n      case 'low': return 'bg-green-500/20 text-green-400';\n      default: return 'bg-gray-500/20 text-gray-400';\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch(status) {\n      case 'new': return 'bg-blue-500/20 text-blue-400';\n      case 'in_progress': return 'bg-orange-500/20 text-orange-400';\n      case 'completed': return 'bg-green-500/20 text-green-400';\n      default: return 'bg-gray-500/20 text-gray-400';\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch(status) {\n      case 'new': return <Lightbulb className=\"w-4 h-4\" />;\n      case 'in_progress': return <Clock className=\"w-4 h-4\" />;\n      case 'completed': return <CheckCircle className=\"w-4 h-4\" />;\n      default: return <Lightbulb className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getTypeColor = (type) => {\n    switch(type) {\n      case 'opportunity': return 'bg-green-500/20 text-green-400';\n      case 'warning': return 'bg-red-500/20 text-red-400';\n      case 'insight': return 'bg-blue-500/20 text-blue-400';\n      default: return 'bg-gray-500/20 text-gray-400';\n    }\n  };\n\n  const getCategoryName = (category) => {\n    const names = {\n      search: 'Arama',\n      audience: 'Kitle',\n      retention: 'Sadakat',\n      creative: 'Kreatif',\n      conversion: 'Dönüşüm'\n    };\n    return names[category] || category;\n  };\n\n  const getChannelName = (channel) => {\n    const names = {\n      google_ads: 'Google Ads',\n      meta_ads: 'Meta Ads',\n      tiktok_ads: 'TikTok Ads',\n      email: 'Email',\n      website: 'Website',\n      organic: 'Organik'\n    };\n    return names[channel] || channel;\n  };\n\n  const getEffortColor = (effort) => {\n    switch(effort) {\n      case 'low': return 'bg-green-500/20 text-green-400';\n      case 'medium': return 'bg-orange-500/20 text-orange-400';\n      case 'high': return 'bg-red-500/20 text-red-400';\n      default: return 'bg-gray-500/20 text-gray-400';\n    }\n  };\n\n  const handleAssignTask = (action) => {\n    setSelectedAction(action);\n    setAssignDialogOpen(true);\n  };\n\n  const filteredOpportunities = opportunities.filter(opp => {\n    if (priority !== 'all' && opp.priority !== priority) return false;\n    if (category !== 'all' && opp.category !== category) return false;\n    if (channel !== 'all' && opp.channel !== channel) return false;\n    return true;\n  });\n\n  const filteredActions = actions.filter(action => {\n    if (priority !== 'all' && action.priority !== priority) return false;\n    if (channel !== 'all' && action.channel !== channel) return false;\n    return true;\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-white mb-2\">Fırsatlar ve Aksiyonlar</h1>\n          <p className=\"text-slate-400\">AI destekli öneriler ve görev yönetimi</p>\n        </div>\n              \n              <div className=\"flex items-center gap-4\">\n                <Select value={priority} onValueChange={setPriority}>\n                  <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-300 w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-slate-800 border-slate-600\">\n                    <SelectItem value=\"all\">Tüm Öncelikler</SelectItem>\n                    <SelectItem value=\"high\">Yüksek</SelectItem>\n                    <SelectItem value=\"medium\">Orta</SelectItem>\n                    <SelectItem value=\"low\">Düşük</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Select value={channel} onValueChange={setChannel}>\n                  <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-300 w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-slate-800 border-slate-600\">\n                    <SelectItem value=\"all\">Tüm Kanallar</SelectItem>\n                    <SelectItem value=\"google_ads\">Google Ads</SelectItem>\n                    <SelectItem value=\"meta_ads\">Meta Ads</SelectItem>\n                    <SelectItem value=\"tiktok_ads\">TikTok Ads</SelectItem>\n                    <SelectItem value=\"email\">Email</SelectItem>\n                    <SelectItem value=\"website\">Website</SelectItem>\n                    <SelectItem value=\"organic\">Organik</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <Select value={category} onValueChange={setCategory}>\n                  <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-300 w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-slate-800 border-slate-600\">\n                    <SelectItem value=\"all\">Tüm Kategoriler</SelectItem>\n                    <SelectItem value=\"search\">Arama</SelectItem>\n                    <SelectItem value=\"audience\">Kitle</SelectItem>\n                    <SelectItem value=\"retention\">Sadakat</SelectItem>\n                    <SelectItem value=\"creative\">Kreatif</SelectItem>\n                    <SelectItem value=\"conversion\">Dönüşüm</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Summary Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              <Card className=\"bg-slate-800 border-slate-700\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-slate-400 text-sm\">Toplam Fırsat</p>\n                      <p className=\"text-2xl font-bold text-white\">{filteredOpportunities.length}</p>\n                    </div>\n                    <Lightbulb className=\"w-8 h-8 text-yellow-400\" />\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"bg-slate-800 border-slate-700\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-slate-400 text-sm\">Bekleyen Aksiyon</p>\n                      <p className=\"text-2xl font-bold text-white\">\n                        {filteredActions.filter(a => a.status === 'new').length}\n                      </p>\n                    </div>\n                    <Target className=\"w-8 h-8 text-red-400\" />\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"bg-slate-800 border-slate-700\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-slate-400 text-sm\">Ortalama ROI</p>\n                      <p className=\"text-2xl font-bold text-white\">\n                        {(filteredOpportunities.reduce((sum, o) => sum + o.estimatedROI, 0) / filteredOpportunities.length || 0).toFixed(1)}x\n                      </p>\n                    </div>\n                    <DollarSign className=\"w-8 h-8 text-green-400\" />\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"bg-slate-800 border-slate-700\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-slate-400 text-sm\">Atanmış Görev</p>\n                      <p className=\"text-2xl font-bold text-white\">\n                        {filteredActions.filter(a => a.assignedTo).length}\n                      </p>\n                    </div>\n                    <Users className=\"w-8 h-8 text-blue-400\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Tabs for Opportunities and Actions */}\n            <Tabs defaultValue=\"opportunities\" className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-2 bg-slate-800\">\n                <TabsTrigger value=\"opportunities\" className=\"data-[state=active]:bg-slate-700 data-[state=active]:text-white\">\n                  Büyüme Fırsatları\n                </TabsTrigger>\n                <TabsTrigger value=\"actions\" className=\"data-[state=active]:bg-slate-700 data-[state=active]:text-white\">\n                  Aksiyon Önerileri\n                </TabsTrigger>\n              </TabsList>\n\n              {/* Opportunities Tab */}\n              <TabsContent value=\"opportunities\">\n                <Card className=\"bg-slate-800 border-slate-700\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white\">Önerilen Fırsatlar</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-6\">\n                      {filteredOpportunities.map((opportunity) => (\n                        <div key={opportunity.id} className=\"bg-slate-700/50 rounded-lg p-6\">\n                          <div className=\"flex justify-between items-start mb-4\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-3 mb-2\">\n                                <h4 className=\"text-white font-semibold\">{opportunity.title}</h4>\n                                <Badge variant=\"secondary\" className={getPriorityColor(opportunity.priority)}>\n                                  {opportunity.priority === 'high' ? 'Yüksek' : \n                                   opportunity.priority === 'medium' ? 'Orta' : 'Düşük'}\n                                </Badge>\n                                <Badge variant=\"secondary\" className={getStatusColor(opportunity.status)}>\n                                  <div className=\"flex items-center gap-1\">\n                                    {getStatusIcon(opportunity.status)}\n                                    {opportunity.status === 'new' ? 'Yeni' : \n                                     opportunity.status === 'in_progress' ? 'Devam Ediyor' : 'Tamamlandı'}\n                                  </div>\n                                </Badge>\n                                <Badge variant=\"outline\" className=\"text-blue-400 border-blue-400\">\n                                  {getChannelName(opportunity.channel)}\n                                </Badge>\n                              </div>\n                              <p className=\"text-slate-300 mb-3\">{opportunity.description}</p>\n                            </div>\n                          </div>\n\n                          <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 mb-4\">\n                            <div>\n                              <span className=\"text-slate-400 text-sm\">Kategori:</span>\n                              <p className=\"text-white font-medium\">{getCategoryName(opportunity.category)}</p>\n                            </div>\n                            <div>\n                              <span className=\"text-slate-400 text-sm\">Potansiyel Etki:</span>\n                              <p className=\"text-green-400 font-medium\">+{opportunity.potentialImpact}%</p>\n                            </div>\n                            <div>\n                              <span className=\"text-slate-400 text-sm\">Beklenen ROI:</span>\n                              <p className=\"text-blue-400 font-medium\">{opportunity.estimatedROI}x</p>\n                            </div>\n                            <div>\n                              <span className=\"text-slate-400 text-sm\">Çaba Seviyesi:</span>\n                              <Badge variant=\"secondary\" className={getEffortColor(opportunity.effort)}>\n                                {opportunity.effort === 'low' ? 'Düşük' : \n                                 opportunity.effort === 'medium' ? 'Orta' : 'Yüksek'}\n                              </Badge>\n                            </div>\n                            <div>\n                              <span className=\"text-slate-400 text-sm\">Hedef Tarih:</span>\n                              <p className=\"text-white font-medium\">{opportunity.dueDate}</p>\n                            </div>\n                          </div>\n\n                          <div className=\"flex justify-between items-center\">\n                            <div className=\"flex gap-2\">\n                              {opportunity.status === 'new' && (\n                                <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700\">\n                                  <Play className=\"w-4 h-4 mr-1\" />\n                                  Uygula\n                                </Button>\n                              )}\n                              <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300\">\n                                Detaylar\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Actions Tab */}\n              <TabsContent value=\"actions\">\n                <Card className=\"bg-slate-800 border-slate-700\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white\">Aksiyon Önerileri</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-6\">\n                      {filteredActions.map((action) => (\n                        <div key={action.id} className=\"bg-slate-700/50 rounded-lg p-6\">\n                          <div className=\"flex justify-between items-start mb-4\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-3 mb-2\">\n                                <h4 className=\"text-white font-semibold\">{action.title}</h4>\n                                <Badge variant=\"secondary\" className={getTypeColor(action.type)}>\n                                  {action.type === 'opportunity' ? 'Fırsat' : \n                                   action.type === 'warning' ? 'Uyarı' : 'İçgörü'}\n                                </Badge>\n                                <Badge variant=\"secondary\" className={getPriorityColor(action.priority)}>\n                                  {action.priority === 'high' ? 'Yüksek' : \n                                   action.priority === 'medium' ? 'Orta' : 'Düşük'}\n                                </Badge>\n                                <Badge variant=\"outline\" className=\"text-blue-400 border-blue-400\">\n                                  {getChannelName(action.channel)}\n                                </Badge>\n                              </div>\n                              <p className=\"text-slate-300 mb-3\">{action.description}</p>\n                            </div>\n                          </div>\n\n                          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\n                            <div>\n                              <span className=\"text-slate-400 text-sm\">Tahmini Etki:</span>\n                              <p className=\"text-green-400 font-medium\">{action.estimatedImpact}</p>\n                            </div>\n                            <div>\n                              <span className=\"text-slate-400 text-sm\">Hedef Tarih:</span>\n                              <p className=\"text-white font-medium\">{action.dueDate}</p>\n                            </div>\n                            <div>\n                              <span className=\"text-slate-400 text-sm\">Durum:</span>\n                              <Badge variant=\"secondary\" className={getStatusColor(action.status)}>\n                                <div className=\"flex items-center gap-1\">\n                                  {getStatusIcon(action.status)}\n                                  {action.status === 'new' ? 'Yeni' : \n                                   action.status === 'in_progress' ? 'Devam Ediyor' : 'Tamamlandı'}\n                                </div>\n                              </Badge>\n                            </div>\n                            <div>\n                              <span className=\"text-slate-400 text-sm\">Atanan Kişi:</span>\n                              {action.assignedTo ? (\n                                <div className=\"flex items-center gap-2 mt-1\">\n                                  <Avatar className=\"h-5 w-5\">\n                                    <AvatarFallback className=\"text-xs\">\n                                      {action.assignedTo.name.charAt(0)}\n                                    </AvatarFallback>\n                                  </Avatar>\n                                  <span className=\"text-white text-sm\">{action.assignedTo.name}</span>\n                                </div>\n                              ) : (\n                                <p className=\"text-slate-400 font-medium\">Atanmamış</p>\n                              )}\n                            </div>\n                          </div>\n\n                          <div className=\"flex justify-between items-center\">\n                            <div className=\"flex gap-2\">\n                              {action.status === 'new' && (\n                                <Button size=\"sm\" className=\"bg-green-600 hover:bg-green-700\">\n                                  <Play className=\"w-4 h-4 mr-1\" />\n                                  Başlat\n                                </Button>\n                              )}\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\" \n                                className=\"border-slate-600 text-slate-300\"\n                                onClick={() => handleAssignTask(action)}\n                              >\n                                <Users className=\"w-4 h-4 mr-1\" />\n                                Görev Ata\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n\n      {/* Assign Task Dialog */}\n      <Dialog open={assignDialogOpen} onOpenChange={setAssignDialogOpen}>\n        <DialogContent className=\"bg-slate-800 border-slate-700\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white\">Görev Ata</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            {selectedAction && (\n              <div className=\"bg-slate-700/50 p-4 rounded-lg\">\n                <h4 className=\"text-white font-medium mb-2\">{selectedAction.title}</h4>\n                <p className=\"text-slate-300 text-sm\">{selectedAction.description}</p>\n              </div>\n            )}\n            \n            <div className=\"space-y-3\">\n              <label className=\"text-slate-300 text-sm font-medium\">Ekip Üyesi Seç:</label>\n              <div className=\"space-y-2\">\n                {teamMembers.map((member) => (\n                  <div\n                    key={member.id}\n                    className=\"flex items-center gap-3 p-3 bg-slate-700/30 rounded-lg hover:bg-slate-700/50 cursor-pointer\"\n                  >\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src={member.avatar} />\n                      <AvatarFallback>{member.name.charAt(0)}</AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <p className=\"text-white font-medium\">{member.name}</p>\n                      <p className=\"text-slate-400 text-sm\">{member.role}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setAssignDialogOpen(false)}\n                className=\"border-slate-600 text-slate-300\"\n              >\n                İptal\n              </Button>\n              <Button \n                className=\"bg-blue-600 hover:bg-blue-700\"\n                onClick={() => setAssignDialogOpen(false)}\n              >\n                Ata\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":26229},"client/src/pages/products.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { \n  Package, \n  TrendingUp, \n  AlertTriangle, \n  Star, \n  Filter, \n  Search,\n  Eye,\n  ShoppingCart,\n  Target,\n  Lightbulb,\n  Zap,\n  AlertCircle,\n  TrendingDown,\n  CheckCircle,\n  Users,\n  BarChart3,\n  DollarSign,\n  Trophy,\n  Link2 as Link\n} from \"lucide-react\";\n\ninterface Product {\n  id: number;\n  name: string;\n  sku: string;\n  category: string;\n  price: number;\n  salesCount: number;\n  revenue: number;\n  profit: number;\n  profitMargin: number;\n  stock: number;\n  performanceScore: number;\n  performanceGrade: 'A+' | 'A' | 'B+' | 'B' | 'C+' | 'C' | 'D';\n  image: string;\n  insights: ProductInsight[];\n}\n\ninterface ProductInsight {\n  type: 'champion' | 'bundle' | 'audience' | 'stock' | 'warning';\n  title: string;\n  description: string;\n  action?: string;\n  actionType?: 'campaign' | 'segment' | 'restock';\n}\n\nexport default function Products() {\n  const [sortBy, setSortBy] = useState('performanceScore');\n  const [filterCategory, setFilterCategory] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n\n  // Mock data\n  const overviewStats = {\n    totalProducts: 152,\n    totalRevenue: 1200000,\n    topCategory: 'Elektronik',\n    avgProfitMargin: 28\n  };\n\n  const categoryDistribution = [\n    { category: 'Elektronik', revenue: 450000, percentage: 37.5 },\n    { category: 'Giyim', revenue: 380000, percentage: 31.7 },\n    { category: 'Ev & Yaşam', revenue: 230000, percentage: 19.2 },\n    { category: 'Spor', revenue: 140000, percentage: 11.7 }\n  ];\n\n  const products: Product[] = [\n    {\n      id: 1,\n      name: 'Akıllı Telefon Model X',\n      sku: 'TEL-001',\n      category: 'Elektronik',\n      price: 8500,\n      salesCount: 89,\n      revenue: 756500,\n      profit: 302600,\n      profitMargin: 40,\n      stock: 23,\n      performanceScore: 92,\n      performanceGrade: 'A+',\n      image: '/api/placeholder/60/60',\n      insights: [\n        {\n          type: 'champion',\n          title: 'ŞAMPİYON ÜRÜN',\n          description: 'Bu ürün, son 30 günde en çok ciro getiren ilk 5 ürününüz arasında ve kârlılık marjı da ortalamanın %40 üzerinde. Bu ürünün stoklarını daima dolu tutun.',\n        },\n        {\n          type: 'bundle',\n          title: 'BİRLİKTE ALIM FIRSATI',\n          description: 'Bu ürünü alan müşterilerin %65\\'i, \\'Kablosuz Kulaklık Model Y\\' ürününü de satın alıyor. Bu iki ürünü bir paket (bundle) olarak %10 indirimle sunarak sepet ortalamasını artırabilirsiniz.',\n          action: 'Kampanya Oluştur',\n          actionType: 'campaign'\n        },\n        {\n          type: 'audience',\n          title: 'KİTLE EŞLEŞMESİ',\n          description: 'Bu ürün, özellikle \\'Yüksek LTV\\'li Müşteriler\\' segmentiniz tarafından tercih ediliyor. Bu segmente yönelik \\'Model X\\' odaklı bir e-posta kampanyası ile tekrar satış potansiyeli yüksek.',\n          action: 'Segmenti Gör',\n          actionType: 'segment'\n        },\n        {\n          type: 'stock',\n          title: 'STOK UYARISI',\n          description: 'Mevcut satış hızına göre stoklarınız 12 gün içinde tükenebilir. Tedarik sürecini başlatmanız önerilir.',\n          action: 'Tedarik Planla',\n          actionType: 'restock'\n        }\n      ]\n    },\n    {\n      id: 2,\n      name: 'Kablosuz Kulaklık Model Y',\n      sku: 'KUL-002',\n      category: 'Elektronik',\n      price: 450,\n      salesCount: 156,\n      revenue: 70200,\n      profit: 21060,\n      profitMargin: 30,\n      stock: 87,\n      performanceScore: 85,\n      performanceGrade: 'A',\n      image: '/api/placeholder/60/60',\n      insights: [\n        {\n          type: 'bundle',\n          title: 'POPÜLER İKİLİ',\n          description: 'Akıllı Telefon Model X ile sıklıkla birlikte satın alınıyor. Bundle kampanyalarında kullanılabilir.',\n        }\n      ]\n    },\n    {\n      id: 3,\n      name: 'Casual T-Shirt Beyaz',\n      sku: 'GIY-003',\n      category: 'Giyim',\n      price: 89,\n      salesCount: 234,\n      revenue: 20826,\n      profit: 6248,\n      profitMargin: 30,\n      stock: 145,\n      performanceScore: 72,\n      performanceGrade: 'B+',\n      image: '/api/placeholder/60/60',\n      insights: [\n        {\n          type: 'warning',\n          title: 'DÜŞÜK MARJ UYARISI',\n          description: 'Bu ürünün kârlılık marjı kategori ortalamasının altında. Maliyet optimizasyonu veya fiyat artışı değerlendirilebilir.',\n        }\n      ]\n    }\n  ];\n\n  const getPerformanceColor = (grade: string) => {\n    switch (grade) {\n      case 'A+': return 'bg-emerald-500/20 text-emerald-400 border-emerald-500/30';\n      case 'A': return 'bg-green-500/20 text-green-400 border-green-500/30';\n      case 'B+': case 'B': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';\n      case 'C+': case 'C': return 'bg-orange-500/20 text-orange-400 border-orange-500/30';\n      case 'D': return 'bg-red-500/20 text-red-400 border-red-500/30';\n      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n    }\n  };\n\n  const getInsightIcon = (type: string) => {\n    switch (type) {\n      case 'champion': return <Trophy className=\"w-4 h-4 text-yellow-400\" />;\n      case 'bundle': return <Link className=\"w-4 h-4 text-blue-400\" />;\n      case 'audience': return <Target className=\"w-4 h-4 text-purple-400\" />;\n      case 'stock': return <AlertCircle className=\"w-4 h-4 text-orange-400\" />;\n      case 'warning': return <AlertTriangle className=\"w-4 h-4 text-red-400\" />;\n      default: return <Lightbulb className=\"w-4 h-4 text-gray-400\" />;\n    }\n  };\n\n  const filteredProducts = products\n    .filter(product => \n      (filterCategory === 'all' || product.category === filterCategory) &&\n      (searchTerm === '' || product.name.toLowerCase().includes(searchTerm.toLowerCase()) || product.sku.toLowerCase().includes(searchTerm.toLowerCase()))\n    )\n    .sort((a, b) => {\n      switch (sortBy) {\n        case 'performanceScore': return b.performanceScore - a.performanceScore;\n        case 'revenue': return b.revenue - a.revenue;\n        case 'profit': return b.profit - a.profit;\n        case 'salesCount': return b.salesCount - a.salesCount;\n        default: return 0;\n      }\n    });\n\n  return (\n    <div className=\"space-y-6\">\n\n            {/* Header */}\n            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-white mb-2\">Ürün Performans Paneli</h1>\n                <p className=\"text-slate-400\">Ürünlerinizin ticari DNA'sını analiz edin ve pazarlama stratejilerinizi optimize edin</p>\n              </div>\n            </div>\n\n            {/* A. Genel Bakış Paneli */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card className=\"bg-slate-800 border-slate-700\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <Package className=\"w-8 h-8 text-blue-400\" />\n                  </div>\n                  <h4 className=\"text-slate-400 text-sm mb-2\">Toplam Aktif Ürün</h4>\n                  <p className=\"text-2xl font-bold text-white\">{overviewStats.totalProducts}</p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-slate-800 border-slate-700\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <TrendingUp className=\"w-8 h-8 text-green-400\" />\n                  </div>\n                  <h4 className=\"text-slate-400 text-sm mb-2\">Toplam Satış Hacmi (30 Gün)</h4>\n                  <p className=\"text-2xl font-bold text-white\">₺{(overviewStats.totalRevenue / 1000000).toFixed(1)}M</p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-slate-800 border-slate-700\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <Star className=\"w-8 h-8 text-purple-400\" />\n                  </div>\n                  <h4 className=\"text-slate-400 text-sm mb-2\">En Çok Satan Kategori</h4>\n                  <p className=\"text-2xl font-bold text-white\">{overviewStats.topCategory}</p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-slate-800 border-slate-700\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <TrendingUp className=\"w-8 h-8 text-yellow-400\" />\n                  </div>\n                  <h4 className=\"text-slate-400 text-sm mb-2\">Ortalama Kârlılık Marjı</h4>\n                  <p className=\"text-2xl font-bold text-white\">%{overviewStats.avgProfitMargin}</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Category Distribution Chart */}\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Kategorilere Göre Ciro Dağılımı</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {categoryDistribution.map((category) => (\n                    <div key={category.category} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n                        <span className=\"text-slate-300\">{category.category}</span>\n                      </div>\n                      <div className=\"flex items-center gap-4\">\n                        <span className=\"text-white font-medium\">₺{(category.revenue / 1000).toFixed(0)}K</span>\n                        <span className=\"text-slate-400\">%{category.percentage}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Aksiyon Önerileri */}\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Zap className=\"w-5 h-5 text-yellow-500\" />\n                  AI Aksiyon Önerileri\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {/* Yüksek Öncelikli Aksiyonlar */}\n                <div className=\"space-y-4 mb-6\">\n                  <h4 className=\"text-lg font-semibold text-white flex items-center\">\n                    <AlertCircle className=\"w-5 h-5 mr-2 text-red-400\" />\n                    Yüksek Öncelikli Aksiyonlar\n                  </h4>\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                    <Card className=\"bg-red-500/10 border border-red-500/20 hover:bg-red-500/20 cursor-pointer\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div className=\"flex items-center\">\n                            <div className=\"p-2 rounded-lg bg-slate-800/50 mr-3\">\n                              <AlertTriangle className=\"w-5 h-5 text-red-400\" />\n                            </div>\n                            <div>\n                              <h5 className=\"font-semibold text-white\">Stok Kritik Seviyede</h5>\n                              <p className=\"text-slate-400 text-sm\">15 ürün kritik stok seviyesinde</p>\n                            </div>\n                          </div>\n                        </div>\n                        <p className=\"text-slate-300 text-sm mb-3\">\n                          En çok satan ürünlerinizden 15'inin stoğu 10'un altına düştü. Acil stok takviyesi gerekli.\n                        </p>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-xs px-2 py-1 bg-red-500/20 text-red-400 rounded\">Yüksek Öncelik</span>\n                          <Button size=\"sm\" className=\"bg-slate-700 hover:bg-slate-600\">\n                            Stok Listesi\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    <Card className=\"bg-orange-500/10 border border-orange-500/20 hover:bg-orange-500/20 cursor-pointer\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div className=\"flex items-center\">\n                            <div className=\"p-2 rounded-lg bg-slate-800/50 mr-3\">\n                              <TrendingDown className=\"w-5 h-5 text-orange-400\" />\n                            </div>\n                            <div>\n                              <h5 className=\"font-semibold text-white\">Düşük Performanslı Ürünler</h5>\n                              <p className=\"text-slate-400 text-sm\">23 ürün son 30 günde hiç satılmadı</p>\n                            </div>\n                          </div>\n                        </div>\n                        <p className=\"text-slate-300 text-sm mb-3\">\n                          Stokta bulunan ancak satış performansı düşük ürünler için indirim kampanyası düzenleyin.\n                        </p>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-xs px-2 py-1 bg-orange-500/20 text-orange-400 rounded\">Yüksek Öncelik</span>\n                          <Button size=\"sm\" className=\"bg-slate-700 hover:bg-slate-600\">\n                            Kampanya Öner\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n\n                {/* Diğer Öneriler */}\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-lg font-semibold text-white flex items-center\">\n                    <CheckCircle className=\"w-5 h-5 mr-2 text-green-400\" />\n                    Fırsat Önerileri\n                  </h4>\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4\">\n                    <Card className=\"bg-slate-800 border-slate-700 hover:bg-slate-700/50 cursor-pointer\">\n                      <CardContent className=\"p-5\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div className=\"flex items-center\">\n                            <div className=\"p-2 rounded-lg bg-slate-700 mr-3\">\n                              <Star className=\"w-5 h-5 text-yellow-400\" />\n                            </div>\n                            <div>\n                              <h6 className=\"font-medium text-white\">Şampiyon Ürün Promosyonu</h6>\n                              <p className=\"text-slate-400 text-xs\">En çok satan 5 ürününüz</p>\n                            </div>\n                          </div>\n                        </div>\n                        <p className=\"text-slate-300 text-sm mb-3\">\n                          En yüksek performanslı ürünlerinizi öne çıkaran özel bir vitrin oluşturun.\n                        </p>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-xs px-2 py-1 bg-green-500/20 text-green-400 rounded\">+₺45K gelir</span>\n                          <Button size=\"sm\" variant=\"outline\" className=\"bg-slate-700 border-slate-600\">\n                            Detaylar\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    <Card className=\"bg-slate-800 border-slate-700 hover:bg-slate-700/50 cursor-pointer\">\n                      <CardContent className=\"p-5\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div className=\"flex items-center\">\n                            <div className=\"p-2 rounded-lg bg-slate-700 mr-3\">\n                              <Users className=\"w-5 h-5 text-blue-400\" />\n                            </div>\n                            <div>\n                              <h6 className=\"font-medium text-white\">Cross-Sell Fırsatları</h6>\n                              <p className=\"text-slate-400 text-xs\">Birlikte satılabilir ürünler</p>\n                            </div>\n                          </div>\n                        </div>\n                        <p className=\"text-slate-300 text-sm mb-3\">\n                          Müşterilerin sıkça birlikte aldığı ürün kombinasyonlarını analiz edin.\n                        </p>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-xs px-2 py-1 bg-blue-500/20 text-blue-400 rounded\">+%15 AOV</span>\n                          <Button size=\"sm\" variant=\"outline\" className=\"bg-slate-700 border-slate-600\">\n                            Analiz Et\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    <Card className=\"bg-slate-800 border-slate-700 hover:bg-slate-700/50 cursor-pointer\">\n                      <CardContent className=\"p-5\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div className=\"flex items-center\">\n                            <div className=\"p-2 rounded-lg bg-slate-700 mr-3\">\n                              <Target className=\"w-5 h-5 text-purple-400\" />\n                            </div>\n                            <div>\n                              <h6 className=\"font-medium text-white\">Fiyat Optimizasyonu</h6>\n                              <p className=\"text-slate-400 text-xs\">Karlılık artırma fırsatı</p>\n                            </div>\n                          </div>\n                        </div>\n                        <p className=\"text-slate-300 text-sm mb-3\">\n                          AI ile talep analizi yaparak optimal fiyatlandırma önerileri alın.\n                        </p>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-xs px-2 py-1 bg-purple-500/20 text-purple-400 rounded\">+%8 kâr</span>\n                          <Button size=\"sm\" variant=\"outline\" className=\"bg-slate-700 border-slate-600\">\n                            Hesapla\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* B. Akıllı Ürün Grid'i */}\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n                  <CardTitle className=\"text-white\">Ürün Performans Listesi</CardTitle>\n\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400\" />\n                      <Input\n                        placeholder=\"Ürün ara...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-10 bg-slate-700 border-slate-600 text-slate-300 w-48\"\n                      />\n                    </div>\n\n                    <Select value={filterCategory} onValueChange={setFilterCategory}>\n                      <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-300 w-32\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-slate-800 border-slate-600\">\n                        <SelectItem value=\"all\">Tüm Kategoriler</SelectItem>\n                        <SelectItem value=\"Elektronik\">Elektronik</SelectItem>\n                        <SelectItem value=\"Giyim\">Giyim</SelectItem>\n                        <SelectItem value=\"Ev & Yaşam\">Ev & Yaşam</SelectItem>\n                        <SelectItem value=\"Spor\">Spor</SelectItem>\n                      </SelectContent>\n                    </Select>\n\n                    <Select value={sortBy} onValueChange={setSortBy}>\n                      <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-300 w-40\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-slate-800 border-slate-600\">\n                        <SelectItem value=\"performanceScore\">Performans Skoru</SelectItem>\n                        <SelectItem value=\"revenue\">Ciro</SelectItem>\n                        <SelectItem value=\"profit\">Kâr</SelectItem>\n                        <SelectItem value=\"salesCount\">Satış Adedi</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b border-slate-700\">\n                        <th className=\"text-left py-3 px-4 text-slate-400 font-medium\">Ürün</th>\n                        <th className=\"text-left py-3 px-4 text-slate-400 font-medium\">Kategori</th>\n                        <th className=\"text-left py-3 px-4 text-slate-400 font-medium\">Fiyat</th>\n                        <th className=\"text-left py-3 px-4 text-slate-400 font-medium\">Satış (30g)</th>\n                        <th className=\"text-left py-3 px-4 text-slate-400 font-medium\">Ciro</th>\n                        <th className=\"text-left py-3 px-4 text-slate-400 font-medium\">Kârlılık</th>\n                        <th className=\"text-left py-3 px-4 text-slate-400 font-medium\">Stok</th>\n                        <th className=\"text-left py-3 px-4 text-slate-400 font-medium\">Performans</th>\n                        <th className=\"text-left py-3 px-4 text-slate-400 font-medium\">İşlemler</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {filteredProducts.map((product) => (\n                        <tr key={product.id} className=\"border-b border-slate-700/50 hover:bg-slate-700/30\">\n                          <td className=\"py-4 px-4\">\n                            <div className=\"flex items-center gap-3\">\n                              <div className=\"w-12 h-12 bg-slate-600 rounded-lg flex items-center justify-center\">\n                                <Package className=\"w-6 h-6 text-slate-400\" />\n                              </div>\n                              <div>\n                                <p className=\"text-white font-medium\">{product.name}</p>\n                                <p className=\"text-slate-400 text-sm\">{product.sku}</p>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <Badge variant=\"secondary\" className=\"bg-slate-700 text-slate-300\">\n                              {product.category}\n                            </Badge>\n                          </td>\n                          <td className=\"py-4 px-4 text-white\">₺{product.price.toLocaleString()}</td>\n                          <td className=\"py-4 px-4 text-white\">{product.salesCount}</td>\n                          <td className=\"py-4 px-4 text-white\">₺{product.revenue.toLocaleString()}</td>\n                          <td className=\"py-4 px-4\">\n                            <div className=\"text-green-400\">₺{product.profit.toLocaleString()}</div>\n                            <div className=\"text-slate-400 text-sm\">%{product.profitMargin}</div>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <span className={`${product.stock < 30 ? 'text-orange-400' : 'text-white'}`}>\n                              {product.stock}\n                            </span>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <Badge className={getPerformanceColor(product.performanceGrade)}>\n                              {product.performanceGrade} ({product.performanceScore}/100)\n                            </Badge>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <Dialog>\n                              <DialogTrigger asChild>\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"outline\" \n                                  className=\"border-slate-600 text-slate-300 hover:bg-slate-700\"\n                                  onClick={() => setSelectedProduct(product)}\n                                >\n                                  <Eye className=\"w-4 h-4\" />\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent className=\"bg-slate-800 border-slate-700 text-slate-300 max-w-2xl\">\n                                <DialogHeader>\n                                  <DialogTitle className=\"text-white\">\n                                    {product.name}\n                                  </DialogTitle>\n                                </DialogHeader>\n\n                                {selectedProduct && (\n                                  <div className=\"space-y-6\">\n                                    {/* Performans Özeti */}\n                                    <div className=\"grid grid-cols-2 gap-4\">\n                                      <div className=\"bg-slate-700/50 p-4 rounded-lg\">\n                                        <h4 className=\"text-slate-400 text-sm mb-1\">Performans Skoru</h4>\n                                        <div className=\"flex items-center gap-2\">\n                                          <Badge className={getPerformanceColor(selectedProduct.performanceGrade)}>\n                                            {selectedProduct.performanceGrade}\n                                          </Badge>\n                                          <span className=\"text-white font-bold\">({selectedProduct.performanceScore}/100)</span>\n                                        </div>\n                                      </div>\n                                      <div className=\"bg-slate-700/50 p-4 rounded-lg\">\n                                        <h4 className=\"text-slate-400 text-sm mb-1\">Son 30 Gün Kâr</h4>\n                                        <p className=\"text-green-400 font-bold text-lg\">₺{selectedProduct.profit.toLocaleString()}</p>\n                                      </div>\n                                    </div>\n\n                                    {/* AI İçgörüleri */}\n                                    <div>\n                                      <h3 className=\"text-white font-semibold mb-4 flex items-center gap-2\">\n                                        <Lightbulb className=\"w-5 h-5 text-yellow-400\" />\n                                        AI İçgörüleri\n                                      </h3>\n\n                                      <div className=\"space-y-4\">\n                                        {selectedProduct.insights.map((insight, index) => (\n                                          <div key={index} className=\"bg-slate-700/30 p-4 rounded-lg border border-slate-600\">\n                                            <div className=\"flex items-start gap-3\">\n                                              {getInsightIcon(insight.type)}\n                                              <div className=\"flex-1\">\n                                                <h4 className=\"text-white font-medium mb-2\">{insight.title}</h4>\n                                                <p className=\"text-slate-300 text-sm mb-3\">{insight.description}</p>\n                                                {insight.action && (\n                                                  <Button \n                                                    size=\"sm\" \n                                                    className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                                                  >\n                                                    {insight.action}\n                                                  </Button>\n                                                )}\n                                              </div>\n                                            </div>\n                                          </div>\n                                        ))}\n                                      </div>\n                                    </div>\n                                  </div>\n                                )}\n                              </DialogContent>\n                            </Dialog>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n\n    </div>\n  );\n}","size_bytes":30283},"client/src/pages/profitability.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  DollarSign, TrendingUp, TrendingDown, Target, Package, Users, BarChart3, \n  LineChart, Filter, ArrowUpDown, Calendar, Eye, Heart, ShoppingBag, \n  Clock, MapPin, Smartphone, Monitor, ArrowRight\n} from \"lucide-react\";\nimport AIChatPanel from \"@/components/ai-chat-panel\";\nimport { LineChart as RechartsLineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\n\nexport default function Profitability() {\n  const [timeRange, setTimeRange] = useState('30d');\n  const [selectedChannel, setSelectedChannel] = useState('all');\n  const [sortBy, setSortBy] = useState('profit');\n  const [sortOrder, setSortOrder] = useState('desc');\n  const [showComparison, setShowComparison] = useState(false);\n  const [comparisonPeriod, setComparisonPeriod] = useState('previous');\n\n  const profitabilityMetrics = [\n    { title: 'Net Kar (Cebine Kalan)', value: '₺95,670', change: '+12.5%', trend: 'up', color: 'green' },\n    { title: 'Brüt Kar', value: '₺220,450', change: '+8.3%', trend: 'up', color: 'blue' },\n    { title: 'Kar Marjı', value: '%21.2', change: '+1.8%', trend: 'up', color: 'purple' },\n    { title: 'ROAS', value: '4.2x', change: '+0.3x', trend: 'up', color: 'orange' }\n  ];\n\n  const profitabilityTrendData = [\n    { date: '1 Oca', netProfit: 82500, grossProfit: 198000, revenue: 425000 },\n    { date: '8 Oca', netProfit: 87200, grossProfit: 205600, revenue: 445000 },\n    { date: '15 Oca', netProfit: 91800, grossProfit: 215400, revenue: 465000 },\n    { date: '22 Oca', netProfit: 89400, grossProfit: 208800, revenue: 452000 },\n    { date: '29 Oca', netProfit: 95670, grossProfit: 220450, revenue: 485000 },\n  ];\n\n  const channelOptions = [\n    { value: 'all', label: 'Tüm Kanallar' },\n    { value: 'google', label: 'Google Ads' },\n    { value: 'meta', label: 'Meta Ads' },\n    { value: 'tiktok', label: 'TikTok Ads' },\n    { value: 'email', label: 'Email Marketing' },\n    { value: 'organic', label: 'Organik Trafik' }\n  ];\n\n  const channelProfitability = [\n    { channel: 'Google Ads', revenue: 185420, cost: 45230, profit: 140190, margin: 75.6, roas: 4.1, ltv: 485, orders: 1250 },\n    { channel: 'Meta Ads', revenue: 156780, cost: 38950, profit: 117830, margin: 75.2, roas: 4.0, ltv: 420, orders: 980 },\n    { channel: 'TikTok Ads', revenue: 98650, cost: 28340, profit: 70310, margin: 71.3, roas: 3.5, ltv: 380, orders: 650 },\n    { channel: 'Email', revenue: 45230, cost: 2850, profit: 42380, margin: 93.7, roas: 15.9, ltv: 650, orders: 320 },\n    { channel: 'Organik', revenue: 78950, cost: 0, profit: 78950, margin: 100, roas: Infinity, ltv: 580, orders: 420 }\n  ];\n\n  const productProfitabilityData = [\n    { product: 'Yüksek Bel Siyah Bikini', revenue: 125670, cost: 44085, profit: 81585, margin: 64.9, units: 1250, ltv: 385, roas: 2.8 },\n    { product: 'Tropikal Desenli Tek Parça', revenue: 98450, cost: 41350, profit: 57100, margin: 58.0, units: 985, ltv: 420, roas: 2.4 },\n    { product: 'Beyaz Crop Top', revenue: 87390, cost: 61173, profit: 26217, margin: 30.0, units: 720, ltv: 290, roas: 1.4 },\n    { product: 'Leopar Desenli Bikini', revenue: 156780, cost: 94068, profit: 62712, margin: 40.0, units: 1890, ltv: 340, roas: 1.7 }\n  ];\n\n  const audienceAnalysisData = [\n    { \n      segment: '25-34 Kadın, İstanbul', \n      revenue: 186750, \n      cost: 45850, \n      profit: 140900, \n      ltv: 485, \n      cac: 118,\n      orders: 1250,\n      avgOrderValue: 149,\n      repeatRate: 68,\n      demographics: { age: '25-34', gender: 'Kadın', location: 'İstanbul', device: 'Mobile %75' },\n      interests: ['Moda', 'Güzellik', 'Lifestyle'],\n      behaviors: ['Akşam 19-22 arası aktif', 'Instagram Stories yüksek etkileşim', 'Hafta sonu satın alma']\n    },\n    { \n      segment: '35-44 Kadın, Ankara', \n      revenue: 145620, \n      cost: 38950, \n      profit: 106670, \n      ltv: 420, \n      cac: 102,\n      orders: 980,\n      avgOrderValue: 149,\n      repeatRate: 72,\n      demographics: { age: '35-44', gender: 'Kadın', location: 'Ankara', device: 'Desktop %60' },\n      interests: ['Kalite', 'Sürdürülebilirlik', 'Aile'],\n      behaviors: ['Öğle 12-14 arası aktif', 'Email kampanyalarına yüksek yanıt', 'Planlı alışveriş']\n    },\n    { \n      segment: '18-24 Kadın, İzmir', \n      revenue: 98750, \n      cost: 28340, \n      profit: 70410, \n      ltv: 290, \n      cac: 89,\n      orders: 650,\n      avgOrderValue: 152,\n      repeatRate: 45,\n      demographics: { age: '18-24', gender: 'Kadın', location: 'İzmir', device: 'Mobile %85' },\n      interests: ['Trend', 'Social Media', 'Müzik'],\n      behaviors: ['Gece 21-24 arası aktif', 'TikTok yüksek etkileşim', 'İmpuls alışveriş']\n    },\n    { \n      segment: '25-44 Kadın, Diğer', \n      revenue: 76890, \n      cost: 19850, \n      profit: 57040, \n      ltv: 380, \n      cac: 96,\n      orders: 420,\n      avgOrderValue: 183,\n      repeatRate: 58,\n      demographics: { age: '25-44', gender: 'Kadın', location: 'Diğer Şehirler', device: 'Mixed' },\n      interests: ['Pratiklik', 'Değer', 'Konfor'],\n      behaviors: ['Hafta içi aktif', 'Google araması yoğun', 'Karşılaştırmalı alışveriş']\n    }\n  ];\n\n  const channelProfitData = channelProfitability.map(channel => ({\n    name: channel.channel,\n    value: channel.profit,\n    percentage: ((channel.profit / channelProfitability.reduce((sum, c) => sum + c.profit, 0)) * 100).toFixed(1)\n  }));\n\n  const COLORS = ['#10B981', '#3B82F6', '#F59E0B', '#8B5CF6', '#EF4444'];\n\n  const sortedProducts = [...productProfitabilityData].sort((a, b) => {\n    const aValue = a[sortBy as keyof typeof a] as number;\n    const bValue = b[sortBy as keyof typeof b] as number;\n    return sortOrder === 'desc' ? bValue - aValue : aValue - bValue;\n  });\n\n  const sortedAudiences = [...audienceAnalysisData].sort((a, b) => {\n    const aValue = a[sortBy as keyof typeof a] as number;\n    const bValue = b[sortBy as keyof typeof b] as number;\n    return sortOrder === 'desc' ? bValue - aValue : aValue - bValue;\n  });\n\n  return (\n    <div className=\"space-y-6\">\n            \n            {/* Header with Advanced Filters */}\n            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-white mb-2\">Karlılık Analizi</h1>\n                <p className=\"text-slate-400\">Kanal, ürün ve hedef kitle bazında derinlemesine karlılık analizi</p>\n              </div>\n              \n              <div className=\"flex flex-wrap items-center gap-3\">\n                <Select value={selectedChannel} onValueChange={setSelectedChannel}>\n                  <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-300 w-40\">\n                    <Filter className=\"w-4 h-4 mr-2\" />\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-slate-800 border-slate-600\">\n                    {channelOptions.map(option => (\n                      <SelectItem key={option.value} value={option.value}>{option.label}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                <Select value={timeRange} onValueChange={setTimeRange}>\n                  <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-300 w-32\">\n                    <Calendar className=\"w-4 h-4 mr-2\" />\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-slate-800 border-slate-600\">\n                    <SelectItem value=\"7d\">Son 7 gün</SelectItem>\n                    <SelectItem value=\"30d\">Son 30 gün</SelectItem>\n                    <SelectItem value=\"90d\">Son 90 gün</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <div className=\"flex items-center space-x-2 bg-slate-800 px-3 py-2 rounded-md border border-slate-600\">\n                  <Switch \n                    id=\"comparison\" \n                    checked={showComparison}\n                    onCheckedChange={setShowComparison}\n                  />\n                  <Label htmlFor=\"comparison\" className=\"text-sm text-slate-300\">Karşılaştır</Label>\n                </div>\n              </div>\n            </div>\n\n            {/* KPI Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {profitabilityMetrics.map((metric, index) => (\n                <Card key={index} className=\"bg-slate-800 border-slate-700\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className={`w-12 h-12 bg-${metric.color}-500/20 rounded-xl flex items-center justify-center`}>\n                        <DollarSign className={`w-6 h-6 text-${metric.color}-500`} />\n                      </div>\n                      <Badge \n                        variant=\"secondary\" \n                        className={`${metric.trend === 'up' ? 'bg-green-500/20 text-green-500' : 'bg-red-500/20 text-red-500'}`}\n                      >\n                        {metric.change}\n                      </Badge>\n                    </div>\n                    <h4 className=\"text-slate-400 text-sm mb-2\">{metric.title}</h4>\n                    <p className=\"text-2xl font-bold text-white\">{metric.value}</p>\n                    {showComparison && (\n                      <p className=\"text-sm text-slate-400 mt-1\">Önceki döneme göre</p>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Profitability Trend Chart */}\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <LineChart className=\"w-5 h-5\" />\n                  Karlılık Trendi\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <RechartsLineChart data={profitabilityTrendData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                      <XAxis dataKey=\"date\" stroke=\"#9CA3AF\" />\n                      <YAxis stroke=\"#9CA3AF\" />\n                      <Tooltip \n                        contentStyle={{ \n                          backgroundColor: '#1F2937', \n                          border: '1px solid #374151',\n                          borderRadius: '8px',\n                          color: '#F3F4F6'\n                        }} \n                      />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"netProfit\" \n                        stroke=\"#10B981\" \n                        strokeWidth={3}\n                        name=\"Net Kar\"\n                      />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"grossProfit\" \n                        stroke=\"#3B82F6\" \n                        strokeWidth={2}\n                        name=\"Brüt Kar\"\n                      />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"revenue\" \n                        stroke=\"#8B5CF6\" \n                        strokeWidth={2}\n                        name=\"Gelir\"\n                      />\n                    </RechartsLineChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Channel Profitability Overview */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <Card className=\"bg-slate-800 border-slate-700 lg:col-span-2\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <BarChart3 className=\"w-5 h-5\" />\n                    Kanal Karlılığı\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead>\n                        <tr className=\"border-b border-slate-700\">\n                          <th className=\"text-left py-3 px-4 text-slate-300\">Kanal</th>\n                          <th className=\"text-right py-3 px-4 text-slate-300\">Gelir</th>\n                          <th className=\"text-right py-3 px-4 text-slate-300\">Kar</th>\n                          <th className=\"text-right py-3 px-4 text-slate-300\">LTV</th>\n                          <th className=\"text-right py-3 px-4 text-slate-300\">ROAS</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {channelProfitability.map((channel, index) => (\n                          <tr key={index} className=\"border-b border-slate-700/50\">\n                            <td className=\"py-3 px-4 text-white font-medium\">{channel.channel}</td>\n                            <td className=\"text-right py-3 px-4 text-white\">₺{channel.revenue.toLocaleString()}</td>\n                            <td className=\"text-right py-3 px-4 text-green-400 font-medium\">₺{channel.profit.toLocaleString()}</td>\n                            <td className=\"text-right py-3 px-4 text-blue-400\">₺{channel.ltv}</td>\n                            <td className=\"text-right py-3 px-4 text-purple-400 font-medium\">\n                              {channel.roas === Infinity ? '∞' : `${channel.roas.toFixed(1)}x`}\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-slate-800 border-slate-700\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <Target className=\"w-5 h-5\" />\n                    Kar Dağılımı\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-64\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <PieChart>\n                        <Pie\n                          data={channelProfitData}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          innerRadius={60}\n                          outerRadius={100}\n                          paddingAngle={5}\n                          dataKey=\"value\"\n                        >\n                          {channelProfitData.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                          ))}\n                        </Pie>\n                        <Tooltip\n                          contentStyle={{ \n                            backgroundColor: '#1F2937', \n                            border: '1px solid #374151',\n                            borderRadius: '8px',\n                            color: '#F3F4F6'\n                          }}\n                        />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  </div>\n                  <div className=\"space-y-2 mt-4\">\n                    {channelProfitData.map((item, index) => (\n                      <div key={index} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div \n                            className=\"w-3 h-3 rounded-full\" \n                            style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                          />\n                          <span className=\"text-sm text-slate-300\">{item.name}</span>\n                        </div>\n                        <span className=\"text-sm text-white font-medium\">{item.percentage}%</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Advanced Analysis Tabs */}\n            <Tabs defaultValue=\"products\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2 bg-slate-800\">\n                <TabsTrigger value=\"products\" className=\"data-[state=active]:bg-slate-700\">\n                  <Package className=\"w-4 h-4 mr-2\" />\n                  Ürün Analizi\n                </TabsTrigger>\n                <TabsTrigger value=\"audience\" className=\"data-[state=active]:bg-slate-700\">\n                  <Users className=\"w-4 h-4 mr-2\" />\n                  Hedef Kitle Analizi\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"products\" className=\"space-y-6\">\n                <Card className=\"bg-slate-800 border-slate-700\">\n                  <CardHeader>\n                    <div className=\"flex justify-between items-center\">\n                      <CardTitle className=\"text-white flex items-center gap-2\">\n                        <Package className=\"w-5 h-5\" />\n                        Ürün Karlılığı Detayı\n                      </CardTitle>\n                      <div className=\"flex items-center gap-2\">\n                        <Select value={sortBy} onValueChange={setSortBy}>\n                          <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-300 w-36\">\n                            <ArrowUpDown className=\"w-4 h-4 mr-2\" />\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-slate-800 border-slate-600\">\n                            <SelectItem value=\"profit\">Kar</SelectItem>\n                            <SelectItem value=\"margin\">Marj</SelectItem>\n                            <SelectItem value=\"revenue\">Gelir</SelectItem>\n                            <SelectItem value=\"ltv\">LTV</SelectItem>\n                            <SelectItem value=\"roas\">ROAS</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setSortOrder(sortOrder === 'desc' ? 'asc' : 'desc')}\n                          className=\"text-slate-300 hover:text-white\"\n                        >\n                          {sortOrder === 'desc' ? <TrendingDown className=\"w-4 h-4\" /> : <TrendingUp className=\"w-4 h-4\" />}\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {sortedProducts.map((product, index) => (\n                        <div key={index} className=\"bg-slate-700/50 rounded-lg p-6\">\n                          <div className=\"flex justify-between items-center mb-4\">\n                            <h4 className=\"text-white font-medium text-lg\">{product.product}</h4>\n                            <div className=\"flex gap-2\">\n                              <Badge variant=\"secondary\" className=\"bg-green-500/20 text-green-400\">\n                                %{product.margin} Marj\n                              </Badge>\n                              <Badge variant=\"secondary\" className=\"bg-blue-500/20 text-blue-400\">\n                                {product.roas.toFixed(1)}x ROAS\n                              </Badge>\n                            </div>\n                          </div>\n                          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                            <div className=\"space-y-1\">\n                              <span className=\"text-slate-400\">Gelir</span>\n                              <div className=\"text-white font-medium\">₺{product.revenue.toLocaleString()}</div>\n                            </div>\n                            <div className=\"space-y-1\">\n                              <span className=\"text-slate-400\">Net Kar</span>\n                              <div className=\"text-green-400 font-medium\">₺{product.profit.toLocaleString()}</div>\n                            </div>\n                            <div className=\"space-y-1\">\n                              <span className=\"text-slate-400\">LTV</span>\n                              <div className=\"text-blue-400 font-medium\">₺{product.ltv}</div>\n                            </div>\n                            <div className=\"space-y-1\">\n                              <span className=\"text-slate-400\">Satılan Birim</span>\n                              <div className=\"text-white font-medium\">{product.units.toLocaleString()}</div>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"audience\" className=\"space-y-6\">\n                <Card className=\"bg-slate-800 border-slate-700\">\n                  <CardHeader>\n                    <div className=\"flex justify-between items-center\">\n                      <CardTitle className=\"text-white flex items-center gap-2\">\n                        <Users className=\"w-5 h-5\" />\n                        Derinlemesine Hedef Kitle Analizi\n                      </CardTitle>\n                      <div className=\"flex items-center gap-2\">\n                        <Select value={sortBy} onValueChange={setSortBy}>\n                          <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-300 w-36\">\n                            <ArrowUpDown className=\"w-4 h-4 mr-2\" />\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-slate-800 border-slate-600\">\n                            <SelectItem value=\"profit\">Kar</SelectItem>\n                            <SelectItem value=\"ltv\">LTV</SelectItem>\n                            <SelectItem value=\"repeatRate\">Tekrar Oranı</SelectItem>\n                            <SelectItem value=\"avgOrderValue\">Ort. Sepet</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setSortOrder(sortOrder === 'desc' ? 'asc' : 'desc')}\n                          className=\"text-slate-300 hover:text-white\"\n                        >\n                          {sortOrder === 'desc' ? <TrendingDown className=\"w-4 h-4\" /> : <TrendingUp className=\"w-4 h-4\" />}\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-6\">\n                      {sortedAudiences.map((audience, index) => (\n                        <div key={index} className=\"bg-slate-700/50 rounded-lg p-6\">\n                          <div className=\"flex justify-between items-start mb-4\">\n                            <div>\n                              <h4 className=\"text-white font-medium text-lg mb-2\">{audience.segment}</h4>\n                              <div className=\"flex items-center gap-4 text-sm text-slate-300\">\n                                <span className=\"flex items-center gap-1\">\n                                  <MapPin className=\"w-4 h-4\" />\n                                  {audience.demographics.location}\n                                </span>\n                                <span className=\"flex items-center gap-1\">\n                                  <Clock className=\"w-4 h-4\" />\n                                  {audience.demographics.age}\n                                </span>\n                                <span className=\"flex items-center gap-1\">\n                                  {audience.demographics.device.includes('Mobile') ? <Smartphone className=\"w-4 h-4\" /> : <Monitor className=\"w-4 h-4\" />}\n                                  {audience.demographics.device}\n                                </span>\n                              </div>\n                            </div>\n                            <div className=\"flex gap-2\">\n                              <Badge variant=\"secondary\" className=\"bg-purple-500/20 text-purple-400\">\n                                LTV/CAC: {(audience.ltv / audience.cac).toFixed(1)}x\n                              </Badge>\n                              <Badge variant=\"secondary\" className=\"bg-green-500/20 text-green-400\">\n                                %{audience.repeatRate} Tekrar\n                              </Badge>\n                            </div>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\n                            <div className=\"space-y-1\">\n                              <span className=\"text-slate-400\">Net Kar</span>\n                              <div className=\"text-green-400 font-medium\">₺{audience.profit.toLocaleString()}</div>\n                            </div>\n                            <div className=\"space-y-1\">\n                              <span className=\"text-slate-400\">LTV</span>\n                              <div className=\"text-blue-400 font-medium\">₺{audience.ltv}</div>\n                            </div>\n                            <div className=\"space-y-1\">\n                              <span className=\"text-slate-400\">CAC</span>\n                              <div className=\"text-orange-400 font-medium\">₺{audience.cac}</div>\n                            </div>\n                            <div className=\"space-y-1\">\n                              <span className=\"text-slate-400\">Ort. Sepet</span>\n                              <div className=\"text-white font-medium\">₺{audience.avgOrderValue}</div>\n                            </div>\n                          </div>\n\n                          <div className=\"border-t border-slate-600 pt-4\">\n                            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                              <div>\n                                <h5 className=\"text-slate-300 font-medium mb-2 flex items-center gap-1\">\n                                  <Heart className=\"w-4 h-4\" />\n                                  İlgi Alanları\n                                </h5>\n                                <div className=\"flex flex-wrap gap-1\">\n                                  {audience.interests.map((interest, i) => (\n                                    <Badge key={i} variant=\"secondary\" className=\"bg-blue-500/20 text-blue-300 text-xs\">\n                                      {interest}\n                                    </Badge>\n                                  ))}\n                                </div>\n                              </div>\n                              <div className=\"md:col-span-2\">\n                                <h5 className=\"text-slate-300 font-medium mb-2 flex items-center gap-1\">\n                                  <Eye className=\"w-4 h-4\" />\n                                  Davranış Kalıpları\n                                </h5>\n                                <div className=\"space-y-1\">\n                                  {audience.behaviors.map((behavior, i) => (\n                                    <div key={i} className=\"text-sm text-slate-400\">• {behavior}</div>\n                                  ))}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n\n            {/* AI Chat Panel */}\n            <AIChatPanel \n              pageContext=\"Karlılık Analizi\"\n              insights={[\n                {\n                  id: '1',\n                  type: 'success',\n                  title: 'Net kar marjı hedefin üzerinde!',\n                  description: 'Bu ayki net kar marjınız %21.2 ile hedeflediğiniz %18\\'in üzerinde gerçekleşti.',\n                  action: 'Detayları görüntüle',\n                  icon: TrendingUp\n                },\n                {\n                  id: '2',\n                  type: 'opportunity',\n                  title: 'Email Marketing potansiyeli',\n                  description: 'Email marketing %93.7 kar marjı ile en karlı kanal. Bütçe artırımı öneririz.',\n                  action: 'Bütçe planla',\n                  icon: Target\n                },\n                {\n                  id: '3',\n                  type: 'warning',\n                  title: 'TikTok Ads maliyeti yükseliyor',\n                  description: 'TikTok\\'ta CAC artışı var. Kreatif testleri artırarak performansı iyileştirin.',\n                  action: 'Optimizasyon önerileri',\n                  icon: Target\n                }\n              ]}\n              suggestions={[\n                'En karlı ürünleri analiz et',\n                'Kanal karlılığı karşılaştır',\n                'LTV/CAC oranı nasıl iyileştirilebilir?',\n                'Hedef kitle segmentasyonu öner'\n              ]}\n            />\n\n    </div>\n  );\n}\n","size_bytes":30184},"client/src/pages/reports.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, Download, Calendar, TrendingUp, BarChart3, PieChart, Users, DollarSign } from \"lucide-react\";\n\nexport default function Reports() {\n  const [reportType, setReportType] = useState('all');\n  const [timeRange, setTimeRange] = useState('30d');\n\n  const reports = [\n    {\n      id: 1,\n      title: 'Aylık Performans Raporu',\n      type: 'performance',\n      generatedDate: '2024-01-15',\n      status: 'ready',\n      description: 'Tüm kanallar için aylık performans özeti',\n      fileSize: '2.4 MB',\n      format: 'PDF'\n    },\n    {\n      id: 2,\n      title: 'Kanal Karlılık Analizi',\n      type: 'profitability',\n      generatedDate: '2024-01-14',\n      status: 'ready',\n      description: 'Kanal bazında karlılık ve ROI analizi',\n      fileSize: '1.8 MB',\n      format: 'Excel'\n    },\n    {\n      id: 3,\n      title: 'Müşteri Segmentasyon Raporu',\n      type: 'audience',\n      generatedDate: '2024-01-13',\n      status: 'generating',\n      description: 'Müşteri segmentleri ve davranış analizi',\n      fileSize: '-',\n      format: 'PDF'\n    },\n    {\n      id: 4,\n      title: 'Kreatif Performans Raporu',\n      type: 'creative',\n      generatedDate: '2024-01-12',\n      status: 'ready',\n      description: 'Reklam kreatiflerinin performans analizi',\n      fileSize: '3.1 MB',\n      format: 'PDF'\n    }\n  ];\n\n  const reportTemplates = [\n    { name: 'Haftalık Özet', description: 'Haftalık performans ve önemli metrikler', icon: BarChart3 },\n    { name: 'Aylık Dashboard', description: 'Aylık kapsamlı performans raporu', icon: PieChart },\n    { name: 'Kitle Analizi', description: 'Hedef kitle davranış ve demografik analizi', icon: Users },\n    { name: 'ROI Raporu', description: 'Yatırım getirisi ve karlılık analizi', icon: DollarSign }\n  ];\n\n  const getStatusColor = (status) => {\n    switch(status) {\n      case 'ready': return 'bg-green-500/20 text-green-400';\n      case 'generating': return 'bg-orange-500/20 text-orange-400';\n      case 'failed': return 'bg-red-500/20 text-red-400';\n      default: return 'bg-gray-500/20 text-gray-400';\n    }\n  };\n\n  const getTypeColor = (type) => {\n    const colors = {\n      performance: 'bg-blue-500/20 text-blue-400',\n      profitability: 'bg-green-500/20 text-green-400',\n      audience: 'bg-purple-500/20 text-purple-400',\n      creative: 'bg-pink-500/20 text-pink-400'\n    };\n    return colors[type] || 'bg-gray-500/20 text-gray-400';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n            \n            {/* Header */}\n            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-white mb-2\">Raporlar</h1>\n                <p className=\"text-slate-400\">Performans raporlarınızı oluşturun ve indirin</p>\n              </div>\n              \n              <div className=\"flex items-center gap-4\">\n                <Select value={reportType} onValueChange={setReportType}>\n                  <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-300 w-40\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-slate-800 border-slate-600\">\n                    <SelectItem value=\"all\">Tüm Raporlar</SelectItem>\n                    <SelectItem value=\"performance\">Performans</SelectItem>\n                    <SelectItem value=\"profitability\">Karlılık</SelectItem>\n                    <SelectItem value=\"audience\">Kitle</SelectItem>\n                    <SelectItem value=\"creative\">Kreatif</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  Yeni Rapor Oluştur\n                </Button>\n              </div>\n            </div>\n\n            {/* Report Templates */}\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Hızlı Rapor Şablonları</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  {reportTemplates.map((template, index) => (\n                    <div key={index} className=\"bg-slate-700/50 rounded-lg p-4 cursor-pointer hover:bg-slate-700/70 transition-colors\">\n                      <div className=\"flex items-center gap-3 mb-3\">\n                        <template.icon className=\"w-6 h-6 text-blue-400\" />\n                        <h4 className=\"text-white font-medium\">{template.name}</h4>\n                      </div>\n                      <p className=\"text-slate-400 text-sm mb-4\">{template.description}</p>\n                      <Button size=\"sm\" className=\"w-full bg-blue-600 hover:bg-blue-700\">\n                        Oluştur\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Generated Reports */}\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Oluşturulan Raporlar</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {reports.map((report) => (\n                    <div key={report.id} className=\"bg-slate-700/50 rounded-lg p-4\">\n                      <div className=\"flex justify-between items-start mb-3\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-3 mb-2\">\n                            <h4 className=\"text-white font-medium\">{report.title}</h4>\n                            <Badge variant=\"secondary\" className={getTypeColor(report.type)}>\n                              {report.type}\n                            </Badge>\n                            <Badge variant=\"secondary\" className={getStatusColor(report.status)}>\n                              {report.status === 'ready' ? 'Hazır' : \n                               report.status === 'generating' ? 'Oluşturuluyor' : 'Hata'}\n                            </Badge>\n                          </div>\n                          <p className=\"text-slate-400 text-sm\">{report.description}</p>\n                        </div>\n                        \n                        <div className=\"flex items-center gap-2\">\n                          {report.status === 'ready' && (\n                            <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300\">\n                              <Download className=\"w-4 h-4 mr-2\" />\n                              İndir\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-slate-400\">Oluşturulma:</span>\n                          <span className=\"text-white ml-2\">{report.generatedDate}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-slate-400\">Format:</span>\n                          <span className=\"text-white ml-2\">{report.format}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-slate-400\">Boyut:</span>\n                          <span className=\"text-white ml-2\">{report.fileSize}</span>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n    </div>\n  );\n}\n","size_bytes":8136},"client/src/pages/scenarios.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { PlayCircle, TrendingUp, DollarSign, Target, BarChart3, Plus } from \"lucide-react\";\n\nexport default function Scenarios() {\n  const scenarios = [\n    {\n      id: 1,\n      title: 'Bütçe %20 Artırım Senaryosu',\n      description: 'Mevcut bütçeyi %20 artırırsak nasıl bir performans artışı bekleyebiliriz?',\n      status: 'active',\n      budgetChange: 20,\n      expectedROAS: 4.2,\n      expectedRevenue: 185600,\n      confidence: 85\n    },\n    {\n      id: 2,\n      title: 'Yeni Platform Ekleme (TikTok)',\n      description: 'TikTok Ads platformunu eklersek toplam performansa etkisi nasıl olur?',\n      status: 'draft',\n      budgetChange: 15,\n      expectedROAS: 3.8,\n      expectedRevenue: 142300,\n      confidence: 72\n    },\n    {\n      id: 3,\n      title: 'Seasonality Optimizasyonu',\n      description: 'Sezonsal dönemlerde bütçe dağılımını optimize edersek sonuçlar nasıl olur?',\n      status: 'completed',\n      budgetChange: 0,\n      expectedROAS: 4.6,\n      expectedRevenue: 203400,\n      confidence: 91\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n            \n            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-white mb-2\">Senaryo Analizi</h1>\n                <p className=\"text-slate-400\">Farklı stratejileri test edin ve sonuçları öngörün</p>\n              </div>\n              \n              <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Yeni Senaryo\n              </Button>\n            </div>\n\n            <div className=\"space-y-6\">\n              {scenarios.map((scenario) => (\n                <Card key={scenario.id} className=\"bg-slate-800 border-slate-700\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex justify-between items-start mb-4\">\n                      <div>\n                        <h3 className=\"text-white font-semibold text-lg mb-2\">{scenario.title}</h3>\n                        <p className=\"text-slate-400\">{scenario.description}</p>\n                      </div>\n                      <Badge variant=\"secondary\" className={`${\n                        scenario.status === 'active' ? 'bg-green-500/20 text-green-400' :\n                        scenario.status === 'draft' ? 'bg-orange-500/20 text-orange-400' :\n                        'bg-blue-500/20 text-blue-400'\n                      }`}>\n                        {scenario.status === 'active' ? 'Aktif' : \n                         scenario.status === 'draft' ? 'Taslak' : 'Tamamlandı'}\n                      </Badge>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                      <div className=\"bg-slate-700/50 rounded-lg p-4\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <Target className=\"w-5 h-5 text-blue-400\" />\n                          <span className=\"text-slate-400 text-sm\">Bütçe Değişimi</span>\n                        </div>\n                        <p className=\"text-white text-xl font-bold\">+{scenario.budgetChange}%</p>\n                      </div>\n                      \n                      <div className=\"bg-slate-700/50 rounded-lg p-4\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <TrendingUp className=\"w-5 h-5 text-green-400\" />\n                          <span className=\"text-slate-400 text-sm\">Beklenen ROAS</span>\n                        </div>\n                        <p className=\"text-white text-xl font-bold\">{scenario.expectedROAS}x</p>\n                      </div>\n                      \n                      <div className=\"bg-slate-700/50 rounded-lg p-4\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <DollarSign className=\"w-5 h-5 text-purple-400\" />\n                          <span className=\"text-slate-400 text-sm\">Beklenen Gelir</span>\n                        </div>\n                        <p className=\"text-white text-xl font-bold\">₺{scenario.expectedRevenue.toLocaleString()}</p>\n                      </div>\n                      \n                      <div className=\"bg-slate-700/50 rounded-lg p-4\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <BarChart3 className=\"w-5 h-5 text-orange-400\" />\n                          <span className=\"text-slate-400 text-sm\">Güvenilirlik</span>\n                        </div>\n                        <p className=\"text-white text-xl font-bold\">{scenario.confidence}%</p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex gap-4 mt-6\">\n                      <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700\">\n                        <PlayCircle className=\"w-4 h-4 mr-2\" />\n                        Senaryoyu Çalıştır\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300\">\n                        Düzenle\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n    </div>\n  );\n}\n","size_bytes":5669},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { type User as UserType } from \"@shared/schema\";\nimport { \n  User, \n  Building, \n  Link, \n  CheckCircle, \n  X, \n  Loader2,\n  Settings as SettingsIcon,\n  Zap,\n  Globe\n} from \"lucide-react\";\n\ninterface BrandProfile {\n  businessModel?: string;\n  industry?: string;\n  customerType?: string;\n  brandMaturity?: string;\n  companySize?: string;\n  marketingGoal?: string;\n  websiteUrl?: string;\n  monthlyRevenue?: string;\n  monthlyAdBudget?: string;\n  mainCompetitors?: string;\n  targetAudienceDescription?: string;\n  brandVoice?: string;\n}\n\ninterface PlatformConnection {\n  platform: string;\n  isConnected: boolean;\n  accountName?: string;\n  lastSyncAt?: string;\n}\n\nexport default function Settings() {\n  const { user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [profileData, setProfileData] = useState<BrandProfile>({});\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !user) {\n      const isTestMode = window.location.search.includes('test=true');\n      if (!isTestMode) {\n        toast({\n          title: \"Giriş Gerekli\",\n          description: \"Lütfen giriş yapın veya test modunu deneyin\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/?test=true\";\n        }, 1000);\n      }\n    }\n  }, [user, authLoading, toast]);\n\n  const { data: brandProfile, isLoading: profileLoading } = useQuery({\n    queryKey: ['/api/brand-profile'],\n    enabled: !!user,\n  });\n\n  const { data: connections } = useQuery({\n    queryKey: ['/api/connections'],\n    enabled: !!user,\n  });\n\n  const profileMutation = useMutation({\n    mutationFn: async (data: BrandProfile) => {\n      const response = await apiRequest('POST', '/api/brand-profile', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Brand profile updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/brand-profile'] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update brand profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (brandProfile) {\n      setProfileData(brandProfile);\n    }\n  }, [brandProfile]);\n\n  const handleSave = () => {\n    profileMutation.mutate(profileData);\n  };\n\n  const handleInputChange = (field: keyof BrandProfile, value: string) => {\n    setProfileData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleConnectPlatform = async (platformId: string) => {\n    try {\n      if (!user) return;\n      \n      const userId = (user as UserType).id;\n      let authUrl = '';\n      const baseUrl = window.location.origin;\n      \n      switch (platformId) {\n        case 'shopify':\n          const shopName = prompt('Shopify mağaza adınızı girin (örn: mystore):');\n          if (!shopName) return;\n          authUrl = `https://${shopName}.myshopify.com/admin/oauth/authorize?client_id=${import.meta.env.VITE_SHOPIFY_API_KEY}&scope=read_orders,read_products,read_analytics&redirect_uri=${baseUrl}/api/shopify/callback&state=${userId}`;\n          break;\n        case 'google_ads':\n          authUrl = `https://accounts.google.com/oauth2/auth?client_id=${import.meta.env.VITE_GOOGLE_CLIENT_ID}&redirect_uri=${baseUrl}/api/google/callback&scope=https://www.googleapis.com/auth/adwords&response_type=code&state=${userId}`;\n          break;\n        case 'meta':\n          authUrl = `https://www.facebook.com/v18.0/dialog/oauth?client_id=${import.meta.env.VITE_META_APP_ID}&redirect_uri=${baseUrl}/api/meta/callback&scope=ads_management,ads_read&response_type=code&state=${userId}`;\n          break;\n        case 'google_analytics':\n          authUrl = `https://accounts.google.com/oauth2/auth?client_id=${import.meta.env.VITE_GOOGLE_CLIENT_ID}&redirect_uri=${baseUrl}/api/analytics/callback&scope=https://www.googleapis.com/auth/analytics.readonly&response_type=code&state=${userId}`;\n          break;\n        case 'tiktok':\n          authUrl = `https://business-api.tiktok.com/portal/auth?app_id=${import.meta.env.VITE_TIKTOK_APP_ID}&redirect_uri=${baseUrl}/api/tiktok/callback&scope=user_info:basic,ad_management:read&state=${userId}`;\n          break;\n        case 'google_search_console':\n          authUrl = `https://accounts.google.com/oauth2/auth?client_id=${import.meta.env.VITE_GOOGLE_CLIENT_ID}&redirect_uri=${baseUrl}/api/search-console/callback&scope=https://www.googleapis.com/auth/webmasters.readonly&response_type=code&state=${userId}`;\n          break;\n        default:\n          toast({\n            title: \"Hata\",\n            description: \"Bu platform henüz desteklenmiyor\",\n            variant: \"destructive\",\n          });\n          return;\n      }\n\n      toast({\n        title: \"Yönlendiriliyor\",\n        description: `${platforms.find(p => p.id === platformId)?.name} OAuth sayfasına yönlendiriliyorsunuz`,\n      });\n\n      // OAuth sayfasına yönlendir\n      window.location.href = authUrl;\n      \n    } catch (error) {\n      toast({\n        title: \"Hata\",\n        description: \"Platform bağlantısı başarısız\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDisconnectPlatform = async (platformId: string) => {\n    try {\n      await apiRequest('POST', '/api/platforms/disconnect', { platform: platformId });\n      \n      toast({\n        title: \"Başarılı\",\n        description: \"Platform bağlantısı kesildi\",\n      });\n      \n      queryClient.invalidateQueries({ queryKey: ['/api/connections'] });\n    } catch (error) {\n      toast({\n        title: \"Hata\",\n        description: \"Platform bağlantısı kesilemedi\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (authLoading || profileLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 flex items-center justify-center\">\n        <div className=\"text-white text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null; // Will redirect in useEffect\n  }\n\n  const platformIcons: Record<string, React.ReactNode> = {\n    shopify: <Building className=\"w-5 h-5\" />,\n    meta: <Zap className=\"w-5 h-5\" />,\n    google_ads: <Globe className=\"w-5 h-5\" />,\n    google_analytics: <Globe className=\"w-5 h-5\" />,\n    google_search_console: <Globe className=\"w-5 h-5\" />,\n    tiktok: <User className=\"w-5 h-5\" />,\n  };\n\n  const platforms = [\n    { id: 'shopify', name: 'Shopify', description: 'E-ticaret platformu bağlantısı' },\n    { id: 'meta', name: 'Meta Ads', description: 'Facebook ve Instagram reklamları' },\n    { id: 'google_ads', name: 'Google Ads', description: 'Google reklam kampanyaları' },\n    { id: 'google_analytics', name: 'Google Analytics', description: 'Website analizi ve trafik verileri' },\n    { id: 'google_search_console', name: 'Google Search Console', description: 'Arama motoru optimizasyonu verileri' },\n    { id: 'tiktok', name: 'TikTok Ads', description: 'TikTok reklam platformu' },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n\n            {/* User Profile */}\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-white\">\n                  <User className=\"w-5 h-5\" />\n                  Kullanıcı Profili\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center gap-4\">\n                  <img\n                    src={(user as UserType)?.profileImageUrl || \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=60&h=60\"}\n                    alt=\"Profile\"\n                    className=\"w-16 h-16 rounded-full object-cover\"\n                  />\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-white\">\n                      {(user as UserType)?.firstName} {(user as UserType)?.lastName}\n                    </h3>\n                    <p className=\"text-slate-400\">{(user as UserType)?.email}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Platform Connections */}\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-white\">\n                  <Link className=\"w-5 h-5\" />\n                  Platform Bağlantıları\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {platforms.map((platform) => {\n                    const connection = (connections as PlatformConnection[])?.find((c: PlatformConnection) => c.platform === platform.id);\n                    const isConnected = connection?.isConnected || false;\n\n                    return (\n                      <Card key={platform.id} className=\"bg-slate-700 border-slate-600\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center gap-3\">\n                              {platformIcons[platform.id]}\n                              <div>\n                                <h4 className=\"font-semibold text-white capitalize\">\n                                  {platform.name}\n                                </h4>\n                                {connection?.accountName && (\n                                  <p className=\"text-sm text-slate-400\">\n                                    {connection.accountName}\n                                  </p>\n                                )}\n                              </div>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              {isConnected ? (\n                                <>\n                                  <Badge variant=\"secondary\" className=\"bg-green-500/20 text-green-500\">\n                                    <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                    Bağlı\n                                  </Badge>\n                                  <Button \n                                    size=\"sm\" \n                                    variant=\"outline\" \n                                    className=\"border-slate-600 text-slate-300\"\n                                    onClick={() => handleDisconnectPlatform(platform.id)}\n                                  >\n                                    <X className=\"w-4 h-4\" />\n                                  </Button>\n                                </>\n                              ) : (\n                                <Button \n                                  size=\"sm\" \n                                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                                  onClick={() => handleConnectPlatform(platform.id)}\n                                >\n                                  Bağla\n                                </Button>\n                              )}\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Brand Profile */}\n            <Card className=\"bg-slate-800 border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-white\">\n                  <Building className=\"w-5 h-5\" />\n                  Marka Profili\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      İş Modeli\n                    </label>\n                    <Select\n                      value={profileData.businessModel || ''}\n                      onValueChange={(value) => handleInputChange('businessModel', value)}\n                    >\n                      <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-300\">\n                        <SelectValue placeholder=\"Seçiniz\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-slate-700 border-slate-600\">\n                        <SelectItem value=\"E-Ticaret\">E-Ticaret</SelectItem>\n                        <SelectItem value=\"SaaS\">SaaS</SelectItem>\n                        <SelectItem value=\"Hizmet Sağlayıcı\">Hizmet Sağlayıcı</SelectItem>\n                        <SelectItem value=\"Mobil Uygulama\">Mobil Uygulama</SelectItem>\n                        <SelectItem value=\"İçerik Yayıncısı\">İçerik Yayıncısı</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Sektör\n                    </label>\n                    <Select\n                      value={profileData.industry || ''}\n                      onValueChange={(value) => handleInputChange('industry', value)}\n                    >\n                      <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-300\">\n                        <SelectValue placeholder=\"Seçiniz\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-slate-700 border-slate-600\">\n                        <SelectItem value=\"Moda & Giyim\">Moda & Giyim</SelectItem>\n                        <SelectItem value=\"Sağlık & Wellness\">Sağlık & Wellness</SelectItem>\n                        <SelectItem value=\"Teknoloji & Yazılım\">Teknoloji & Yazılım</SelectItem>\n                        <SelectItem value=\"Finans & Sigorta\">Finans & Sigorta</SelectItem>\n                        <SelectItem value=\"Yiyecek & İçecek\">Yiyecek & İçecek</SelectItem>\n                        <SelectItem value=\"Eğitim\">Eğitim</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Müşteri Tipi\n                    </label>\n                    <Select\n                      value={profileData.customerType || ''}\n                      onValueChange={(value) => handleInputChange('customerType', value)}\n                    >\n                      <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-300\">\n                        <SelectValue placeholder=\"Seçiniz\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-slate-700 border-slate-600\">\n                        <SelectItem value=\"B2C\">B2C</SelectItem>\n                        <SelectItem value=\"B2B\">B2B</SelectItem>\n                        <SelectItem value=\"Her ikisi de\">Her ikisi de</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Şirket Büyüklüğü\n                    </label>\n                    <Select\n                      value={profileData.companySize || ''}\n                      onValueChange={(value) => handleInputChange('companySize', value)}\n                    >\n                      <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-300\">\n                        <SelectValue placeholder=\"Seçiniz\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-slate-700 border-slate-600\">\n                        <SelectItem value=\"Tek Kişilik\">Tek Kişilik</SelectItem>\n                        <SelectItem value=\"2-10\">2-10</SelectItem>\n                        <SelectItem value=\"11-50\">11-50</SelectItem>\n                        <SelectItem value=\"51-200\">51-200</SelectItem>\n                        <SelectItem value=\"200+\">200+</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                    Website URL\n                  </label>\n                  <Input\n                    placeholder=\"https://yourwebsite.com\"\n                    value={profileData.websiteUrl || ''}\n                    onChange={(e) => handleInputChange('websiteUrl', e.target.value)}\n                    className=\"bg-slate-700 border-slate-600 text-slate-300\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Aylık Gelir\n                    </label>\n                    <Select\n                      value={profileData.monthlyRevenue || ''}\n                      onValueChange={(value) => handleInputChange('monthlyRevenue', value)}\n                    >\n                      <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-300\">\n                        <SelectValue placeholder=\"Seçiniz\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-slate-700 border-slate-600\">\n                        <SelectItem value=\"0 - 50K\">0 - 50K</SelectItem>\n                        <SelectItem value=\"50K - 250K\">50K - 250K</SelectItem>\n                        <SelectItem value=\"250K - 1M\">250K - 1M</SelectItem>\n                        <SelectItem value=\"1M - 5M\">1M - 5M</SelectItem>\n                        <SelectItem value=\"5M+\">5M+</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Aylık Reklam Bütçesi\n                    </label>\n                    <Select\n                      value={profileData.monthlyAdBudget || ''}\n                      onValueChange={(value) => handleInputChange('monthlyAdBudget', value)}\n                    >\n                      <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-300\">\n                        <SelectValue placeholder=\"Seçiniz\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-slate-700 border-slate-600\">\n                        <SelectItem value=\"0 - 5K\">0 - 5K</SelectItem>\n                        <SelectItem value=\"5K - 25K\">5K - 25K</SelectItem>\n                        <SelectItem value=\"25K - 100K\">25K - 100K</SelectItem>\n                        <SelectItem value=\"100K - 500K\">100K - 500K</SelectItem>\n                        <SelectItem value=\"500K+\">500K+</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                    Ana Rakipler\n                  </label>\n                  <Textarea\n                    placeholder=\"Rakip firma isimlerini virgülle ayırarak yazın\"\n                    value={profileData.mainCompetitors || ''}\n                    onChange={(e) => handleInputChange('mainCompetitors', e.target.value)}\n                    className=\"bg-slate-700 border-slate-600 text-slate-300\"\n                    rows={3}\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                    Hedef Kitle Tanımı\n                  </label>\n                  <Textarea\n                    placeholder=\"Hedef kitlenizi detaylı olarak tanımlayın\"\n                    value={profileData.targetAudienceDescription || ''}\n                    onChange={(e) => handleInputChange('targetAudienceDescription', e.target.value)}\n                    className=\"bg-slate-700 border-slate-600 text-slate-300\"\n                    rows={4}\n                  />\n                </div>\n\n                <Button \n                  onClick={handleSave}\n                  disabled={profileMutation.isPending}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  {profileMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Kaydediliyor...\n                    </>\n                  ) : (\n                    'Değişiklikleri Kaydet'\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n    </div>\n  );\n}","size_bytes":22119},"client/src/pages/strategy.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { \n  Target, Plus, TrendingUp, DollarSign, Users, \n  CheckCircle, Clock, ArrowRight, Sparkles, Brain,\n  BarChart3, PieChart, PlayCircle, Zap, Activity,\n  ShoppingCart, Eye, MousePointer, Instagram, Globe,\n  MessageCircle, Calendar, Settings, FileText\n} from \"lucide-react\";\n\ninterface StrategyCard {\n  id: string;\n  title: string;\n  kpi: string;\n  currentValue: number;\n  targetValue: number;\n  unit: string;\n  progress: number;\n  timeframe: 'short' | 'medium' | 'long';\n  icon: string;\n  color: string;\n}\n\ninterface ActionSuggestion {\n  id: string;\n  title: string;\n  description: string;\n  type: 'content' | 'automation' | 'analysis';\n  icon: string;\n  aiPowered: boolean;\n}\n\nexport default function Strategy() {\n  const [selectedAccount, setSelectedAccount] = useState('instagram-main');\n  const [selectedCard, setSelectedCard] = useState<StrategyCard | null>(null);\n  const [strategyCards, setStrategyCards] = useState<StrategyCard[]>([\n    {\n      id: '1',\n      title: 'Takipçi Artışı',\n      kpi: 'Takipçi Sayısı',\n      currentValue: 10000,\n      targetValue: 11500,\n      unit: 'takipçi',\n      progress: 60,\n      timeframe: 'short',\n      icon: 'Users',\n      color: 'bg-blue-500'\n    },\n    {\n      id: '2',\n      title: 'Etkileşim Oranı',\n      kpi: 'Engagement Rate',\n      currentValue: 2.1,\n      targetValue: 3.0,\n      unit: '%',\n      progress: 45,\n      timeframe: 'short',\n      icon: 'MessageCircle',\n      color: 'bg-green-500'\n    },\n    {\n      id: '3',\n      title: 'Marka Bilinirliği',\n      kpi: 'Marka Aramaları',\n      currentValue: 250,\n      targetValue: 300,\n      unit: 'arama/ay',\n      progress: 10,\n      timeframe: 'medium',\n      icon: 'Eye',\n      color: 'bg-purple-500'\n    },\n    {\n      id: '4',\n      title: 'Web Sitesi Trafiği',\n      kpi: 'Sosyal Medya Trafiği',\n      currentValue: 1200,\n      targetValue: 1500,\n      unit: 'ziyaret/ay',\n      progress: 30,\n      timeframe: 'medium',\n      icon: 'Globe',\n      color: 'bg-orange-500'\n    },\n    {\n      id: '5',\n      title: 'Topluluk Oluşturma',\n      kpi: 'Discord Üyeleri',\n      currentValue: 0,\n      targetValue: 1000,\n      unit: 'üye',\n      progress: 0,\n      timeframe: 'long',\n      icon: 'Users',\n      color: 'bg-red-500'\n    }\n  ]);\n\n  const accounts = [\n    { id: 'instagram-main', name: 'Instagram - @kullaniciadi', platform: 'Instagram', icon: 'Instagram' },\n    { id: 'google-ads-x', name: 'Google Ads - Proje X', platform: 'Google Ads', icon: 'Globe' },\n    { id: 'meta-ads-main', name: 'Meta Ads - Ana Hesap', platform: 'Meta', icon: 'Target' },\n    { id: 'tiktok-brand', name: 'TikTok - Marka Hesabı', platform: 'TikTok', icon: 'PlayCircle' }\n  ];\n\n  const timeframes = {\n    short: { title: 'Kısa Vade', subtitle: 'Bu Çeyrek' },\n    medium: { title: 'Orta Vade', subtitle: 'Sonraki Çeyrek' },\n    long: { title: 'Uzun Vade', subtitle: 'Yıl Sonu' }\n  };\n\n  const actionSuggestions: { [key: string]: ActionSuggestion[] } = {\n    '1': [\n      {\n        id: 'content-1',\n        title: 'İçerik Önerisi',\n        description: 'Rakiplerinizin en çok etkileşim alan son 5 Reel içeriğini analiz ederek size özel 3 yeni Reel fikri oluşturun.',\n        type: 'content',\n        icon: 'FileText',\n        aiPowered: true\n      },\n      {\n        id: 'automation-1',\n        title: 'Etkileşim Otomasyonu',\n        description: '#pazarlama etiketindeki son 1 saatte paylaşılmış en popüler 10 gönderiye sizin adınıza yorum yapın.',\n        type: 'automation',\n        icon: 'Zap',\n        aiPowered: true\n      },\n      {\n        id: 'analysis-1',\n        title: 'Analiz',\n        description: 'Takipçi artış hızınızın en yüksek olduğu gün ve saatleri analiz edin.',\n        type: 'analysis',\n        icon: 'BarChart3',\n        aiPowered: false\n      }\n    ],\n    '2': [\n      {\n        id: 'content-2',\n        title: 'Hikaye Stratejisi',\n        description: 'Etkileşimi artıracak soru-cevap, anket ve quiz içerikleri oluşturun.',\n        type: 'content',\n        icon: 'MessageCircle',\n        aiPowered: true\n      },\n      {\n        id: 'automation-2',\n        title: 'Otomatik Yanıt',\n        description: 'Yorumlara otomatik teşekkür mesajları ve etkileşim artırıcı sorular gönder.',\n        type: 'automation',\n        icon: 'Zap',\n        aiPowered: true\n      }\n    ]\n  };\n\n  const getIcon = (iconName: string) => {\n    const icons: { [key: string]: any } = {\n      Users, MessageCircle, Eye, Globe, Instagram, Target, PlayCircle,\n      FileText, Zap, BarChart3, Plus, Settings, Brain, Sparkles\n    };\n    return icons[iconName] || Target;\n  };\n\n  const handleCardClick = (card: StrategyCard) => {\n    setSelectedCard(card);\n  };\n\n  const addNewCard = (timeframe: 'short' | 'medium' | 'long') => {\n    const newCard: StrategyCard = {\n      id: Date.now().toString(),\n      title: 'Yeni Hedef',\n      kpi: 'KPI Seçin',\n      currentValue: 0,\n      targetValue: 100,\n      unit: 'birim',\n      progress: 0,\n      timeframe,\n      icon: 'Target',\n      color: 'bg-gray-500'\n    };\n    setStrategyCards([...strategyCards, newCard]);\n  };\n\n  const renderStrategyCard = (card: StrategyCard) => {\n    const Icon = getIcon(card.icon);\n    return (\n      <Card \n        key={card.id}\n        className={`cursor-pointer transition-all duration-200 hover:shadow-md ${\n          selectedCard?.id === card.id ? 'ring-2 ring-blue-500' : ''\n        }`}\n        onClick={() => handleCardClick(card)}\n      >\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center gap-2\">\n            <div className={`w-8 h-8 rounded-full ${card.color} flex items-center justify-center`}>\n              <Icon className=\"w-4 h-4 text-white\" />\n            </div>\n            <CardTitle className=\"text-sm font-medium\">{card.title}</CardTitle>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"text-xs text-slate-600\">{card.kpi}</div>\n          <div className=\"flex items-end gap-1\">\n            <span className=\"text-lg font-bold\">\n              {card.currentValue.toLocaleString()}\n            </span>\n            <span className=\"text-xs text-slate-500\">\n              / {card.targetValue.toLocaleString()} {card.unit}\n            </span>\n          </div>\n          <Progress value={card.progress} className=\"h-2\" />\n          <div className=\"text-xs text-slate-500\">%{card.progress} tamamlandı</div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const renderActionPanel = () => {\n    if (!selectedCard) {\n      return (\n        <div className=\"text-center text-slate-500 py-8\">\n          <Target className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n          <p>Aksiyon önerilerini görmek için bir hedef seçin</p>\n        </div>\n      );\n    }\n\n    const suggestions = actionSuggestions[selectedCard.id] || [];\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <Target className=\"w-5 h-5 text-blue-600\" />\n          <h3 className=\"font-semibold\">Hedef: {selectedCard.title}</h3>\n        </div>\n\n        <div className=\"text-sm text-slate-600 mb-4\">\n          Önerilen Aksiyonlar:\n        </div>\n\n        {suggestions.map((suggestion, index) => {\n          const Icon = getIcon(suggestion.icon);\n          return (\n            <Card key={suggestion.id} className=\"border-l-4 border-l-blue-500\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"flex-shrink-0\">\n                    <Icon className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <h4 className=\"font-medium text-sm\">{suggestion.title}</h4>\n                      {suggestion.aiPowered && (\n                        <Badge variant=\"secondary\" className=\"text-xs bg-purple-100 text-purple-700\">\n                          <Brain className=\"w-3 h-3 mr-1\" />\n                          AI\n                        </Badge>\n                      )}\n                    </div>\n                    <p className=\"text-xs text-slate-600 mb-3\">\n                      {suggestion.description}\n                    </p>\n                    <div className=\"flex gap-2\">\n                      {suggestion.type === 'content' && (\n                        <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">\n                          Fikirleri Oluştur\n                        </Button>\n                      )}\n                      {suggestion.type === 'automation' && (\n                        <>\n                          <Button size=\"sm\" className=\"text-xs\">\n                            Otomatik Uygula\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">\n                            <Settings className=\"w-3 h-3 mr-1\" />\n                            Ayarlar\n                          </Button>\n                        </>\n                      )}\n                      {suggestion.type === 'analysis' && (\n                        <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">\n                          Raporu Göster\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto space-y-6\">\n            {/* Header and Account Selection */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h1 className=\"text-3xl font-bold text-foreground\">Strateji Planlayıcı</h1>\n                  <p className=\"text-muted-foreground mt-1\">\n                    Pazarlama hedeflerinizi planlayın ve AI destekli önerilerle hedefinize ulaşın\n                  </p>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Brain className=\"w-5 h-5 text-purple-600\" />\n                  <Sparkles className=\"w-4 h-4 text-yellow-500\" />\n                </div>\n              </div>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-4\">\n                    <Label htmlFor=\"account-select\" className=\"text-sm font-medium whitespace-nowrap\">\n                      Hesap Seçimi:\n                    </Label>\n                    <Select value={selectedAccount} onValueChange={setSelectedAccount}>\n                      <SelectTrigger className=\"w-64\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {accounts.map((account) => {\n                          const Icon = getIcon(account.icon);\n                          return (\n                            <SelectItem key={account.id} value={account.id}>\n                              <div className=\"flex items-center gap-2\">\n                                <Icon className=\"w-4 h-4\" />\n                                {account.name}\n                              </div>\n                            </SelectItem>\n                          );\n                        })}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Main Content Area */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n              {/* Strategy Timeline (3 columns) */}\n              <div className=\"lg:col-span-3\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  {Object.entries(timeframes).map(([key, timeframe]) => (\n                    <div key={key} className=\"rounded-lg border-2 border-border bg-card p-4\">\n                      <div className=\"text-center mb-4\">\n                        <h2 className=\"font-semibold text-card-foreground\">{timeframe.title}</h2>\n                        <p className=\"text-sm text-muted-foreground\">{timeframe.subtitle}</p>\n                      </div>\n\n                      <div className=\"space-y-4\">\n                        {strategyCards\n                          .filter(card => card.timeframe === key)\n                          .map(card => renderStrategyCard(card))}\n\n                        <Button\n                          variant=\"outline\"\n                          className=\"w-full border-2 border-dashed border-border hover:border-muted-foreground text-muted-foreground hover:text-foreground bg-card\"\n                          onClick={() => addNewCard(key as 'short' | 'medium' | 'long')}\n                        >\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Yeni Hedef Ekle\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Smart Action Panel */}\n              <div className=\"lg:col-span-1\">\n                <Card className=\"sticky top-6\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-lg\">\n                      <Zap className=\"w-5 h-5 text-yellow-500\" />\n                      Akıllı Aksiyon Paneli\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {renderActionPanel()}\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n    </div>\n  );\n}","size_bytes":14204},"client/src/pages/touchpoint-analysis.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport AIChatPanel from \"@/components/ai-chat-panel\";\nimport { \n  MousePointer2, \n  Eye, \n  Clock, \n  Users, \n  TrendingUp, \n  AlertTriangle,\n  DollarSign,\n  Target,\n  BarChart3,\n  ArrowUpRight,\n  ArrowDownRight,\n  Zap,\n  CheckCircle,\n  XCircle,\n  Brain,\n  Lightbulb\n} from \"lucide-react\";\n\nexport default function TouchpointAnalysis() {\n  const [activeTab, setActiveTab] = useState(\"heuristics\");\n  const [urlToAnalyze, setUrlToAnalyze] = useState(\"\");\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n\n  const heuristicChecks = [\n    {\n      category: \"Sayfa Yüklenme\",\n      checks: [\n        { name: \"Sayfa yüklenme hızı\", status: \"passed\", score: 85, description: \"Sayfa 2.3 saniyede yükleniyor\" },\n        { name: \"Mobil uyumluluk\", status: \"warning\", score: 72, description: \"Bazı öğeler mobilde kesiliyor\" },\n        { name: \"CLS (Layout Shift)\", status: \"passed\", score: 91, description: \"Düşük layout shift değeri\" }\n      ]\n    },\n    {\n      category: \"Kullanıcı Deneyimi\",\n      checks: [\n        { name: \"CTA görünürlüğü\", status: \"failed\", score: 45, description: \"Ana CTA fold altında kalıyor\" },\n        { name: \"Form kullanılabilirliği\", status: \"passed\", score: 88, description: \"Form alanları net ve erişilebilir\" },\n        { name: \"Navigasyon netliği\", status: \"warning\", score: 65, description: \"Menü yapısı karmaşık\" }\n      ]\n    },\n    {\n      category: \"Güvenilirlik\",\n      checks: [\n        { name: \"SSL sertifikası\", status: \"passed\", score: 100, description: \"Geçerli SSL sertifikası mevcut\" },\n        { name: \"Sosyal kanıt\", status: \"warning\", score: 60, description: \"Müşteri yorumları görünmüyor\" },\n        { name: \"İletişim bilgileri\", status: \"passed\", score: 85, description: \"İletişim bilgileri açık ve net\" }\n      ]\n    }\n  ];\n\n  const croRecommendations = [\n    {\n      priority: 'high',\n      title: 'Ana CTA Konumunu Optimize Et',\n      description: 'Ana call-to-action butonu fold üstüne taşınmalı. Mevcut konumda %40 daha az görülüyor.',\n      impact: '+%25 dönüşüm artışı bekleniyor',\n      effort: 'Düşük',\n      timeline: '1-2 gün'\n    },\n    {\n      priority: 'high',\n      title: 'Mobil Deneyimi İyileştir',\n      description: 'Mobil trafiğin %68\\'i var ancak mobil dönüşüm oranı %40 daha düşük.',\n      impact: '+%30 mobil dönüşüm',\n      effort: 'Orta',\n      timeline: '1 hafta'\n    },\n    {\n      priority: 'medium',\n      title: 'Sosyal Kanıt Ekle',\n      description: 'Müşteri yorumları ve değerlendirmeleri sayfada görünmüyor.',\n      impact: '+%15 güven artışı',\n      effort: 'Düşük',\n      timeline: '2-3 gün'\n    },\n    {\n      priority: 'medium',\n      title: 'Sayfa Hızını Artır',\n      description: 'Görselleri optimize ederek yüklenme süresini 1.5 saniyeye düşürün.',\n      impact: '+%10 bounce rate iyileştirmesi',\n      effort: 'Orta',\n      timeline: '3-5 gün'\n    }\n  ];\n\n  const behavioralData = {\n    heatmapInsights: [\n      \"Kullanıcıların %78'i sayfanın üst %50'sinde kalıyor\",\n      \"Yan menü elemanları hiç tıklanmıyor\",\n      \"Form alanlarında %35 abandon rate var\"\n    ],\n    userFlowIssues: [\n      \"Checkout'ta %45 abandonment\",\n      \"Ürün sayfasından %30 bounce\",\n      \"Arama sonuçlarında %60 no-click\"\n    ]\n  };\n\n  const handleAnalyzeUrl = async () => {\n    if (!urlToAnalyze) return;\n\n    setIsAnalyzing(true);\n    // Simulate analysis\n    setTimeout(() => {\n      setIsAnalyzing(false);\n    }, 3000);\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'passed':\n        return <CheckCircle className=\"w-5 h-5 text-green-400\" />;\n      case 'warning':\n        return <AlertTriangle className=\"w-5 h-5 text-yellow-400\" />;\n      case 'failed':\n        return <XCircle className=\"w-5 h-5 text-red-400\" />;\n      default:\n        return <AlertTriangle className=\"w-5 h-5 text-slate-400\" />;\n    }\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return 'text-green-400';\n    if (score >= 60) return 'text-yellow-400';\n    return 'text-red-400';\n  };\n\n  return (\n    <div className=\"flex h-full\">\n      {/* Left Column - Main Content (70%) */}\n      <div className=\"flex-1 w-[70%] p-4 sm:p-6 lg:p-8 overflow-y-auto\">\n              <div className=\"space-y-6\">\n                {/* Header */}\n                <div className=\"space-y-4\">\n                  <div>\n                    <h1 className=\"text-2xl font-bold text-white mb-2 flex items-center gap-2\">\n                      <MousePointer2 className=\"w-6 h-6 text-blue-400\" />\n                      CRO Sihirbazı\n                    </h1>\n                    <p className=\"text-slate-400\">Dönüşüm oranlarınızı artırmak için sayfa analizi ve optimizasyon önerileri</p>\n                  </div>\n\n                  <div className=\"flex items-center gap-2\">\n                    <Input\n                      placeholder=\"Analiz edilecek URL\"\n                      value={urlToAnalyze}\n                      onChange={(e) => setUrlToAnalyze(e.target.value)}\n                      className=\"bg-slate-800 border-slate-600 text-slate-300 flex-1 max-w-md\"\n                    />\n                    <Button \n                      onClick={handleAnalyzeUrl}\n                      disabled={!urlToAnalyze || isAnalyzing}\n                      className=\"bg-blue-600 hover:bg-blue-700\"\n                    >\n                      {isAnalyzing ? \"Analiz Ediliyor...\" : \"Analiz Et\"}\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Analysis Tabs */}\n                <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n                  <TabsList className=\"bg-slate-800 border-slate-700 w-full justify-start\">\n                    <TabsTrigger value=\"heuristics\" className=\"data-[state=active]:bg-slate-700 px-6 py-3\">\n                      Heuristik Analiz\n                    </TabsTrigger>\n                    <TabsTrigger value=\"recommendations\" className=\"data-[state=active]:bg-slate-700 px-6 py-3\">\n                      CRO Önerileri\n                    </TabsTrigger>\n                    <TabsTrigger value=\"behavioral\" className=\"data-[state=active]:bg-slate-700 px-6 py-3\">\n                      Davranışsal Analiz\n                    </TabsTrigger>\n                  </TabsList>\n\n                  <TabsContent value=\"heuristics\" className=\"space-y-6 mt-6\">\n                    {/* Heuristic Checks */}\n                    <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n                      {heuristicChecks.map((category, categoryIndex) => (\n                        <Card key={categoryIndex} className=\"bg-slate-800 border-slate-700\">\n                          <CardHeader>\n                            <CardTitle className=\"text-white text-lg\">{category.category}</CardTitle>\n                          </CardHeader>\n                          <CardContent>\n                            <div className=\"space-y-4\">\n                              {category.checks.map((check, checkIndex) => (\n                                <div key={checkIndex} className=\"bg-slate-700 p-4 rounded-lg\">\n                                  <div className=\"flex items-center justify-between mb-2\">\n                                    <div className=\"flex items-center gap-2\">\n                                      {getStatusIcon(check.status)}\n                                      <span className=\"text-white font-medium text-sm\">{check.name}</span>\n                                    </div>\n                                    <span className={`font-bold ${getScoreColor(check.score)}`}>\n                                      {check.score}\n                                    </span>\n                                  </div>\n                                  <p className=\"text-slate-400 text-sm\">{check.description}</p>\n                                </div>\n                              ))}\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  </TabsContent>\n\n                  <TabsContent value=\"recommendations\" className=\"space-y-6 mt-6\">\n                    {/* CRO Recommendations */}\n                    <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n                      {croRecommendations.map((rec, index) => (\n                        <Card key={index} className=\"bg-slate-800 border-slate-700\">\n                          <CardContent className=\"p-6\">\n                            <div className=\"flex items-start gap-4\">\n                              <div className={`w-3 h-3 rounded-full mt-2 flex-shrink-0 ${\n                                rec.priority === 'high' ? 'bg-red-400' : 'bg-yellow-400'\n                              }`}></div>\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center justify-between mb-3\">\n                                  <h3 className=\"text-white font-semibold\">{rec.title}</h3>\n                                  <Badge variant=\"outline\" className={`${\n                                    rec.priority === 'high' ? 'border-red-500 text-red-400' : 'border-yellow-500 text-yellow-400'\n                                  }`}>\n                                    {rec.priority === 'high' ? 'Yüksek' : 'Orta'} Öncelik\n                                  </Badge>\n                                </div>\n                                <p className=\"text-slate-400 text-sm mb-4\">{rec.description}</p>\n                                <div className=\"grid grid-cols-2 gap-4 text-xs\">\n                                  <div>\n                                    <span className=\"text-slate-500\">Etki:</span>\n                                    <span className=\"text-green-400 ml-2\">{rec.impact}</span>\n                                  </div>\n                                  <div>\n                                    <span className=\"text-slate-500\">Efor:</span>\n                                    <span className=\"text-slate-300 ml-2\">{rec.effort}</span>\n                                  </div>\n                                  <div className=\"col-span-2\">\n                                    <span className=\"text-slate-500\">Süre:</span>\n                                    <span className=\"text-slate-300 ml-2\">{rec.timeline}</span>\n                                  </div>\n                                </div>\n                                <Button className=\"w-full mt-4 bg-blue-600 hover:bg-blue-700 text-sm\">\n                                  Uygula\n                                </Button>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  </TabsContent>\n\n                  <TabsContent value=\"behavioral\" className=\"space-y-6 mt-6\">\n                    {/* Behavioral Analysis */}\n                    <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n                      <Card className=\"bg-slate-800 border-slate-700\">\n                        <CardHeader>\n                          <CardTitle className=\"text-white flex items-center gap-2\">\n                            <Eye className=\"w-5 h-5 text-blue-400\" />\n                            Heatmap İçgörüleri\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"space-y-3\">\n                            {behavioralData.heatmapInsights.map((insight, index) => (\n                              <div key={index} className=\"bg-slate-700 p-3 rounded-lg\">\n                                <p className=\"text-slate-300 text-sm\">{insight}</p>\n                              </div>\n                            ))}\n                          </div>\n                        </CardContent>\n                      </Card>\n\n                      <Card className=\"bg-slate-800 border-slate-700\">\n                        <CardHeader>\n                          <CardTitle className=\"text-white flex items-center gap-2\">\n                            <TrendingUp className=\"w-5 h-5 text-green-400\" />\n                            Kullanıcı Akışı Sorunları\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"space-y-3\">\n                            {behavioralData.userFlowIssues.map((issue, index) => (\n                              <div key={index} className=\"bg-slate-700 p-3 rounded-lg\">\n                                <p className=\"text-slate-300 text-sm\">{issue}</p>\n                              </div>\n                            ))}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </TabsContent>\n                </Tabs>\n              </div>\n            </div>\n\n        {/* Right Column - AI Chat Panel (30%) */}\n        <div className=\"w-[30%] border-l border-slate-700 p-4 overflow-y-auto\">\n          <AIChatPanel \n            pageContext=\"CRO Sihirbazı\"\n            insights={[\n              {\n                id: '1',\n                type: 'warning',\n                title: 'Ana CTA Görünürlüğü Düşük',\n                description: 'Ana call-to-action butonu fold altında kalıyor. Yukarı taşınması öneriliyor.',\n                action: 'Öneriyi uygula',\n                icon: Target\n              },\n              {\n                id: '2',\n                type: 'opportunity',\n                title: 'Mobil Optimizasyon Fırsatı',\n                description: 'Mobil dönüşüm oranı %40 daha düşük. İyileştirme potansiyeli yüksek.',\n                action: 'Mobil önerileri görüntüle',\n                icon: TrendingUp\n              }\n            ]}\n            suggestions={[\n              'CTA pozisyonunu nasıl optimize edebilirim?',\n              'Mobil dönüşüm oranını artırmanın yolları',\n              'Sayfa yüklenme hızını nasıl artırabilirim?',\n              'Kullanıcı deneyimi skorumu nasıl yükseltebilirim?'\n            ]}\n          />\n        </div>\n      </div>\n  );\n}","size_bytes":14807},"client/src/components/dashboard/alerts-widget.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { \n  AlertTriangle, \n  TrendingUp, \n  AlertCircle,\n  X,\n  GripVertical,\n  Bell,\n  ExternalLink\n} from \"lucide-react\";\nimport { ALERT_TYPES } from \"@/lib/constants\";\n\ninterface Alert {\n  id: number;\n  type: 'opportunity' | 'warning' | 'alert';\n  title: string;\n  description: string;\n  time: string;\n  metric?: string;\n  change?: string;\n  actionUrl?: string;\n}\n\ninterface AlertsWidgetProps {\n  isCustomizing?: boolean;\n  onRemove?: () => void;\n  dragHandleProps?: any;\n}\n\nexport default function AlertsWidget({\n  isCustomizing,\n  onRemove,\n  dragHandleProps\n}: AlertsWidgetProps) {\n\n  // Sample alerts data - in real app this would come from props\n  const alerts: Alert[] = [\n    {\n      id: 1,\n      type: 'opportunity',\n      title: 'TikTok ROAS Fırsatı',\n      description: 'TikTok kampanyanızın ROAS değeri %35 artış gösteriyor. Bütçe artırımı öneriliyor.',\n      time: '5 dakika önce',\n      metric: 'ROAS',\n      change: '+35%'\n    },\n    {\n      id: 2,\n      type: 'warning',\n      title: 'Google Ads CPC Artışı',\n      description: 'Son 3 günde CPC değerlerinizde %18 artış tespit edildi.',\n      time: '1 saat önce',\n      metric: 'CPC',\n      change: '+18%'\n    },\n    {\n      id: 3,\n      type: 'alert',\n      title: 'Meta Kampanya Durumu',\n      description: 'Ana kampanyanızın dönüşüm oranı hedefin altına düştü.',\n      time: '2 saat önce',\n      metric: 'Dönüşüm Oranı',\n      change: '-12%'\n    },\n    {\n      id: 4,\n      type: 'opportunity',\n      title: 'Yeni Hedef Kitle Fırsatı',\n      description: 'Lookalike kitlesi %40 daha iyi performans gösteriyor.',\n      time: '4 saat önce',\n      metric: 'CTR',\n      change: '+40%'\n    },\n    {\n      id: 5,\n      type: 'warning',\n      title: 'Bütçe Uyarısı',\n      description: 'Günlük bütçenizin %85\\'i tükendi.',\n      time: '6 saat önce',\n      metric: 'Bütçe',\n      change: '85%'\n    }\n  ];\n\n  const getAlertIcon = (type: Alert['type']) => {\n    switch (type) {\n      case 'opportunity':\n        return TrendingUp;\n      case 'warning':\n        return AlertTriangle;\n      case 'alert':\n        return AlertCircle;\n      default:\n        return Bell;\n    }\n  };\n\n  const getAlertConfig = (type: Alert['type']) => {\n    return ALERT_TYPES[type] || ALERT_TYPES.warning;\n  };\n\n  return (\n    <div className=\"relative widget-container\">\n      {/* Drag Handle */}\n      {isCustomizing && (\n        <div \n          className=\"widget-drag-handle absolute top-4 left-4 z-10 p-1 rounded cursor-grab hover:bg-slate-700\"\n          {...dragHandleProps}\n        >\n          <GripVertical className=\"w-4 h-4 text-slate-400\" />\n        </div>\n      )}\n\n      {/* Remove Button */}\n      {isCustomizing && onRemove && (\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onRemove}\n          className=\"widget-remove-btn absolute top-4 right-4 z-10 text-red-400 hover:text-red-300 hover:bg-red-500/20 p-1\"\n        >\n          <X className=\"w-4 h-4\" />\n        </Button>\n      )}\n\n      <Card className=\"bg-slate-800 border-slate-700 h-full\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2 text-white\">\n              <Bell className=\"w-5 h-5\" />\n              Uyarılar & Öneriler\n            </CardTitle>\n            <Badge variant=\"secondary\" className=\"bg-blue-500/20 text-blue-400\">\n              {alerts.length}\n            </Badge>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"p-0\">\n          <ScrollArea className=\"h-80 px-6\">\n            <div className=\"space-y-4\">\n              {alerts.map((alert) => {\n                const Icon = getAlertIcon(alert.type);\n                const config = getAlertConfig(alert.type);\n                \n                return (\n                  <div\n                    key={alert.id}\n                    className={`ai-recommendation ${alert.type} p-4 rounded-lg transition-all hover:scale-[1.02]`}\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      <div \n                        className=\"w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0\"\n                        style={{ backgroundColor: `${config.color}20` }}\n                      >\n                        <Icon \n                          className=\"w-4 h-4\" \n                          style={{ color: config.color }}\n                        />\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <Badge \n                            variant=\"secondary\"\n                            className=\"text-xs\"\n                            style={{ \n                              backgroundColor: `${config.color}20`,\n                              color: config.color \n                            }}\n                          >\n                            {config.label}\n                          </Badge>\n                          {alert.change && (\n                            <Badge \n                              variant=\"outline\"\n                              className=\"text-xs border-slate-600 text-slate-400\"\n                            >\n                              {alert.change}\n                            </Badge>\n                          )}\n                        </div>\n                        \n                        <h4 className=\"font-medium text-white mb-1 text-sm\">\n                          {alert.title}\n                        </h4>\n                        \n                        <p className=\"text-slate-400 text-xs leading-relaxed mb-3\">\n                          {alert.description}\n                        </p>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-slate-500 text-xs\">\n                            {alert.time}\n                          </span>\n                          \n                          <Button\n                            variant=\"link\"\n                            size=\"sm\"\n                            className=\"h-auto p-0 text-xs hover:no-underline\"\n                            style={{ color: config.color }}\n                          >\n                            Detaylar\n                            <ExternalLink className=\"w-3 h-3 ml-1\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </ScrollArea>\n          \n          {/* Footer */}\n          <div className=\"p-4 border-t border-slate-700\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              className=\"w-full bg-slate-700 border-slate-600 text-slate-300 hover:bg-slate-600\"\n            >\n              Tüm Uyarıları Görüntüle\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7383},"client/src/components/dashboard/stat-cards-widget.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  DollarSign, \n  TrendingUp, \n  Target, \n  ShoppingCart,\n  X,\n  GripVertical\n} from \"lucide-react\";\n\ninterface StatCardsWidgetProps {\n  data?: {\n    totalRevenue: number;\n    totalAdSpend: number;\n    avgRoas: number;\n    totalConversions: number;\n  };\n  isCustomizing?: boolean;\n  onRemove?: () => void;\n  dragHandleProps?: any;\n}\n\nexport default function StatCardsWidget({ \n  data = {\n    totalRevenue: 0,\n    totalAdSpend: 0, \n    avgRoas: 0,\n    totalConversions: 0\n  },\n  isCustomizing,\n  onRemove,\n  dragHandleProps\n}: StatCardsWidgetProps) {\n  \n  const stats = [\n    {\n      title: \"Toplam Gelir\",\n      value: `₺${data.totalRevenue.toLocaleString()}`,\n      change: \"+12.5%\",\n      changeType: \"positive\" as const,\n      icon: DollarSign,\n      color: \"hsl(153, 60%, 53%)\"\n    },\n    {\n      title: \"Reklam Harcaması\", \n      value: `₺${data.totalAdSpend.toLocaleString()}`,\n      change: \"+8.2%\",\n      changeType: \"negative\" as const,\n      icon: TrendingUp,\n      color: \"hsl(48, 96%, 53%)\"\n    },\n    {\n      title: \"ROAS\",\n      value: `${data.avgRoas.toFixed(1)}x`,\n      change: \"+5.1%\", \n      changeType: \"positive\" as const,\n      icon: Target,\n      color: \"hsl(207, 90%, 54%)\"\n    },\n    {\n      title: \"Dönüşümler\",\n      value: data.totalConversions.toLocaleString(),\n      change: \"+18.3%\",\n      changeType: \"positive\" as const,\n      icon: ShoppingCart,\n      color: \"hsl(280, 65%, 60%)\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 lg:col-span-4\">\n      {stats.map((stat, index) => {\n        const Icon = stat.icon;\n        \n        return (\n          <div key={index} className=\"relative widget-container\">\n            {/* Drag Handle */}\n            {isCustomizing && (\n              <div \n                className=\"widget-drag-handle absolute top-2 left-2 z-10 p-1 rounded cursor-grab hover:bg-slate-700\"\n                {...dragHandleProps}\n              >\n                <GripVertical className=\"w-4 h-4 text-slate-400\" />\n              </div>\n            )}\n\n            {/* Remove Button */}\n            {isCustomizing && onRemove && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={onRemove}\n                className=\"widget-remove-btn absolute top-2 right-2 z-10 text-red-400 hover:text-red-300 hover:bg-red-500/20 p-1\"\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            )}\n\n            <Card className=\"metric-card h-full\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div \n                    className=\"w-12 h-12 rounded-xl flex items-center justify-center\"\n                    style={{ backgroundColor: `${stat.color}20` }}\n                  >\n                    <Icon \n                      className=\"w-6 h-6\" \n                      style={{ color: stat.color }}\n                    />\n                  </div>\n                  <Badge \n                    variant=\"secondary\" \n                    className={`metric-change ${stat.changeType}`}\n                  >\n                    {stat.change}\n                  </Badge>\n                </div>\n                \n                <h4 className=\"text-slate-400 text-sm mb-2\">{stat.title}</h4>\n                <p className=\"text-2xl font-bold text-white mb-1\">{stat.value}</p>\n                <p className=\"text-slate-500 text-xs\">Bu ay</p>\n              </CardContent>\n            </Card>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":3757},"client/src/components/dashboard/traffic-chart-widget.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  LineChart, \n  Line, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer,\n  Legend\n} from \"recharts\";\nimport { \n  MoreHorizontal, \n  X, \n  GripVertical,\n  TrendingUp\n} from \"lucide-react\";\nimport { PLATFORM_COLORS } from \"@/lib/constants\";\n\ninterface TrafficChartWidgetProps {\n  data?: any[];\n  dateRange?: string;\n  platform?: string;\n  isCustomizing?: boolean;\n  onRemove?: () => void;\n  dragHandleProps?: any;\n}\n\nexport default function TrafficChartWidget({\n  data = [],\n  dateRange = '30d',\n  platform = 'all',\n  isCustomizing,\n  onRemove,\n  dragHandleProps\n}: TrafficChartWidgetProps) {\n\n  // Generate sample chart data if no real data\n  const chartData = data.length > 0 ? data : [\n    { date: '01/01', revenue: 4500, adSpend: 1200 },\n    { date: '02/01', revenue: 5200, adSpend: 1400 },\n    { date: '03/01', revenue: 4800, adSpend: 1100 },\n    { date: '04/01', revenue: 6100, adSpend: 1600 },\n    { date: '05/01', revenue: 5800, adSpend: 1500 },\n    { date: '06/01', revenue: 7200, adSpend: 1800 },\n    { date: '07/01', revenue: 6800, adSpend: 1700 },\n  ];\n\n  const formatCurrency = (value: number) => {\n    return `₺${value.toLocaleString()}`;\n  };\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-slate-800 border border-slate-600 rounded-lg p-3 shadow-lg\">\n          <p className=\"text-slate-300 text-sm mb-2\">{`Tarih: ${label}`}</p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              {entry.name}: {formatCurrency(entry.value)}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"relative widget-container\">\n      {/* Drag Handle */}\n      {isCustomizing && (\n        <div \n          className=\"widget-drag-handle absolute top-4 left-4 z-10 p-1 rounded cursor-grab hover:bg-slate-700\"\n          {...dragHandleProps}\n        >\n          <GripVertical className=\"w-4 h-4 text-slate-400\" />\n        </div>\n      )}\n\n      {/* Remove Button */}\n      {isCustomizing && onRemove && (\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onRemove}\n          className=\"widget-remove-btn absolute top-4 right-4 z-10 text-red-400 hover:text-red-300 hover:bg-red-500/20 p-1\"\n        >\n          <X className=\"w-4 h-4\" />\n        </Button>\n      )}\n\n      <Card className=\"bg-slate-800 border-slate-700 h-full\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2 text-white\">\n              <TrendingUp className=\"w-5 h-5\" />\n              Gelir Trendi\n            </CardTitle>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-slate-400 hover:text-white p-1\"\n            >\n              <MoreHorizontal className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={chartData}>\n                <CartesianGrid \n                  strokeDasharray=\"3 3\" \n                  stroke=\"hsl(217.2, 32.6%, 17.5%)\"\n                />\n                <XAxis \n                  dataKey=\"date\" \n                  stroke=\"hsl(215, 20.2%, 65.1%)\"\n                  fontSize={12}\n                />\n                <YAxis \n                  stroke=\"hsl(215, 20.2%, 65.1%)\"\n                  fontSize={12}\n                  tickFormatter={formatCurrency}\n                />\n                <Tooltip content={<CustomTooltip />} />\n                <Legend\n                  wrapperStyle={{ color: 'hsl(215, 20.2%, 65.1%)' }}\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"revenue\"\n                  stroke=\"hsl(153, 60%, 53%)\"\n                  strokeWidth={2}\n                  dot={{ fill: 'hsl(153, 60%, 53%)', strokeWidth: 2, r: 4 }}\n                  activeDot={{ r: 6, stroke: 'hsl(153, 60%, 53%)', strokeWidth: 2 }}\n                  name=\"Gelir\"\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"adSpend\"\n                  stroke=\"hsl(0, 84.2%, 60.2%)\"\n                  strokeWidth={2}\n                  dot={{ fill: 'hsl(0, 84.2%, 60.2%)', strokeWidth: 2, r: 4 }}\n                  activeDot={{ r: 6, stroke: 'hsl(0, 84.2%, 60.2%)', strokeWidth: 2 }}\n                  name=\"Reklam Harcaması\"\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n\n          {/* Chart Summary */}\n          <div className=\"flex items-center justify-between mt-4 pt-4 border-t border-slate-700\">\n            <div className=\"text-sm text-slate-400\">\n              Son {dateRange === '7d' ? '7 gün' : dateRange === '30d' ? '30 gün' : '90 gün'} trendi\n            </div>\n            <div className=\"flex items-center gap-4 text-sm\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                <span className=\"text-slate-400\">Gelir</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                <span className=\"text-slate-400\">Harcama</span>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5761},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bell, Search, User, Settings, LogOut, Globe, Menu } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { type User as UserType } from \"@shared/schema\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\ninterface HeaderProps {\n  currentPage: string;\n}\n\nexport default function Header({ currentPage }: HeaderProps) {\n  const { user } = useAuth();\n  const [language, setLanguage] = useState<'tr' | 'en'>('tr');\n  const isMobile = useIsMobile();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const handleLogout = () => {\n    // Check if we're in test mode\n    const isTestMode = window.location.search.includes('test=true');\n    if (isTestMode) {\n      // In test mode, just go back to landing page\n      window.location.href = '/';\n    } else {\n      window.location.href = '/api/logout';\n    }\n  };\n\n  const toggleLanguage = () => {\n    const newLang = language === 'tr' ? 'en' : 'tr';\n    setLanguage(newLang);\n    // Store language preference\n    localStorage.setItem('language', newLang);\n  };\n\n  return (\n    <header className=\"bg-slate-800/50 backdrop-blur-sm border-b border-slate-700 px-4 py-3\">\n      <div className=\"flex items-center justify-between\">\n\n        {/* Left side - Page title and breadcrumb */}\n        <div className=\"flex items-center gap-4\">\n          <div>\n            <h1 className=\"text-xl font-bold text-white\">{currentPage}</h1>\n            <div className=\"flex items-center gap-2 text-sm text-slate-400\">\n              <span>Pazarlama Zekası</span>\n              <span>/</span>\n              <span>{currentPage}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Right side - Search, notifications, language, user menu */}\n        <div className=\"flex items-center gap-4\">\n\n          {/* Search */}\n          <div className=\"hidden md:flex items-center gap-2 bg-slate-700 rounded-lg px-3 py-2 min-w-[300px]\">\n            <Search className=\"w-4 h-4 text-slate-400\" />\n            <input\n              type=\"text\"\n              placeholder=\"Ara...\"\n              className=\"bg-transparent text-slate-300 placeholder-slate-400 outline-none flex-1 text-sm\"\n            />\n          </div>\n\n          {/* Language Toggle */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={toggleLanguage}\n            className=\"text-slate-400 hover:text-white p-2\"\n          >\n            <Globe className=\"w-4 h-4 mr-2\" />\n            <span className=\"text-xs font-medium\">\n              {language === 'tr' ? '🇹🇷' : '🇬🇧'}\n            </span>\n          </Button>\n\n          {/* Notifications */}\n          <div className=\"relative\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-slate-400 hover:text-white p-2\"\n            >\n              <Bell className=\"w-5 h-5\" />\n            </Button>\n            <div className=\"notification-badge\">3</div>\n          </div>\n\n          {/* User Menu */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"flex items-center gap-2 p-2\">\n                <Avatar className=\"w-8 h-8\">\n                  <AvatarImage \n                    src={(user as UserType)?.profileImageUrl || \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=60&h=60\"} \n                    alt=\"Profile\" \n                  />\n                  <AvatarFallback className=\"bg-slate-700 text-slate-300\">\n                    <User className=\"w-4 h-4\" />\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"hidden md:block text-left\">\n                  <p className=\"text-sm font-medium text-white\">\n                    {(user as UserType)?.firstName} {(user as UserType)?.lastName}\n                  </p>\n                  <p className=\"text-xs text-slate-400\">Admin</p>\n                </div>\n              </Button>\n            </DropdownMenuTrigger>\n\n            <DropdownMenuContent \n              align=\"end\" \n              className=\"w-56 bg-slate-800 border-slate-700\"\n            >\n              <div className=\"p-2\">\n                <div className=\"flex items-center gap-2\">\n                  <Avatar className=\"w-8 h-8\">\n                    <AvatarImage src={(user as UserType)?.profileImageUrl ?? undefined} alt=\"Profile\" />\n                    <AvatarFallback className=\"bg-slate-700 text-slate-300\">\n                      <User className=\"w-4 h-4\" />\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <p className=\"text-sm font-medium text-white\">\n                      {(user as UserType)?.firstName} {(user as UserType)?.lastName}\n                    </p>\n                    <p className=\"text-xs text-slate-400\">{(user as UserType)?.email}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2 mt-2\">\n                  <Badge variant=\"secondary\" className=\"bg-green-500/20 text-green-500 text-xs\">\n                    Pro Plan\n                  </Badge>\n                  <div className=\"status-indicator online text-xs text-slate-400\">\n                    Online\n                  </div>\n                </div>\n              </div>\n\n              <DropdownMenuSeparator className=\"bg-slate-700\" />\n\n              <DropdownMenuItem className=\"text-slate-300 hover:text-white hover:bg-slate-700\">\n                <User className=\"w-4 h-4 mr-2\" />\n                Profil\n              </DropdownMenuItem>\n\n              <DropdownMenuItem className=\"text-slate-300 hover:text-white hover:bg-slate-700\">\n                <Settings className=\"w-4 h-4 mr-2\" />\n                Ayarlar\n              </DropdownMenuItem>\n\n              <DropdownMenuSeparator className=\"bg-slate-700\" />\n\n              <DropdownMenuItem \n                onClick={handleLogout}\n                className=\"text-red-400 hover:text-red-300 hover:bg-slate-700\"\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Çıkış Yap\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":6618},"client/src/components/layout/sidebar.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  BarChart3,\n  TrendingUp,\n  Target,\n  Activity,\n  Users,\n  Megaphone,\n  FileText,\n  Settings,\n  ChevronLeft,\n  ChevronRight,\n  Menu,\n  X,\n  GitBranch,\n  DollarSign,\n  BarChart2,\n  MapPin,\n  Wand2,\n  Search,\n  Facebook,\n  Music,\n  Calendar,\n  User,\n  Package,\n  Heart,\n  Handshake,\n  Palette,\n  Layers,\n  Bot,\n  Zap,\n  CheckSquare,\n  Users2,\n  Play\n} from \"lucide-react\";\nimport { NAVIGATION_ITEMS } from \"@/lib/constants\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { getNavigationUrl } from \"@/lib/navigation\";\nimport { cn } from \"@/lib/utils\";\n\nconst iconMap = {\n  BarChart3,\n  TrendingUp,\n  Target,\n  Activity,\n  Users,\n  Megaphone,\n  FileText,\n  Settings,\n  GitBranch,\n  DollarSign,\n  BarChart2,\n  MapPin,\n  Wand2,\n  Search,\n  Facebook,\n  Music,\n  Calendar,\n  User,\n  Package,\n  Heart,\n  Handshake,\n  Palette,\n  Layers,\n  Bot,\n  Zap,\n  CheckSquare,\n  Users2,\n  Play\n};\n\nconst renderIcon = (iconName: string) => {\n  const Icon = iconMap[iconName as keyof typeof iconMap];\n  return Icon ? <Icon className=\"w-5 h-5 flex-shrink-0\" /> : null;\n};\n\nexport default function Sidebar() {\n  const [location, setLocation] = useLocation();\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const [isMobileOpen, setIsMobileOpen] = useState(false);\n  const isMobile = useIsMobile();\n\n  const toggleSidebar = () => {\n    if (isMobile) {\n      setIsMobileOpen(!isMobileOpen);\n    } else {\n      setIsCollapsed(!isCollapsed);\n    }\n  };\n\n  const closeMobileSidebar = () => {\n    if (isMobile) {\n      setIsMobileOpen(false);\n    }\n  };\n\n  const sidebarContent = (\n    <div className=\"flex flex-col h-full bg-slate-800 border-r border-slate-700\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-slate-700\">\n        {(!isCollapsed || isMobile) && (\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg flex items-center justify-center\">\n              <TrendingUp className=\"w-5 h-5 text-white\" />\n            </div>\n            <span className=\"text-lg font-bold text-white\">Pazarlama Zekası</span>\n          </div>\n        )}\n\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={toggleSidebar}\n          className=\"text-slate-400 hover:text-white p-1\"\n        >\n          {isMobile ? (\n            isMobileOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />\n          ) : (\n            isCollapsed ? <ChevronRight className=\"w-5 h-5\" /> : <ChevronLeft className=\"w-5 h-5\" />\n          )}\n        </Button>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 p-4 overflow-y-auto\">\n        <div className=\"space-y-6\">\n          {/* Group navigation items by category */}\n          {Object.entries(\n            NAVIGATION_ITEMS.reduce((groups, item) => {\n              if (!groups[item.category]) {\n                groups[item.category] = [];\n              }\n              groups[item.category].push(item);\n              return groups;\n            }, {} as Record<string, typeof NAVIGATION_ITEMS>)\n          ).map(([category, items]) => (\n            <div key={category}>\n              {(!isCollapsed || isMobile) && (\n                <div className=\"text-xs font-semibold text-slate-500 uppercase tracking-wider mb-3 px-3\">\n                  {category === 'genel' && 'Genel'}\n                  {category === 'analiz' && 'Analiz'}\n                  {category === 'cro' && 'CRO'}\n                  {category === 'kanallar' && 'Kanallar'}\n                  {category === 'yonetim' && 'Yönetim'}\n                  {category === 'strateji' && 'Strateji'}\n                  {category === 'yardimci' && 'Yardımcı'}\n                  {category === 'otomasyon' && 'Otomasyon'}\n                  {category === 'yapilandirma' && 'Yapılandırma'}\n                </div>\n              )}\n              <div className=\"space-y-1\">\n                {items.map((item) => {\n                  const isActive = location === getNavigationUrl(item.href);\n                  return (\n                    <a\n                      key={item.id}\n                      href={getNavigationUrl(item.href)}\n                      className={cn(\n                        \"sidebar-nav-item flex items-center gap-3 px-3 py-2 text-sm font-medium cursor-pointer rounded-lg transition-colors\",\n                        isActive\n                          ? 'active bg-blue-600 text-white'\n                          : 'text-slate-300 hover:text-white hover:bg-slate-700'\n                      )}\n                      onClick={(e) => {\n                        e.preventDefault();\n                        setLocation(getNavigationUrl(item.href));\n                        closeMobileSidebar();\n                      }}\n                    >\n                      {renderIcon(item.icon)}\n                      {(!isCollapsed || isMobile) && (\n                        <span className=\"truncate\">{item.label}</span>\n                      )}\n                    </a>\n                  );\n                })}\n              </div>\n            </div>\n          ))}\n        </div>\n      </nav>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-slate-700\">\n        <div className=\"flex items-center gap-2 text-sm text-slate-400\">\n          <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n          {(!isCollapsed || isMobile) && <span>Sistem Aktif</span>}\n        </div>\n      </div>\n    </div>\n  );\n\n  // Mobile overlay handling\n  if (isMobile && isMobileOpen) {\n    return (\n      <div className=\"fixed inset-0 z-50\">\n        <div\n          className=\"absolute inset-0 bg-black/50 backdrop-blur-sm\"\n          onClick={() => setIsMobileOpen(false)}\n        />\n        <div className=\"absolute top-0 left-0 h-full w-80 max-w-[80vw] z-51\">\n          {sidebarContent}\n        </div>\n      </div>\n    );\n  }\n\n  // Mobile menu button\n  if (isMobile && !isMobileOpen) {\n    return (\n      <div className=\"fixed top-4 left-4 z-40\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setIsMobileOpen(true)}\n          className=\"text-slate-400 hover:text-white p-2 bg-slate-800/80 backdrop-blur-sm border border-slate-700\"\n        >\n          <Menu className=\"w-5 h-5\" />\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`${isCollapsed ? 'w-16' : 'w-64'} transition-all duration-300 flex-shrink-0`}>\n      {sidebarContent}\n    </div>\n  );\n}\n","size_bytes":6618},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/affiliate.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { \n  Users, TrendingUp, TrendingDown, DollarSign, Target, Crown, \n  AlertTriangle, Plus, Eye, Share2, Star, Award, ArrowUpRight\n} from \"lucide-react\";\n\nexport default function Affiliate() {\n  const [timeRange, setTimeRange] = useState('30d');\n\n  // Mock data for affiliate partners\n  const affiliateData = [\n    {\n      id: 1,\n      name: \"Ayşe Moda\",\n      username: \"@aysemoda\",\n      avatar: \"/api/placeholder/40/40\",\n      sales: 89750,\n      commission: 8975,\n      conversionRate: 3.2,\n      orders: 156,\n      followers: \"125K\",\n      platform: \"instagram\",\n      status: \"active\",\n      performance: \"excellent\"\n    },\n    {\n      id: 2,\n      name: \"Lifestyle Elif\",\n      username: \"@lifestyleelif\",\n      avatar: \"/api/placeholder/40/40\",\n      sales: 67320,\n      commission: 6732,\n      conversionRate: 2.8,\n      orders: 124,\n      followers: \"89K\",\n      platform: \"tiktok\",\n      status: \"active\",\n      performance: \"good\"\n    },\n    {\n      id: 3,\n      name: \"Moda Zehra\",\n      username: \"@modazehra\",\n      avatar: \"/api/placeholder/40/40\",\n      sales: 45890,\n      commission: 4589,\n      conversionRate: 2.1,\n      orders: 98,\n      followers: \"67K\",\n      platform: \"instagram\",\n      status: \"active\",\n      performance: \"average\"\n    },\n    {\n      id: 4,\n      name: \"Beauty Merve\",\n      username: \"@beautymerve\",\n      avatar: \"/api/placeholder/40/40\",\n      sales: 23450,\n      commission: 2345,\n      conversionRate: 1.4,\n      orders: 45,\n      followers: \"156K\",\n      platform: \"youtube\",\n      status: \"warning\",\n      performance: \"poor\"\n    },\n    {\n      id: 5,\n      name: \"Style Büşra\",\n      username: \"@stylebusra\",\n      avatar: \"/api/placeholder/40/40\",\n      sales: 56780,\n      commission: 5678,\n      conversionRate: 2.6,\n      orders: 89,\n      followers: \"78K\",\n      platform: \"instagram\",\n      status: \"active\",\n      performance: \"good\"\n    }\n  ];\n\n  // Get top performer\n  const topPerformer = affiliateData.reduce((prev, current) => \n    (prev.sales > current.sales) ? prev : current\n  );\n\n  // Get warning performer\n  const warningPerformer = affiliateData.find(affiliate => affiliate.performance === \"poor\");\n\n  const getPerformanceBadge = (performance: string, conversionRate: number) => {\n    switch (performance) {\n      case 'excellent':\n        return (\n          <Badge className=\"bg-emerald-500/20 text-emerald-400 border-emerald-500/30\">\n            <Star className=\"w-3 h-3 mr-1\" />\n            Mükemmel ({conversionRate}%)\n          </Badge>\n        );\n      case 'good':\n        return (\n          <Badge className=\"bg-blue-500/20 text-blue-400 border-blue-500/30\">\n            <TrendingUp className=\"w-3 h-3 mr-1\" />\n            İyi ({conversionRate}%)\n          </Badge>\n        );\n      case 'average':\n        return (\n          <Badge className=\"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\">\n            <Target className=\"w-3 h-3 mr-1\" />\n            Orta ({conversionRate}%)\n          </Badge>\n        );\n      case 'poor':\n        return (\n          <Badge className=\"bg-red-500/20 text-red-400 border-red-500/30\">\n            <TrendingDown className=\"w-3 h-3 mr-1\" />\n            Zayıf ({conversionRate}%)\n          </Badge>\n        );\n      default:\n        return (\n          <Badge variant=\"outline\" className=\"border-slate-600 text-slate-400\">\n            {conversionRate}%\n          </Badge>\n        );\n    }\n  };\n\n  const getPlatformIcon = (platform: string) => {\n    switch (platform) {\n      case 'instagram':\n        return <div className=\"w-3 h-3 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full\"></div>;\n      case 'tiktok':\n        return <div className=\"w-3 h-3 bg-black rounded-full\"></div>;\n      case 'youtube':\n        return <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>;\n      default:\n        return <div className=\"w-3 h-3 bg-gray-500 rounded-full\"></div>;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n\n            {/* Header Section */}\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-white mb-2\">Affiliate Merkezi</h1>\n                <p className=\"text-slate-400\">\n                  Influencer ve affiliate ortaklarınızın performansını izleyin, \n                  komisyonları yönetin ve işbirliklerinizi optimize edin.\n                </p>\n              </div>\n              <Button className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Yeni Affiliate Ekle\n              </Button>\n            </div>\n\n            {/* Time Range Selector */}\n            <div className=\"flex items-center gap-4\">\n              <Select value={timeRange} onValueChange={setTimeRange}>\n                <SelectTrigger className=\"bg-slate-800 border-slate-600 text-slate-300 w-40\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-slate-800 border-slate-600\">\n                  <SelectItem value=\"7d\">Son 7 Gün</SelectItem>\n                  <SelectItem value=\"30d\">Son 30 Gün</SelectItem>\n                  <SelectItem value=\"90d\">Son 90 Gün</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Highlight Cards */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Top Performer Card */}\n              <Card className=\"bg-gradient-to-br from-emerald-500/10 via-slate-800 to-slate-800 border-emerald-500/20 shadow-xl\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <Crown className=\"w-5 h-5 text-yellow-400\" />\n                    Ayın Affiliate'i\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center gap-4\">\n                    <Avatar className=\"w-16 h-16 ring-2 ring-emerald-500/50\">\n                      <AvatarImage src={topPerformer.avatar} />\n                      <AvatarFallback className=\"bg-emerald-500 text-white\">\n                        {topPerformer.name.split(' ').map(n => n[0]).join('')}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-white text-lg\">{topPerformer.name}</h3>\n                      <p className=\"text-slate-400 text-sm\">{topPerformer.username}</p>\n                      <div className=\"flex items-center gap-2 mt-2\">\n                        {getPlatformIcon(topPerformer.platform)}\n                        <span className=\"text-slate-400 text-xs\">{topPerformer.followers} takipçi</span>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-2xl font-bold text-emerald-400\">\n                        ₺{topPerformer.sales.toLocaleString()}\n                      </p>\n                      <p className=\"text-slate-400 text-sm\">Toplam Satış</p>\n                      <Badge className=\"bg-emerald-500/20 text-emerald-400 border-emerald-500/30 mt-2\">\n                        <ArrowUpRight className=\"w-3 h-3 mr-1\" />\n                        {topPerformer.conversionRate}% CVR\n                      </Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Warning Card */}\n              <Card className=\"bg-gradient-to-br from-red-500/10 via-slate-800 to-slate-800 border-red-500/20 shadow-xl\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <AlertTriangle className=\"w-5 h-5 text-red-400\" />\n                    Performans Uyarısı\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {warningPerformer && (\n                    <div className=\"flex items-center gap-4\">\n                      <Avatar className=\"w-16 h-16 ring-2 ring-red-500/50\">\n                        <AvatarImage src={warningPerformer.avatar} />\n                        <AvatarFallback className=\"bg-red-500 text-white\">\n                          {warningPerformer.name.split(' ').map(n => n[0]).join('')}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-white text-lg\">{warningPerformer.name}</h3>\n                        <p className=\"text-slate-400 text-sm\">{warningPerformer.username}</p>\n                        <div className=\"flex items-center gap-2 mt-2\">\n                          {getPlatformIcon(warningPerformer.platform)}\n                          <span className=\"text-slate-400 text-xs\">{warningPerformer.followers} takipçi</span>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-2xl font-bold text-red-400\">\n                          {warningPerformer.conversionRate}%\n                        </p>\n                        <p className=\"text-slate-400 text-sm\">Düşük CVR</p>\n                        <Badge className=\"bg-red-500/20 text-red-400 border-red-500/30 mt-2\">\n                          <TrendingDown className=\"w-3 h-3 mr-1\" />\n                          Dikkat Gerekiyor\n                        </Badge>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Performance Leaderboard */}\n            <Card className=\"bg-slate-800/80 border-slate-700/50 backdrop-blur-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Award className=\"w-5 h-5\" />\n                  Performans Liderlik Tablosu\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow className=\"border-slate-700\">\n                      <TableHead className=\"text-slate-300\">Affiliate</TableHead>\n                      <TableHead className=\"text-slate-300\">Getirilen Satış</TableHead>\n                      <TableHead className=\"text-slate-300\">Hakedilen Komisyon</TableHead>\n                      <TableHead className=\"text-slate-300\">Dönüşüm Oranı</TableHead>\n                      <TableHead className=\"text-slate-300\">Siparişler</TableHead>\n                      <TableHead className=\"text-slate-300\">İşlemler</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {affiliateData.map((affiliate, index) => (\n                      <TableRow key={affiliate.id} className=\"border-slate-700 hover:bg-slate-700/50\">\n                        <TableCell>\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"relative\">\n                              <Avatar className=\"w-10 h-10\">\n                                <AvatarImage src={affiliate.avatar} />\n                                <AvatarFallback className=\"bg-slate-600 text-slate-300\">\n                                  {affiliate.name.split(' ').map(n => n[0]).join('')}\n                                </AvatarFallback>\n                              </Avatar>\n                              {index === 0 && (\n                                <Crown className=\"w-4 h-4 text-yellow-400 absolute -top-1 -right-1\" />\n                              )}\n                            </div>\n                            <div>\n                              <p className=\"font-medium text-white\">{affiliate.name}</p>\n                              <div className=\"flex items-center gap-2\">\n                                <p className=\"text-slate-400 text-sm\">{affiliate.username}</p>\n                                {getPlatformIcon(affiliate.platform)}\n                              </div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div>\n                            <p className=\"font-semibold text-white\">₺{affiliate.sales.toLocaleString()}</p>\n                            <p className=\"text-slate-400 text-xs\">{affiliate.followers} takipçi</p>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <p className=\"font-semibold text-emerald-400\">₺{affiliate.commission.toLocaleString()}</p>\n                        </TableCell>\n                        <TableCell>\n                          {getPerformanceBadge(affiliate.performance, affiliate.conversionRate)}\n                        </TableCell>\n                        <TableCell>\n                          <p className=\"text-white\">{affiliate.orders}</p>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-slate-700\">\n                              <Eye className=\"w-3 h-3 mr-1\" />\n                              Detay\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-slate-700\">\n                              <Share2 className=\"w-3 h-3 mr-1\" />\n                              İletişim\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n\n    </div>\n  );\n}\n","size_bytes":14560},"client/src/pages/ai-assistant.tsx":{"content":"\nimport { useState, useRef, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { \n  Send, \n  Zap, \n  User, \n  Loader2,\n  Sparkles,\n  MessageCircle,\n  Bot,\n  TrendingUp,\n  Target,\n  Lightbulb,\n  Clock\n} from \"lucide-react\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { QUICK_ACTIONS } from \"@/lib/constants\";\n\ninterface Message {\n  id: string;\n  role: 'user' | 'ai';\n  content: string;\n  timestamp: Date;\n}\n\nconst quickSuggestions = [\n  \"ROAS analizi yap\",\n  \"En karlı kanalları göster\",\n  \"Bütçe dağılımını optimize et\",\n  \"Müşteri segmentasyonu öner\",\n  \"Rakip analizi yap\",\n  \"Konversiyon oranını artır\"\n];\n\nexport default function AIAssistantPage() {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      role: 'ai',\n      content: 'Merhaba! Ben sizin AI pazarlama asistanınızım. Kampanyalarınızı optimize etmek, analizler yapmak ve stratejik öneriler sunmak için buradayım. Size nasıl yardımcı olabilirim?',\n      timestamp: new Date()\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState('');\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  const chatMutation = useMutation({\n    mutationFn: api.sendChatMessage,\n    onSuccess: (response) => {\n      const aiMessage: Message = {\n        id: Date.now().toString() + '-ai',\n        role: 'ai',\n        content: response.response,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Yetkisiz Erişim\",\n          description: \"Oturumunuz sonlandı. Tekrar giriş yapılıyor...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Hata\",\n        description: \"Mesaj gönderilemedi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = (message?: string) => {\n    const messageText = message || inputMessage.trim();\n    if (!messageText) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: messageText,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n\n    chatMutation.mutate({\n      message: messageText,\n      context: 'AI Assistant Page - Marketing Intelligence Platform'\n    });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  useEffect(() => {\n    if (scrollAreaRef.current) {\n      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <div className=\"flex items-center gap-4 mb-4\">\n          <div className=\"w-12 h-12 bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl flex items-center justify-center\">\n            <Bot className=\"w-6 h-6 text-white\" />\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-bold text-white flex items-center gap-2\">\n              AI Pazarlama Asistanı\n              <Badge variant=\"secondary\" className=\"bg-blue-500/20 text-blue-300\">\n                <Sparkles className=\"w-3 h-3 mr-1\" />\n                Beta\n              </Badge>\n            </h1>\n            <p className=\"text-slate-400\">\n              Pazarlama stratejilerinizi optimize edin ve performansınızı artırın\n            </p>\n          </div>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          <Card className=\"bg-gradient-to-r from-green-500/10 to-emerald-500/10 border-green-500/30\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <TrendingUp className=\"w-8 h-8 text-green-400\" />\n                <div>\n                  <p className=\"text-green-400 font-bold text-lg\">127</p>\n                  <p className=\"text-slate-400 text-sm\">Optimizasyon Önerisi</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-blue-500/10 to-cyan-500/10 border-blue-500/30\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <Target className=\"w-8 h-8 text-blue-400\" />\n                <div>\n                  <p className=\"text-blue-400 font-bold text-lg\">89%</p>\n                  <p className=\"text-slate-400 text-sm\">Başarılı Tahmin</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-purple-500/10 to-pink-500/10 border-purple-500/30\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <MessageCircle className=\"w-8 h-8 text-purple-400\" />\n                <div>\n                  <p className=\"text-purple-400 font-bold text-lg\">{messages.length - 1}</p>\n                  <p className=\"text-slate-400 text-sm\">Sohbet Mesajı</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Main Chat Area */}\n      <div className=\"flex-1 grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        \n        {/* Chat Interface */}\n        <div className=\"lg:col-span-3\">\n          <Card className=\"h-full bg-slate-800/60 border-slate-700/50 backdrop-blur-sm\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <MessageCircle className=\"w-5 h-5 text-blue-400\" />\n                Sohbet\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent className=\"p-0 flex flex-col h-[calc(100%-80px)]\">\n              {/* Messages */}\n              <ScrollArea className=\"flex-1 p-6\" ref={scrollAreaRef}>\n                <div className=\"space-y-6\">\n                  {messages.map((message) => (\n                    <div key={message.id} className={`flex items-start gap-4 ${\n                      message.role === 'user' ? 'flex-row-reverse' : ''\n                    }`}>\n                      <div className=\"w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0\">\n                        {message.role === 'ai' ? (\n                          <div className=\"w-10 h-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center\">\n                            <Bot className=\"w-5 h-5 text-white\" />\n                          </div>\n                        ) : (\n                          <div className=\"w-10 h-10 bg-slate-600 rounded-full flex items-center justify-center\">\n                            <User className=\"w-5 h-5 text-slate-300\" />\n                          </div>\n                        )}\n                      </div>\n                      \n                      <div className={`message-bubble p-4 rounded-2xl max-w-[80%] ${\n                        message.role === 'user' \n                          ? 'bg-blue-600 text-white rounded-tr-sm' \n                          : 'bg-slate-700 text-slate-100 rounded-tl-sm'\n                      }`}>\n                        <p className=\"text-sm leading-relaxed whitespace-pre-wrap\">\n                          {message.content}\n                        </p>\n                        <p className={`text-xs mt-3 flex items-center gap-1 opacity-70 ${\n                          message.role === 'user' ? 'text-blue-100' : 'text-slate-400'\n                        }`}>\n                          <Clock className=\"w-3 h-3\" />\n                          {message.timestamp.toLocaleTimeString('tr-TR', { \n                            hour: '2-digit', \n                            minute: '2-digit' \n                          })}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                  \n                  {chatMutation.isPending && (\n                    <div className=\"flex items-start gap-4\">\n                      <div className=\"w-10 h-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center\">\n                        <Bot className=\"w-5 h-5 text-white\" />\n                      </div>\n                      <div className=\"bg-slate-700 rounded-2xl rounded-tl-sm p-4\">\n                        <div className=\"flex items-center gap-3\">\n                          <Loader2 className=\"w-4 h-4 animate-spin text-blue-400\" />\n                          <span className=\"text-sm text-slate-400\">Düşünüyorum...</span>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </ScrollArea>\n\n              {/* Input Area */}\n              <div className=\"p-6 border-t border-slate-700\">\n                <div className=\"flex items-center gap-3\">\n                  <Input\n                    placeholder=\"Sorunuzu yazın... (örn: ROAS analizi yap)\"\n                    value={inputMessage}\n                    onChange={(e) => setInputMessage(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    disabled={chatMutation.isPending}\n                    className=\"bg-slate-700 border-slate-600 text-slate-300 placeholder-slate-400 focus:border-blue-500\"\n                  />\n                  <Button\n                    onClick={() => handleSendMessage()}\n                    disabled={!inputMessage.trim() || chatMutation.isPending}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white px-4\"\n                  >\n                    {chatMutation.isPending ? (\n                      <Loader2 className=\"w-4 h-4 animate-spin\" />\n                    ) : (\n                      <Send className=\"w-4 h-4\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          \n          {/* Quick Suggestions */}\n          <Card className=\"bg-slate-800/60 border-slate-700/50 backdrop-blur-sm\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2 text-sm\">\n                <Lightbulb className=\"w-4 h-4 text-yellow-400\" />\n                Hızlı Sorular\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {quickSuggestions.map((suggestion, index) => (\n                <Button\n                  key={index}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleSendMessage(suggestion)}\n                  className=\"w-full justify-start bg-slate-700/50 hover:bg-slate-600 text-slate-300 border-slate-600 text-xs\"\n                  disabled={chatMutation.isPending}\n                >\n                  {suggestion}\n                </Button>\n              ))}\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <Card className=\"bg-slate-800/60 border-slate-700/50 backdrop-blur-sm\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2 text-sm\">\n                <Zap className=\"w-4 h-4 text-blue-400\" />\n                Hızlı İşlemler\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {QUICK_ACTIONS.slice(0, 4).map((action) => (\n                <Button\n                  key={action.id}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleSendMessage(action.prompt)}\n                  className=\"w-full justify-start bg-slate-700/50 hover:bg-slate-600 text-slate-300 border-slate-600 text-xs\"\n                  disabled={chatMutation.isPending}\n                >\n                  {action.label}\n                </Button>\n              ))}\n            </CardContent>\n          </Card>\n\n          {/* AI Capabilities */}\n          <Card className=\"bg-slate-800/60 border-slate-700/50 backdrop-blur-sm\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2 text-sm\">\n                <Sparkles className=\"w-4 h-4 text-purple-400\" />\n                AI Yetenekleri\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3 text-xs\">\n              <div className=\"flex items-center gap-2 text-slate-300\">\n                <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n                Gerçek zamanlı veri analizi\n              </div>\n              <div className=\"flex items-center gap-2 text-slate-300\">\n                <div className=\"w-2 h-2 bg-blue-400 rounded-full\"></div>\n                Otomatik optimizasyon önerileri\n              </div>\n              <div className=\"flex items-center gap-2 text-slate-300\">\n                <div className=\"w-2 h-2 bg-purple-400 rounded-full\"></div>\n                Tahminsel analitik\n              </div>\n              <div className=\"flex items-center gap-2 text-slate-300\">\n                <div className=\"w-2 h-2 bg-yellow-400 rounded-full\"></div>\n                Rakip analizi\n              </div>\n              <div className=\"flex items-center gap-2 text-slate-300\">\n                <div className=\"w-2 h-2 bg-pink-400 rounded-full\"></div>\n                Trend tespiti\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14183},"client/src/pages/campaigns.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\n\nimport { \n  Megaphone, \n  TrendingUp, \n  TrendingDown, \n  DollarSign, \n  Target, \n  MousePointer2, \n  Eye, \n  Users,\n  Calendar,\n  Download,\n  Play,\n  Pause,\n  Settings,\n  Filter,\n  Search,\n  Plus,\n  BarChart3,\n  Zap,\n  AlertTriangle,\n  CheckCircle,\n  Info,\n  Lightbulb,\n  Activity,\n  PieChart,\n  LineChart,\n  Clock,\n  Hash,\n  MapPin,\n  Smartphone,\n  Monitor,\n  Heart,\n  Share2,\n  Copy,\n  Edit,\n  Trash2,\n  ArrowRight,\n  \n} from \"lucide-react\";\nimport { LineChart as RechartsLineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart as RechartsPieChart, Cell, BarChart as RechartsBarChart, Bar } from 'recharts';\n\n// Genişletilmiş kampanya verisi\nconst CAMPAIGN_DATA = {\n  active: [\n    {\n      id: 1,\n      name: \"Kış Koleksiyonu 2024\",\n      type: \"Meta Ads\",\n      status: \"Aktif\",\n      budget: 50000,\n      spent: 32500,\n      impressions: 850000,\n      clicks: 24500,\n      conversions: 1250,\n      revenue: 125000,\n      ctr: 2.88,\n      cpc: 1.33,\n      roas: 3.85,\n      startDate: \"2024-01-01\",\n      endDate: \"2024-01-31\",\n      performance: \"excellent\",\n      trend: \"up\",\n      audience: \"25-45 Kadın\",\n      objective: \"Satış\",\n      platform: \"meta\"\n    },\n    {\n      id: 2,\n      name: \"Marka Farkındalık Kampanyası\",\n      type: \"Google Ads\",\n      status: \"Aktif\",\n      budget: 75000,\n      spent: 45000,\n      impressions: 1200000,\n      clicks: 38400,\n      conversions: 960,\n      revenue: 96000,\n      ctr: 3.2,\n      cpc: 1.17,\n      roas: 2.13,\n      startDate: \"2024-01-05\",\n      endDate: \"2024-02-05\",\n      performance: \"good\",\n      trend: \"stable\",\n      audience: \"18-65 Hepsi\",\n      objective: \"Farkındalık\",\n      platform: \"google\"\n    },\n    {\n      id: 3,\n      name: \"TikTok Viral Video Serisi\",\n      type: \"TikTok Ads\",\n      status: \"Test Aşaması\",\n      budget: 25000,\n      spent: 8500,\n      impressions: 450000,\n      clicks: 18000,\n      conversions: 180,\n      revenue: 18000,\n      ctr: 4.0,\n      cpc: 0.47,\n      roas: 2.12,\n      startDate: \"2024-01-15\",\n      endDate: \"2024-02-15\",\n      performance: \"testing\",\n      trend: \"up\",\n      audience: \"16-24 Gen Z\",\n      objective: \"Engagement\",\n      platform: \"tiktok\"\n    },\n    {\n      id: 4,\n      name: \"Remarketing - Sepet Terk\",\n      type: \"Meta Ads\",\n      status: \"Optimize Ediliyor\",\n      budget: 20000,\n      spent: 15000,\n      impressions: 320000,\n      clicks: 12800,\n      conversions: 640,\n      revenue: 64000,\n      ctr: 4.0,\n      cpc: 1.17,\n      roas: 4.27,\n      startDate: \"2024-01-10\",\n      endDate: \"2024-02-10\",\n      performance: \"excellent\",\n      trend: \"up\",\n      audience: \"Sepet Terk Eden\",\n      objective: \"Retargeting\",\n      platform: \"meta\"\n    }\n  ],\n  draft: [\n    {\n      id: 5,\n      name: \"Bahar Koleksiyonu Ön Lansmanı\",\n      type: \"Meta Ads\",\n      status: \"Taslak\",\n      budget: 60000,\n      audience: \"25-45 Kadın\",\n      objective: \"Satış\",\n      platform: \"meta\"\n    },\n    {\n      id: 6,\n      name: \"Google Shopping Kampanyası\",\n      type: \"Google Ads\", \n      status: \"Taslak\",\n      budget: 40000,\n      audience: \"Alışveriş Niyetli\",\n      objective: \"Satış\",\n      platform: \"google\"\n    }\n  ],\n  completed: [\n    {\n      id: 7,\n      name: \"Yılbaşı Özel İndirimleri\",\n      type: \"Meta Ads\",\n      status: \"Tamamlandı\",\n      budget: 80000,\n      spent: 78500,\n      revenue: 245000,\n      roas: 3.12,\n      platform: \"meta\"\n    }\n  ]\n};\n\nconst PERFORMANCE_COLORS = {\n  excellent: \"text-green-400 bg-green-400/10 border-green-400/20\",\n  good: \"text-blue-400 bg-blue-400/10 border-blue-400/20\",\n  testing: \"text-yellow-400 bg-yellow-400/10 border-yellow-400/20\",\n  poor: \"text-red-400 bg-red-400/10 border-red-400/20\"\n};\n\nconst PLATFORM_COLORS = {\n  meta: \"from-blue-500 to-blue-700\",\n  google: \"from-red-500 to-yellow-500\",\n  tiktok: \"from-pink-500 to-black\"\n};\n\nconst ACTION_SUGGESTIONS = [\n  {\n    id: 1,\n    type: \"opportunity\",\n    title: \"Remarketing Kampanyanı Ölçeklendir\",\n    description: \"Sepet terk kampanyan 4.27x ROAS ile mükemmel performans gösteriyor. Bütçesini %50 artırarak daha fazla gelir elde edebilirsin.\",\n    priority: \"high\",\n    estimatedImpact: \"+₺32,000 aylık gelir\",\n    action: \"Bütçeyi Artır\",\n    campaignId: 4\n  },\n  {\n    type: \"warning\",\n    title: \"Google Kampanyası Optimizasyona İhtiyaç Duyuyor\",\n    description: \"Marka farkındalık kampanyan düşük ROAS gösteriyor. Hedef kitle segmentasyonu ve teklif stratejisi gözden geçirilmeli.\",\n    priority: \"medium\",\n    estimatedImpact: \"+₺15,000 potansiyel tasarruf\",\n    action: \"Optimize Et\",\n    campaignId: 2\n  },\n  {\n    type: \"insight\",\n    title: \"TikTok Kampanyası Umut Verici\",\n    description: \"Gen Z hedef kitlen TikTok'ta yüksek engagement gösteriyor. Test süresini uzatıp daha fazla kreatif ekleyebilirsin.\",\n    priority: \"low\",\n    estimatedImpact: \"+₺8,000 potansiyel gelir\",\n    action: \"Test Genişlet\",\n    campaignId: 3\n  },\n  {\n    type: \"opportunity\",\n    title: \"Bahar Koleksiyonu Kampanyasını Başlat\",\n    description: \"Mevsim yaklaşıyor ve kış kampanyan başarılı. Bahar koleksiyonu için benzer strateji ile erken başlama avantajı yakalayabilirsin.\",\n    priority: \"high\",\n    estimatedImpact: \"+₺45,000 potansiyel gelir\",\n    action: \"Kampanyayı Başlat\",\n    campaignId: 5\n  }\n];\n\nconst COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6'];\n\nexport default function CampaignsPage() {\n  const [selectedTab, setSelectedTab] = useState(\"active\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [platformFilter, setPlatformFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"roas\");\n  \n\n  const getPerformanceBadge = (performance: string) => {\n    const styles = PERFORMANCE_COLORS[performance as keyof typeof PERFORMANCE_COLORS] || PERFORMANCE_COLORS.good;\n    const labels = {\n      excellent: \"Mükemmel\",\n      good: \"İyi\", \n      testing: \"Test\",\n      poor: \"Zayıf\"\n    };\n    return (\n      <Badge className={`${styles} border`}>\n        {labels[performance as keyof typeof labels] || \"Bilinmiyor\"}\n      </Badge>\n    );\n  };\n\n  const getTrendIcon = (trend: string) => {\n    switch(trend) {\n      case \"up\": return <TrendingUp className=\"w-4 h-4 text-green-400\" />;\n      case \"down\": return <TrendingDown className=\"w-4 h-4 text-red-400\" />;\n      default: return <Activity className=\"w-4 h-4 text-yellow-400\" />;\n    }\n  };\n\n  const getPlatformIcon = (platform: string) => {\n    switch(platform) {\n      case \"google\": return \"🔍\";\n      case \"meta\": return \"📘\";\n      case \"tiktok\": return \"🎵\";\n      default: return \"📊\";\n    }\n  };\n\n  const getActionIcon = (type: string) => {\n    switch(type) {\n      case \"opportunity\": return <TrendingUp className=\"w-5 h-5 text-green-400\" />;\n      case \"warning\": return <AlertTriangle className=\"w-5 h-5 text-yellow-400\" />;\n      default: return <Lightbulb className=\"w-5 h-5 text-blue-400\" />;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch(status) {\n      case \"Aktif\":\n        return <Badge className=\"bg-green-600 hover:bg-green-700 text-white\">Aktif</Badge>;\n      case \"Test Aşaması\":\n        return <Badge className=\"bg-blue-600 hover:bg-blue-700 text-white\">Test Aşaması</Badge>;\n      case \"Optimize Ediliyor\":\n        return <Badge className=\"bg-yellow-600 hover:bg-yellow-700 text-white\">Optimize Ediliyor</Badge>;\n      case \"Duraklatıldı\":\n        return <Badge className=\"bg-orange-600 hover:bg-orange-700 text-white\">Duraklatıldı</Badge>;\n      case \"Tamamlandı\":\n        return <Badge className=\"bg-gray-600 hover:bg-gray-700 text-white\">Tamamlandı</Badge>;\n      default:\n        return <Badge className=\"bg-gray-600 hover:bg-gray-700 text-white\">{status}</Badge>;\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch(status) {\n      case \"Aktif\":\n        return <div className=\"w-3 h-3 rounded-full bg-green-400\"></div>;\n      case \"Test Aşaması\":\n        return <div className=\"w-3 h-3 rounded-full bg-blue-400\"></div>;\n      case \"Optimize Ediliyor\":\n        return <div className=\"w-3 h-3 rounded-full bg-yellow-400\"></div>;\n      case \"Duraklatıldı\":\n        return <div className=\"w-3 h-3 rounded-full bg-orange-400\"></div>;\n      case \"Tamamlandı\":\n        return <div className=\"w-3 h-3 rounded-full bg-gray-400\"></div>;\n      default:\n        return <div className=\"w-3 h-3 rounded-full bg-gray-400\"></div>;\n    }\n  };\n\n\n  const CampaignCard = ({ campaign, showActions = true }: any) => (\n    <Card className=\"bg-slate-800 border-slate-700 hover:bg-slate-750 transition-all duration-200 group w-full\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-3\">\n          <div className=\"flex items-start gap-3 flex-1 min-w-0\">\n            <div className={`w-10 h-10 rounded-lg bg-gradient-to-br ${PLATFORM_COLORS[campaign.platform]} flex items-center justify-center text-white text-lg flex-shrink-0`}>\n              {getPlatformIcon(campaign.platform)}\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <CardTitle className=\"text-white text-base font-semibold leading-tight mb-2 break-words\">\n                {campaign.name}\n              </CardTitle>\n              <div className=\"flex flex-wrap items-center gap-2\">\n                <Badge variant=\"outline\" className=\"text-xs border-slate-600 text-slate-400\">\n                  {campaign.type}\n                </Badge>\n                {campaign.performance && getPerformanceBadge(campaign.performance)}\n              </div>\n            </div>\n          </div>\n          {campaign.trend && (\n            <div className=\"opacity-0 group-hover:opacity-100 transition-opacity flex-shrink-0\">\n              {getTrendIcon(campaign.trend)}\n            </div>\n          )}\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {campaign.status !== \"Taslak\" && campaign.spent && (\n          <>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-1\">\n                <p className=\"text-slate-400 text-xs font-medium\">Harcanan / Bütçe</p>\n                <p className=\"text-white font-semibold\">₺{campaign.spent?.toLocaleString()} / ₺{campaign.budget?.toLocaleString()}</p>\n                <div className=\"w-full bg-slate-700 rounded-full h-2\">\n                  <div \n                    className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\" \n                    style={{ width: `${Math.min((campaign.spent / campaign.budget) * 100, 100)}%` }}\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-1\">\n                <p className=\"text-slate-400 text-xs font-medium\">ROAS</p>\n                <p className={`font-bold text-lg ${\n                  campaign.roas >= 4 ? 'text-green-400' : \n                  campaign.roas >= 2 ? 'text-yellow-400' : 'text-red-400'\n                }`}>\n                  {campaign.roas?.toFixed(2)}x\n                </p>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-3 py-3 border-t border-slate-700\">\n              <div className=\"text-center\">\n                <p className=\"text-slate-400 text-xs\">Dönüşüm</p>\n                <p className=\"text-white font-semibold text-sm\">{campaign.conversions?.toLocaleString()}</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-slate-400 text-xs\">CTR</p>\n                <p className=\"text-white font-semibold text-sm\">{campaign.ctr?.toFixed(1)}%</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-slate-400 text-xs\">CPC</p>\n                <p className=\"text-white font-semibold text-sm\">₺{campaign.cpc?.toFixed(2)}</p>\n              </div>\n            </div>\n          </>\n        )}\n\n        {campaign.status === \"Taslak\" && (\n          <div className=\"space-y-3\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <p className=\"text-slate-400 text-xs font-medium\">Bütçe</p>\n                <p className=\"text-white font-semibold\">₺{campaign.budget?.toLocaleString()}</p>\n              </div>\n              <div>\n                <p className=\"text-slate-400 text-xs font-medium\">Hedef Kitle</p>\n                <p className=\"text-white font-semibold text-sm\">{campaign.audience}</p>\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <p className=\"text-slate-400 text-xs font-medium\">Amaç</p>\n                <p className=\"text-white font-semibold text-sm\">{campaign.objective}</p>\n              </div>\n              <div>\n                <p className=\"text-slate-400 text-xs font-medium\">Platform</p>\n                <p className=\"text-white font-semibold text-sm\">{campaign.type}</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {showActions && (\n          <div className=\"flex gap-2 pt-3 border-t border-slate-700\">\n            <Button size=\"sm\" variant=\"outline\" className=\"flex-1 border-slate-600 text-slate-300 hover:bg-slate-700\">\n              <Edit className=\"w-3 h-3 mr-1\" />\n              Düzenle\n            </Button>\n            <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-slate-700\">\n              {campaign.status === \"Aktif\" ? <Pause className=\"w-3 h-3\" /> : <Play className=\"w-3 h-3\" />}\n            </Button>\n            <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-slate-700\">\n              <Copy className=\"w-3 h-3\" />\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  const filteredCampaigns = CAMPAIGN_DATA.active.filter(campaign => {\n    const matchesSearch = campaign.name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || campaign.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* İki sütunlu düzen */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n\n              {/* Sol Panel - Özet ve Kontroller */}\n              <div className=\"lg:col-span-1 space-y-6\">\n                {/* Başlık */}\n                <div>\n                  <h1 className=\"text-2xl font-bold text-white mb-2 flex items-center gap-3\">\n                    <Megaphone className=\"w-6 h-6 text-blue-400\" />\n                    Kampanya Yönetimi\n                  </h1>\n                  <p className=\"text-slate-400 text-sm\">Tüm reklam kampanyalarınızı tek yerden yönetin</p>\n                </div>\n\n                {/* KPI Kartları */}\n                <div className=\"grid grid-cols-1 gap-4\">\n                  <Card className=\"bg-slate-800 border-slate-700\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-slate-400 text-xs font-medium uppercase tracking-wide\">Aktif Kampanya</p>\n                          <p className=\"text-2xl font-bold text-white mt-1\">{CAMPAIGN_DATA.active.length}</p>\n                        </div>\n                        <div className=\"w-10 h-10 rounded-xl bg-gradient-to-br from-blue-500 to-blue-700 flex items-center justify-center text-white\">\n                          <Play className=\"w-5 h-5\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-slate-800 border-slate-700\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-slate-400 text-xs font-medium uppercase tracking-wide\">Toplam Harcama</p>\n                          <p className=\"text-2xl font-bold text-white mt-1\">₺{CAMPAIGN_DATA.active.reduce((sum, c) => sum + c.spent, 0).toLocaleString()}</p>\n                        </div>\n                        <div className=\"w-10 h-10 rounded-xl bg-gradient-to-br from-red-500 to-pink-500 flex items-center justify-center text-white\">\n                          <DollarSign className=\"w-5 h-5\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-slate-800 border-slate-700\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-slate-400 text-xs font-medium uppercase tracking-wide\">Toplam Gelir</p>\n                          <p className=\"text-2xl font-bold text-white mt-1\">₺{CAMPAIGN_DATA.active.reduce((sum, c) => sum + c.revenue, 0).toLocaleString()}</p>\n                        </div>\n                        <div className=\"w-10 h-10 rounded-xl bg-gradient-to-br from-green-500 to-emerald-500 flex items-center justify-center text-white\">\n                          <TrendingUp className=\"w-5 h-5\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-slate-800 border-slate-700\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-slate-400 text-xs font-medium uppercase tracking-wide\">Ortalama ROAS</p>\n                          <p className=\"text-2xl font-bold text-white mt-1\">\n                            {(CAMPAIGN_DATA.active.reduce((sum, c) => sum + c.roas, 0) / CAMPAIGN_DATA.active.length).toFixed(2)}x\n                          </p>\n                        </div>\n                        <div className=\"w-10 h-10 rounded-xl bg-gradient-to-br from-purple-500 to-indigo-500 flex items-center justify-center text-white\">\n                          <Target className=\"w-5 h-5\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Aksiyon Önerileri */}\n                <Card className=\"bg-slate-800 border-slate-700\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white flex items-center gap-2 text-lg\">\n                      <Zap className=\"w-5 h-5 text-yellow-400\" />\n                      Aksiyon Önerileri\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {ACTION_SUGGESTIONS.map((suggestion, index) => (\n                        <div key={index} className={`p-3 rounded-lg border-l-4 ${\n                          suggestion.type === 'opportunity' ? 'bg-green-900/20 border-green-400' :\n                          suggestion.type === 'warning' ? 'bg-yellow-900/20 border-yellow-400' :\n                          'bg-blue-900/20 border-blue-400'\n                        }`}>\n                          <div className=\"flex items-start gap-3\">\n                            {getActionIcon(suggestion.type)}\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-semibold text-white mb-1 text-sm\">{suggestion.title}</h4>\n                              <p className=\"text-slate-300 text-xs mb-2\">{suggestion.description}</p>\n                              <div className=\"flex items-center gap-2 mb-2\">\n                                <Badge variant=\"outline\" className={`text-xs ${\n                                  suggestion.priority === 'high' ? 'border-red-400 text-red-400' :\n                                  suggestion.priority === 'medium' ? 'border-yellow-400 text-yellow-400' :\n                                  'border-blue-400 text-blue-400'\n                                }`}>\n                                  {suggestion.priority === 'high' ? 'Yüksek' :\n                                   suggestion.priority === 'medium' ? 'Orta' : 'Düşük'}\n                                </Badge>\n                                <span className=\"text-green-400 text-xs\">{suggestion.estimatedImpact}</span>\n                              </div>\n                              <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700 text-xs h-7\">\n                                {suggestion.action}\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Sağ Panel - Ana İçerik */}\n              <div className=\"lg:col-span-3 space-y-6\">\n\n                {/* Kontroller */}\n                <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n                  <div className=\"flex flex-col sm:flex-row gap-3 w-full sm:w-auto\">\n                    <div className=\"flex items-center gap-2\">\n                      <Search className=\"w-4 h-4 text-slate-400 flex-shrink-0\" />\n                      <Input\n                        placeholder=\"Kampanya ara...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"bg-slate-700 border-slate-600 text-white w-full sm:w-48\"\n                      />\n                    </div>\n\n                    <Select value={platformFilter} onValueChange={setPlatformFilter}>\n                      <SelectTrigger className=\"bg-slate-700 border-slate-600 text-slate-300 w-full sm:w-40\">\n                        <SelectValue placeholder=\"Platform\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-slate-800 border-slate-600\">\n                        <SelectItem value=\"all\">Tüm Platformlar</SelectItem>\n                        <SelectItem value=\"meta\">Meta Ads</SelectItem>\n                        <SelectItem value=\"google\">Google Ads</SelectItem>\n                        <SelectItem value=\"tiktok\">TikTok Ads</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"flex gap-3 w-full sm:w-auto\">\n                    <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Yeni Kampanya\n                    </Button>\n                    <Button variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-slate-700\">\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Rapor Al\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Kampanya Performans Tablosu */}\n                <Card className=\"bg-slate-800 border-slate-700\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white flex items-center gap-2\">\n                      <BarChart3 className=\"w-5 h-5 text-green-400\" />\n                      Kampanya Performansları ({filteredCampaigns.length})\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead>\n                          <tr className=\"border-b border-slate-700\">\n                            <th className=\"text-left py-3 px-4 text-slate-300 font-medium\">Kampanya Adı</th>\n                            <th className=\"text-left py-3 px-4 text-slate-300 font-medium\">Durum</th>\n                            <th className=\"text-left py-3 px-4 text-slate-300 font-medium\">Harcama</th>\n                            <th className=\"text-left py-3 px-4 text-slate-300 font-medium\">Gelir</th>\n                            <th className=\"text-left py-3 px-4 text-slate-300 font-medium\">ROAS</th>\n                            <th className=\"text-left py-3 px-4 text-slate-300 font-medium\">İşlemler</th>\n                          </tr>\n                        </thead>\n                        <tbody className=\"divide-y divide-slate-700\">\n                          {filteredCampaigns.map((campaign) => (\n                            <tr key={campaign.id} className=\"hover:bg-slate-700/30 transition-colors\">\n                              <td className=\"py-3 px-4\">\n                                <div className=\"font-medium text-white\">{campaign.name}</div>\n                                <div className=\"text-sm text-slate-400\">\n                                  {campaign.type} • {campaign.impressions?.toLocaleString()} gösterim\n                                </div>\n                              </td>\n                              <td className=\"py-3 px-4\">\n                                <div className=\"flex items-center gap-2\">\n                                  {getStatusIcon(campaign.status)}\n                                  {getStatusBadge(campaign.status)}\n                                </div>\n                              </td>\n                              <td className=\"py-3 px-4 text-slate-300 font-medium\">₺{campaign.spent?.toLocaleString()}</td>\n                              <td className=\"py-3 px-4 text-green-400 font-bold\">₺{campaign.revenue?.toLocaleString()}</td>\n                              <td className=\"py-3 px-4\">\n                                <span className={`font-bold ${campaign.roas >= 4 ? 'text-green-400' : campaign.roas >= 2 ? 'text-yellow-400' : 'text-red-400'}`}>\n                                  {campaign.roas?.toFixed(2)}x\n                                </span>\n                              </td>\n                              <td className=\"py-3 px-4\">\n                                <div className=\"flex gap-2\">\n                                  <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-slate-700\">\n                                    <Edit className=\"w-3 h-3\" />\n                                  </Button>\n                                  <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-slate-700\">\n                                    {campaign.status === \"Aktif\" ? <Pause className=\"w-3 h-3\" /> : <Play className=\"w-3 h-3\" />}\n                                  </Button>\n                                  <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-slate-700\">\n                                    <Settings className=\"w-3 h-3\" />\n                                  </Button>\n                                </div>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n\n                    {filteredCampaigns.length === 0 && (\n                      <div className=\"text-center py-8\">\n                        <p className=\"text-slate-400\">Arama kriterlerinize uygun kampanya bulunamadı.</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":28212},"client/src/pages/collaborations.tsx":{"content":"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { \n  Handshake, \n  Users, \n  Star, \n  TrendingUp, \n  Building2, \n  Calendar,\n  ArrowRight,\n  Plus,\n  FileText,\n  Target\n} from \"lucide-react\";\n\nexport default function Collaborations() {\n  return (\n    <div className=\"space-y-6\">\n\n            {/* Header Section */}\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-white mb-2\">İş Birlikleri</h1>\n                <p className=\"text-slate-400\">\n                  Tüm iş birliği türlerinizi tek merkezden yönetin. Influencer, affiliate ve kurumsal ortaklıklarınızı takip edin.\n                </p>\n              </div>\n              <Button className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Yeni İş Birliği\n              </Button>\n            </div>\n\n            {/* Partnership Types Grid */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              \n              {/* Affiliate Marketing */}\n              <Link href=\"/collaborations/affiliate\">\n                <Card className=\"bg-slate-800/80 border-slate-700/50 backdrop-blur-sm hover:bg-slate-700/80 transition-all cursor-pointer group\">\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-blue-500 rounded-lg flex items-center justify-center\">\n                        <Users className=\"w-6 h-6 text-white\" />\n                      </div>\n                      <ArrowRight className=\"w-5 h-5 text-slate-400 group-hover:text-white transition-colors\" />\n                    </div>\n                    <CardTitle className=\"text-white\">Affiliate Marketing</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-slate-400 mb-4\">\n                      Influencer ve affiliate ortaklarınızın performansını izleyin, komisyonları yönetin.\n                    </p>\n                    <div className=\"flex items-center gap-4 text-sm\">\n                      <div className=\"flex items-center gap-1 text-emerald-400\">\n                        <TrendingUp className=\"w-4 h-4\" />\n                        <span>23 Aktif Ortak</span>\n                      </div>\n                      <div className=\"flex items-center gap-1 text-blue-400\">\n                        <Star className=\"w-4 h-4\" />\n                        <span>4.8 Puan</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </Link>\n\n              {/* Brand Partnerships */}\n              <Card className=\"bg-slate-800/80 border-slate-700/50 backdrop-blur-sm hover:bg-slate-700/80 transition-all cursor-pointer group\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-green-500 to-teal-500 rounded-lg flex items-center justify-center\">\n                      <Building2 className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <ArrowRight className=\"w-5 h-5 text-slate-400 group-hover:text-white transition-colors\" />\n                  </div>\n                  <CardTitle className=\"text-white\">Marka Ortaklıkları</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-slate-400 mb-4\">\n                    Kurumsal marka ortaklıkları ve co-marketing kampanyalarınızı yönetin.\n                  </p>\n                  <div className=\"flex items-center gap-4 text-sm\">\n                    <div className=\"flex items-center gap-1 text-emerald-400\">\n                      <Building2 className=\"w-4 h-4\" />\n                      <span>8 Aktif Marka</span>\n                    </div>\n                    <div className=\"flex items-center gap-1 text-yellow-400\">\n                      <Calendar className=\"w-4 h-4\" />\n                      <span>5 Bekleyen</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Strategic Partnerships */}\n              <Card className=\"bg-slate-800/80 border-slate-700/50 backdrop-blur-sm hover:bg-slate-700/80 transition-all cursor-pointer group\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-orange-500 to-red-500 rounded-lg flex items-center justify-center\">\n                      <Target className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <ArrowRight className=\"w-5 h-5 text-slate-400 group-hover:text-white transition-colors\" />\n                  </div>\n                  <CardTitle className=\"text-white\">Stratejik Ortaklıklar</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-slate-400 mb-4\">\n                    Uzun vadeli stratejik iş birlikleri ve joint venture projelerinizi takip edin.\n                  </p>\n                  <div className=\"flex items-center gap-4 text-sm\">\n                    <div className=\"flex items-center gap-1 text-emerald-400\">\n                      <Handshake className=\"w-4 h-4\" />\n                      <span>3 Aktif Proje</span>\n                    </div>\n                    <div className=\"flex items-center gap-1 text-blue-400\">\n                      <FileText className=\"w-4 h-4\" />\n                      <span>2 Müzakere</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Activity */}\n            <Card className=\"bg-slate-800/80 border-slate-700/50 backdrop-blur-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Calendar className=\"w-5 h-5\" />\n                  Son Aktiviteler\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-3 p-3 bg-slate-700/50 rounded-lg\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-white text-sm\">Ayşe Moda ile yeni komisyon anlaşması imzalandı</p>\n                      <p className=\"text-slate-400 text-xs\">2 saat önce</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-3 p-3 bg-slate-700/50 rounded-lg\">\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-white text-sm\">TechBrand ortaklık önerisi alındı</p>\n                      <p className=\"text-slate-400 text-xs\">1 gün önce</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-3 p-3 bg-slate-700/50 rounded-lg\">\n                    <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-white text-sm\">Q1 ortaklık performans raporu hazırlandı</p>\n                      <p className=\"text-slate-400 text-xs\">3 gün önce</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n    </div>\n  );\n}\n","size_bytes":7865},"client/src/pages/team.tsx":{"content":"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Users2, \n  Plus, \n  Calendar,\n  Clock,\n  AlertTriangle,\n  CheckCircle,\n  Circle,\n  PlayCircle,\n  Eye,\n  MoreHorizontal\n} from \"lucide-react\";\n\n// Mock data\nconst teamMembers = [\n  {\n    id: 1,\n    name: \"Ahmet Kaya\",\n    role: \"Pazarlama Müdürü\",\n    avatar: \"/api/placeholder/40/40\",\n    activeTasks: 3,\n    overdueTasks: 1,\n    status: \"online\"\n  },\n  {\n    id: 2,\n    name: \"Zeynep Demir\",\n    role: \"İçerik Uzmanı\",\n    avatar: \"/api/placeholder/40/40\",\n    activeTasks: 5,\n    overdueTasks: 0,\n    status: \"online\"\n  },\n  {\n    id: 3,\n    name: \"Mehmet Yılmaz\",\n    role: \"Veri Analisti\",\n    avatar: \"/api/placeholder/40/40\",\n    activeTasks: 2,\n    overdueTasks: 0,\n    status: \"away\"\n  },\n  {\n    id: 4,\n    name: \"Selin Özkan\",\n    role: \"Sosyal Medya Uzmanı\",\n    avatar: \"/api/placeholder/40/40\",\n    activeTasks: 4,\n    overdueTasks: 2,\n    status: \"online\"\n  }\n];\n\nconst unassignedTasks = [\n  {\n    id: 1,\n    title: \"Q1 Pazar Analizi Raporu\",\n    priority: \"high\",\n    deadline: \"2024-01-25\",\n    description: \"Q1 için kapsamlı pazar analizi raporu hazırlanması\"\n  },\n  {\n    id: 2,\n    title: \"Meta Ads Kampanya Optimizasyonu\",\n    priority: \"medium\",\n    deadline: \"2024-01-28\",\n    description: \"Düşük performanslı kampanyaların optimize edilmesi\"\n  },\n  {\n    id: 3,\n    title: \"Müşteri Segmentasyon Analizi\",\n    priority: \"low\",\n    deadline: \"2024-02-05\",\n    description: \"Yeni müşteri segmentlerinin belirlenmesi\"\n  }\n];\n\nconst kanbanTasks = {\n  todo: [\n    {\n      id: 4,\n      title: \"Google Ads ROI Analizi\",\n      priority: \"high\",\n      deadline: \"2024-01-26\",\n      assignee: { name: \"Ahmet K.\", avatar: \"/api/placeholder/32/32\" }\n    },\n    {\n      id: 5,\n      title: \"İçerik Takvimi Hazırlama\",\n      priority: \"medium\",\n      deadline: \"2024-01-30\",\n      assignee: { name: \"Zeynep D.\", avatar: \"/api/placeholder/32/32\" }\n    }\n  ],\n  inProgress: [\n    {\n      id: 6,\n      title: \"Rakip Analizi Raporu\",\n      priority: \"high\",\n      deadline: \"2024-01-24\",\n      assignee: { name: \"Mehmet Y.\", avatar: \"/api/placeholder/32/32\" }\n    },\n    {\n      id: 7,\n      title: \"Instagram Hikaye Kampanyası\",\n      priority: \"medium\",\n      deadline: \"2024-01-27\",\n      assignee: { name: \"Selin Ö.\", avatar: \"/api/placeholder/32/32\" }\n    }\n  ],\n  review: [\n    {\n      id: 8,\n      title: \"Müşteri Memnuniyet Anketi\",\n      priority: \"low\",\n      deadline: \"2024-01-29\",\n      assignee: { name: \"Zeynep D.\", avatar: \"/api/placeholder/32/32\" }\n    }\n  ],\n  done: [\n    {\n      id: 9,\n      title: \"Aylık Performans Raporu\",\n      priority: \"high\",\n      deadline: \"2024-01-20\",\n      assignee: { name: \"Ahmet K.\", avatar: \"/api/placeholder/32/32\" }\n    },\n    {\n      id: 10,\n      title: \"TikTok Ads Hesap Kurulumu\",\n      priority: \"medium\",\n      deadline: \"2024-01-18\",\n      assignee: { name: \"Selin Ö.\", avatar: \"/api/placeholder/32/32\" }\n    }\n  ]\n};\n\nconst getPriorityColor = (priority: string) => {\n  switch (priority) {\n    case 'high':\n      return 'bg-red-500/10 text-red-400 border-red-500/20';\n    case 'medium':\n      return 'bg-yellow-500/10 text-yellow-400 border-yellow-500/20';\n    case 'low':\n      return 'bg-green-500/10 text-green-400 border-green-500/20';\n    default:\n      return 'bg-slate-500/10 text-slate-400 border-slate-500/20';\n  }\n};\n\nconst getPriorityLabel = (priority: string) => {\n  switch (priority) {\n    case 'high':\n      return 'Yüksek';\n    case 'medium':\n      return 'Orta';\n    case 'low':\n      return 'Düşük';\n    default:\n      return 'Normal';\n  }\n};\n\nconst TaskCard = ({ task, showAssignee = true }: { task: any, showAssignee?: boolean }) => (\n  <Card className=\"bg-slate-800/80 border-slate-700/50 backdrop-blur-sm hover:bg-slate-700/80 transition-all cursor-pointer mb-3\">\n    <CardContent className=\"p-4\">\n      <div className=\"flex items-start justify-between mb-2\">\n        <h4 className=\"text-white font-medium text-sm line-clamp-2\">{task.title}</h4>\n        <Button variant=\"ghost\" size=\"sm\" className=\"h-6 w-6 p-0 text-slate-400 hover:text-white\">\n          <MoreHorizontal className=\"h-3 w-3\" />\n        </Button>\n      </div>\n      \n      <div className=\"flex items-center gap-2 mb-3\">\n        <Badge className={`text-xs px-2 py-0.5 ${getPriorityColor(task.priority)}`}>\n          {getPriorityLabel(task.priority)}\n        </Badge>\n        <div className=\"flex items-center gap-1 text-xs text-slate-400\">\n          <Calendar className=\"h-3 w-3\" />\n          {new Date(task.deadline).toLocaleDateString('tr-TR')}\n        </div>\n      </div>\n\n      {task.description && (\n        <p className=\"text-slate-400 text-xs mb-3 line-clamp-2\">{task.description}</p>\n      )}\n\n      {showAssignee && task.assignee && (\n        <div className=\"flex items-center gap-2\">\n          <Avatar className=\"h-6 w-6\">\n            <AvatarImage src={task.assignee.avatar} />\n            <AvatarFallback className=\"text-xs\">{task.assignee.name.charAt(0)}</AvatarFallback>\n          </Avatar>\n          <span className=\"text-xs text-slate-300\">{task.assignee.name}</span>\n        </div>\n      )}\n    </CardContent>\n  </Card>\n);\n\nexport default function Team() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex h-screen\">\n            \n            {/* Sol Panel - Ekip */}\n            <div className=\"w-80 border-r border-slate-700/50 p-6 overflow-y-auto\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-xl font-bold text-white flex items-center gap-2\">\n                  <Users2 className=\"w-5 h-5\" />\n                  Ekip\n                </h2>\n                <Button size=\"sm\" className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white\">\n                  <Plus className=\"w-4 h-4 mr-1\" />\n                  Üye Ekle\n                </Button>\n              </div>\n\n              <div className=\"space-y-4\">\n                {teamMembers.map((member) => (\n                  <Card key={member.id} className=\"bg-slate-800/80 border-slate-700/50 backdrop-blur-sm hover:bg-slate-700/80 transition-all cursor-pointer\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"relative\">\n                          <Avatar className=\"h-10 w-10\">\n                            <AvatarImage src={member.avatar} />\n                            <AvatarFallback>{member.name.charAt(0)}</AvatarFallback>\n                          </Avatar>\n                          <div className={`absolute -bottom-0.5 -right-0.5 w-3 h-3 rounded-full border-2 border-slate-800 ${\n                            member.status === 'online' ? 'bg-green-500' : 'bg-yellow-500'\n                          }`} />\n                        </div>\n                        \n                        <div className=\"flex-1 min-w-0\">\n                          <h3 className=\"text-white font-medium text-sm truncate\">{member.name}</h3>\n                          <p className=\"text-slate-400 text-xs mb-3\">{member.role}</p>\n                          \n                          <div className=\"flex items-center gap-4 text-xs\">\n                            <div className=\"flex items-center gap-1 text-blue-400\">\n                              <Circle className=\"w-3 h-3\" />\n                              <span>{member.activeTasks} Aktif</span>\n                            </div>\n                            {member.overdueTasks > 0 && (\n                              <div className=\"flex items-center gap-1 text-red-400\">\n                                <AlertTriangle className=\"w-3 h-3\" />\n                                <span>{member.overdueTasks} Gecikmiş</span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n\n            {/* Sağ Panel - Görev Panosu */}\n            <div className=\"flex-1 p-6 overflow-hidden\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-xl font-bold text-white\">Görev Panosu</h2>\n                <Button className=\"bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Görev Ekle\n                </Button>\n              </div>\n\n              <Tabs defaultValue=\"kanban\" className=\"h-full flex flex-col\">\n                <TabsList className=\"grid w-full grid-cols-3 bg-slate-800/50 mb-6\">\n                  <TabsTrigger value=\"unassigned\" className=\"data-[state=active]:bg-slate-700 data-[state=active]:text-white\">\n                    Atanmamış Görevler\n                  </TabsTrigger>\n                  <TabsTrigger value=\"kanban\" className=\"data-[state=active]:bg-slate-700 data-[state=active]:text-white\">\n                    Kanban Panosu\n                  </TabsTrigger>\n                  <TabsTrigger value=\"calendar\" className=\"data-[state=active]:bg-slate-700 data-[state=active]:text-white\">\n                    Takvim\n                  </TabsTrigger>\n                </TabsList>\n\n                <div className=\"flex-1 overflow-hidden\">\n                  <TabsContent value=\"unassigned\" className=\"h-full m-0\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 h-full overflow-y-auto\">\n                      {unassignedTasks.map((task) => (\n                        <TaskCard key={task.id} task={task} showAssignee={false} />\n                      ))}\n                    </div>\n                  </TabsContent>\n\n                  <TabsContent value=\"kanban\" className=\"h-full m-0\">\n                    <div className=\"grid grid-cols-4 gap-6 h-full\">\n                      {/* Yapılacak */}\n                      <div className=\"bg-slate-800/50 rounded-lg p-4 h-full overflow-y-auto\">\n                        <div className=\"flex items-center gap-2 mb-4\">\n                          <Circle className=\"w-4 h-4 text-slate-400\" />\n                          <h3 className=\"font-medium text-white\">Yapılacak</h3>\n                          <Badge className=\"bg-slate-700 text-slate-300\">{kanbanTasks.todo.length}</Badge>\n                        </div>\n                        {kanbanTasks.todo.map((task) => (\n                          <TaskCard key={task.id} task={task} />\n                        ))}\n                      </div>\n\n                      {/* Yapılıyor */}\n                      <div className=\"bg-slate-800/50 rounded-lg p-4 h-full overflow-y-auto\">\n                        <div className=\"flex items-center gap-2 mb-4\">\n                          <PlayCircle className=\"w-4 h-4 text-blue-400\" />\n                          <h3 className=\"font-medium text-white\">Yapılıyor</h3>\n                          <Badge className=\"bg-blue-600/20 text-blue-400\">{kanbanTasks.inProgress.length}</Badge>\n                        </div>\n                        {kanbanTasks.inProgress.map((task) => (\n                          <TaskCard key={task.id} task={task} />\n                        ))}\n                      </div>\n\n                      {/* İncelemede */}\n                      <div className=\"bg-slate-800/50 rounded-lg p-4 h-full overflow-y-auto\">\n                        <div className=\"flex items-center gap-2 mb-4\">\n                          <Eye className=\"w-4 h-4 text-yellow-400\" />\n                          <h3 className=\"font-medium text-white\">İncelemede</h3>\n                          <Badge className=\"bg-yellow-600/20 text-yellow-400\">{kanbanTasks.review.length}</Badge>\n                        </div>\n                        {kanbanTasks.review.map((task) => (\n                          <TaskCard key={task.id} task={task} />\n                        ))}\n                      </div>\n\n                      {/* Tamamlandı */}\n                      <div className=\"bg-slate-800/50 rounded-lg p-4 h-full overflow-y-auto\">\n                        <div className=\"flex items-center gap-2 mb-4\">\n                          <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                          <h3 className=\"font-medium text-white\">Tamamlandı</h3>\n                          <Badge className=\"bg-green-600/20 text-green-400\">{kanbanTasks.done.length}</Badge>\n                        </div>\n                        {kanbanTasks.done.map((task) => (\n                          <TaskCard key={task.id} task={task} />\n                        ))}\n                      </div>\n                    </div>\n                  </TabsContent>\n\n                  <TabsContent value=\"calendar\" className=\"h-full m-0\">\n                    <Card className=\"bg-slate-800/80 border-slate-700/50 backdrop-blur-sm h-full\">\n                      <CardContent className=\"p-6 h-full flex items-center justify-center\">\n                        <div className=\"text-center\">\n                          <Calendar className=\"w-16 h-16 text-slate-400 mx-auto mb-4\" />\n                          <h3 className=\"text-white font-medium mb-2\">Takvim Görünümü</h3>\n                          <p className=\"text-slate-400\">\n                            Takvim görünümü geliştirme aşamasında. \n                            <br />\n                            Görevlerin deadline'larını burada görüntüleyebileceksiniz.\n                          </p>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </TabsContent>\n                </div>\n              </Tabs>\n            </div>\n\n      </div>\n    </div>\n  );\n}\n","size_bytes":14090}}}