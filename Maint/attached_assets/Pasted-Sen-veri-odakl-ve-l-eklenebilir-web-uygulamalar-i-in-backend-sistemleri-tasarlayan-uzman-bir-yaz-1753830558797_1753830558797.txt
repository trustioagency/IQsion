Sen, veri odaklı ve ölçeklenebilir web uygulamaları için backend sistemleri tasarlayan uzman bir yazılım mimarısın. Görevin, bir "Atıflandırma Analizi" sayfasını besleyecek olan tüm arka plan mimarisini ve iş akışını tasarlamaktır.

Bu sistemi 3 ana fazda inşa edeceksin:

Faz 1: Veri Hazırlığı ve "Yolculukların" Oluşturulması

Amaç: Farklı kaynaklardan gelen ham ve kaotik veriyi, analiz için hazır, temiz ve anlamlı "müşteri yolculuklarına" dönüştürmek.

Adım 1.1: Ham Veri Toplama:
Tüm tıklamalar, site ziyaretleri, reklam etkileşimleri ve tamamlanmış siparişler gibi her bir "olay", ham bir şekilde, büyük ölçekli bir veri ambarında toplanacak.

Adım 1.2: Yolculukları Birleştirme:
Bir backend script'i oluşturacaksın. Bu script'in görevi, veri ambarındaki bu milyonlarca tekil olayı işlemek olacak. Her bir satın alma işlemi için, o satın almadan önceki tüm temas noktalarını bulacak, bunları kronolojik olarak sıralayacak ve tek bir "yolculuk" olarak, veri ambarı içinde customer_journeys adında yeni ve temiz bir tabloya kaydedecek. Bu tablodaki her bir satır, bir müşterinin baştan sona başarıyla tamamlanmış yolculuğunu temsil edecek.

Faz 2: Atıflandırma Modellerini Çalıştırma

Amaç: Temizlenmiş "yolculuk" verilerini kullanarak, farklı atıflandırma modellerine göre her bir pazarlama kanalının değerini hesaplamak.

Adım 2.1: Basit Modelleri Hesaplama:
customer_journeys tablosu üzerinde çalışacak veri sorguları yazacaksın. Bu sorgular, "İlk Tıklama", "Son Tıklama" ve "Lineer" gibi basit ve kural bazlı atıflandırma modellerine göre her bir kanalın ne kadar ciro getirdiğini hesaplayacak.

Adım 2.2: "Akıllı Modeli" Geliştirme:
Daha karmaşık bir backend algoritması geliştireceksin. Bu algoritma, customer_journeys tablosundaki binlerce yolculuk örneğini analiz ederek, her bir pazarlama kanalının satışa olan gerçek istatistiksel katkısını, olasılıksal yöntemler (veri odaklı atıflandırma) kullanarak bir skor olarak hesaplayacak.

Adım 2.3: Sonuçları Önbelleğe Alma (Caching):
Bu karmaşık ve hesaplaması uzun süren model sonuçlarını, her seferinde baştan çalıştırmamak için, günde bir kez çalıştırıp, sonuçları hızlı erişilebilir bir önbellek veritabanına kaydedeceksin. Bu, kullanıcı arayüzünün anında yüklenmesini sağlayacak.

Faz 3: Sonuçları Arayüze Sunma (API Servisi)

Amaç: Arka planda hesaplanan bu değerli sonuçları, kullanıcının gördüğü ön yüze (frontend) hızlı ve güvenli bir şekilde sunmak.

Adım 3.1: API'ı İnşa Etme:
Sunucusuz bir fonksiyon ortamında çalışacak bir API endpoint'i (bir "servis") oluşturacaksın. Bu servis, ön yüzden gelen veri isteklerini karşılayacak.

Adım 3.2: İsteği Karşılama:
Ön yüz, bu API endpoint'ine "Bana 'Akıllı Model'in sonuçlarını getir" gibi bir istek gönderecek.

Adım 3.3: Cevabı Sunma:
Senin API fonksiyonun bu isteği alacak, Faz 2'de önceden hesaplayıp önbelleğe aldığı hazır sonuçları hızlıca veritabanından okuyacak ve ön yüze, standart bir veri formatında (JSON) geri gönderecek.

